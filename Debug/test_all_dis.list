
test_all_dis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f9c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009124  08009124  0000a124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009184  08009184  0000b124  2**0
                  CONTENTS
  4 .ARM          00000008  08009184  08009184  0000a184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800918c  0800918c  0000b124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800918c  0800918c  0000a18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009190  08009190  0000a190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000124  20000000  08009194  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b124  2**0
                  CONTENTS
 10 .bss          00004980  20000124  20000124  0000b124  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  20004aa4  20004aa4  0000b124  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b124  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016aa6  00000000  00000000  0000b154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003de8  00000000  00000000  00021bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  000259e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f78  00000000  00000000  00026e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024b41  00000000  00000000  00027db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ada7  00000000  00000000  0004c8f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d008b  00000000  00000000  000676a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013772b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005428  00000000  00000000  00137770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0013cb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000124 	.word	0x20000124
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800910c 	.word	0x0800910c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000128 	.word	0x20000128
 80001c4:	0800910c 	.word	0x0800910c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <cs5361_set_mode>:
/* External variable declaration for I2S handle */
extern I2S_HandleTypeDef hi2s3;
/* External variable declaration for USB Device handle */

void cs5361_set_mode(cs5361_mode_t mode)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
  switch (mode)
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d002      	beq.n	80004ce <cs5361_set_mode+0x16>
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d007      	beq.n	80004dc <cs5361_set_mode+0x24>
    break;
  case CS5361_SLAVE_MODE:
    HAL_GPIO_WritePin(CS5361_MS_GPIO_Port, CS5361_MS_Pin, 0);
    break;
  default:
    break;
 80004cc:	e00d      	b.n	80004ea <cs5361_set_mode+0x32>
    HAL_GPIO_WritePin(CS5361_MS_GPIO_Port, CS5361_MS_Pin, 1);
 80004ce:	2201      	movs	r2, #1
 80004d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004d4:	4807      	ldr	r0, [pc, #28]	@ (80004f4 <cs5361_set_mode+0x3c>)
 80004d6:	f001 fd3d 	bl	8001f54 <HAL_GPIO_WritePin>
    break;
 80004da:	e006      	b.n	80004ea <cs5361_set_mode+0x32>
    HAL_GPIO_WritePin(CS5361_MS_GPIO_Port, CS5361_MS_Pin, 0);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004e2:	4804      	ldr	r0, [pc, #16]	@ (80004f4 <cs5361_set_mode+0x3c>)
 80004e4:	f001 fd36 	bl	8001f54 <HAL_GPIO_WritePin>
    break;
 80004e8:	bf00      	nop
  }
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40020c00 	.word	0x40020c00

080004f8 <cs5361_set_speed_mode>:
void cs5361_set_speed_mode(cs5361_speed_mode_t speed)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
  switch (speed)
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	2b02      	cmp	r3, #2
 8000506:	d020      	beq.n	800054a <cs5361_set_speed_mode+0x52>
 8000508:	2b02      	cmp	r3, #2
 800050a:	dc2b      	bgt.n	8000564 <cs5361_set_speed_mode+0x6c>
 800050c:	2b00      	cmp	r3, #0
 800050e:	d002      	beq.n	8000516 <cs5361_set_speed_mode+0x1e>
 8000510:	2b01      	cmp	r3, #1
 8000512:	d00d      	beq.n	8000530 <cs5361_set_speed_mode+0x38>
  case CS5361_QUAD_SPEED:
    HAL_GPIO_WritePin(CS5361_M0_GPIO_Port, CS5361_M0_Pin, 0);
    HAL_GPIO_WritePin(CS5361_M1_GPIO_Port, CS5361_M1_Pin, 1);
    break;
  default:
    break;
 8000514:	e026      	b.n	8000564 <cs5361_set_speed_mode+0x6c>
    HAL_GPIO_WritePin(CS5361_M0_GPIO_Port, CS5361_M0_Pin, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800051c:	4814      	ldr	r0, [pc, #80]	@ (8000570 <cs5361_set_speed_mode+0x78>)
 800051e:	f001 fd19 	bl	8001f54 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS5361_M1_GPIO_Port, CS5361_M1_Pin, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000528:	4811      	ldr	r0, [pc, #68]	@ (8000570 <cs5361_set_speed_mode+0x78>)
 800052a:	f001 fd13 	bl	8001f54 <HAL_GPIO_WritePin>
    break;
 800052e:	e01a      	b.n	8000566 <cs5361_set_speed_mode+0x6e>
    HAL_GPIO_WritePin(CS5361_M0_GPIO_Port, CS5361_M0_Pin, 1);
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000536:	480e      	ldr	r0, [pc, #56]	@ (8000570 <cs5361_set_speed_mode+0x78>)
 8000538:	f001 fd0c 	bl	8001f54 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS5361_M1_GPIO_Port, CS5361_M1_Pin, 0);
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000542:	480b      	ldr	r0, [pc, #44]	@ (8000570 <cs5361_set_speed_mode+0x78>)
 8000544:	f001 fd06 	bl	8001f54 <HAL_GPIO_WritePin>
    break;
 8000548:	e00d      	b.n	8000566 <cs5361_set_speed_mode+0x6e>
    HAL_GPIO_WritePin(CS5361_M0_GPIO_Port, CS5361_M0_Pin, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000550:	4807      	ldr	r0, [pc, #28]	@ (8000570 <cs5361_set_speed_mode+0x78>)
 8000552:	f001 fcff 	bl	8001f54 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS5361_M1_GPIO_Port, CS5361_M1_Pin, 1);
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800055c:	4804      	ldr	r0, [pc, #16]	@ (8000570 <cs5361_set_speed_mode+0x78>)
 800055e:	f001 fcf9 	bl	8001f54 <HAL_GPIO_WritePin>
    break;
 8000562:	e000      	b.n	8000566 <cs5361_set_speed_mode+0x6e>
    break;
 8000564:	bf00      	nop
  }
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40020c00 	.word	0x40020c00

08000574 <cs5361_set_mdiv>:
void cs5361_set_mdiv(cs5361_mdiv_mode_t mdiv)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
  switch (mdiv)
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d002      	beq.n	800058a <cs5361_set_mdiv+0x16>
 8000584:	2b01      	cmp	r3, #1
 8000586:	d007      	beq.n	8000598 <cs5361_set_mdiv+0x24>
    break;
  case CS5361_MDIV_2:
    HAL_GPIO_WritePin(CS5361_MDIV_GPIO_Port, CS5361_MDIV_Pin, 1);
    break;
  default:
    break;
 8000588:	e00d      	b.n	80005a6 <cs5361_set_mdiv+0x32>
    HAL_GPIO_WritePin(CS5361_MDIV_GPIO_Port, CS5361_MDIV_Pin, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000590:	4807      	ldr	r0, [pc, #28]	@ (80005b0 <cs5361_set_mdiv+0x3c>)
 8000592:	f001 fcdf 	bl	8001f54 <HAL_GPIO_WritePin>
    break;
 8000596:	e006      	b.n	80005a6 <cs5361_set_mdiv+0x32>
    HAL_GPIO_WritePin(CS5361_MDIV_GPIO_Port, CS5361_MDIV_Pin, 1);
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800059e:	4804      	ldr	r0, [pc, #16]	@ (80005b0 <cs5361_set_mdiv+0x3c>)
 80005a0:	f001 fcd8 	bl	8001f54 <HAL_GPIO_WritePin>
    break;
 80005a4:	bf00      	nop
  }
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020c00 	.word	0x40020c00

080005b4 <cs5361_set_hpf>:
void cs5361_set_hpf(cs5361_hpf_mode_t hpf)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
  switch (hpf)
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d002      	beq.n	80005ca <cs5361_set_hpf+0x16>
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d007      	beq.n	80005d8 <cs5361_set_hpf+0x24>
    break;
  case CS5361_HPF_ENABLE:
    HAL_GPIO_WritePin(CS5361_HPF_GPIO_Port, CS5361_HPF_Pin, 0);
    break;
  default:
    break;
 80005c8:	e00d      	b.n	80005e6 <cs5361_set_hpf+0x32>
    HAL_GPIO_WritePin(CS5361_HPF_GPIO_Port, CS5361_HPF_Pin, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005d0:	4807      	ldr	r0, [pc, #28]	@ (80005f0 <cs5361_set_hpf+0x3c>)
 80005d2:	f001 fcbf 	bl	8001f54 <HAL_GPIO_WritePin>
    break;
 80005d6:	e006      	b.n	80005e6 <cs5361_set_hpf+0x32>
    HAL_GPIO_WritePin(CS5361_HPF_GPIO_Port, CS5361_HPF_Pin, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005de:	4804      	ldr	r0, [pc, #16]	@ (80005f0 <cs5361_set_hpf+0x3c>)
 80005e0:	f001 fcb8 	bl	8001f54 <HAL_GPIO_WritePin>
    break;
 80005e4:	bf00      	nop
  }
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40020400 	.word	0x40020400

080005f4 <cs5361_set_sa>:
void cs5361_set_sa(cs5361_sa_mode_t sa)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
  switch (sa)
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d002      	beq.n	800060a <cs5361_set_sa+0x16>
 8000604:	2b01      	cmp	r3, #1
 8000606:	d007      	beq.n	8000618 <cs5361_set_sa+0x24>
    break;
  case CS5361_LEFT_JUSTIFIED_MODE:
    HAL_GPIO_WritePin(CS5361_SA_GPIO_Port, CS5361_SA_Pin, 0);
    break;
  default:
    break;
 8000608:	e00d      	b.n	8000626 <cs5361_set_sa+0x32>
    HAL_GPIO_WritePin(CS5361_SA_GPIO_Port, CS5361_SA_Pin, 1);
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000610:	4807      	ldr	r0, [pc, #28]	@ (8000630 <cs5361_set_sa+0x3c>)
 8000612:	f001 fc9f 	bl	8001f54 <HAL_GPIO_WritePin>
    break;
 8000616:	e006      	b.n	8000626 <cs5361_set_sa+0x32>
    HAL_GPIO_WritePin(CS5361_SA_GPIO_Port, CS5361_SA_Pin, 0);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800061e:	4804      	ldr	r0, [pc, #16]	@ (8000630 <cs5361_set_sa+0x3c>)
 8000620:	f001 fc98 	bl	8001f54 <HAL_GPIO_WritePin>
    break;
 8000624:	bf00      	nop
  }
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40020400 	.word	0x40020400

08000634 <cs5361_powerup>:
void cs5361_powerdown(void)
{
  HAL_GPIO_WritePin(CS5361_RST_GPIO_Port, CS5361_RST_Pin, 0);
}
void cs5361_powerup(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(CS5361_RST_GPIO_Port, CS5361_RST_Pin, 1);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800063e:	4802      	ldr	r0, [pc, #8]	@ (8000648 <cs5361_powerup+0x14>)
 8000640:	f001 fc88 	bl	8001f54 <HAL_GPIO_WritePin>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40020400 	.word	0x40020400

0800064c <cs5361_init>:
void cs5361_init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  cs5361_set_mode(CS5361_SLAVE_MODE);
 8000650:	2001      	movs	r0, #1
 8000652:	f7ff ff31 	bl	80004b8 <cs5361_set_mode>
  cs5361_set_speed_mode(CS5361_SINGLE_SPEED); //CS5361_SINGLE_SPEED  //CS5361_QUAD_SPEED 96khz
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff ff4e 	bl	80004f8 <cs5361_set_speed_mode>
  cs5361_set_mdiv(CS5361_MDIV_2);
 800065c:	2001      	movs	r0, #1
 800065e:	f7ff ff89 	bl	8000574 <cs5361_set_mdiv>
  cs5361_set_hpf(CS5361_HPF_ENABLE);
 8000662:	2001      	movs	r0, #1
 8000664:	f7ff ffa6 	bl	80005b4 <cs5361_set_hpf>
  cs5361_set_sa(CS5361_I2S_MODE);
 8000668:	2000      	movs	r0, #0
 800066a:	f7ff ffc3 	bl	80005f4 <cs5361_set_sa>
  cs5361_powerup();
 800066e:	f7ff ffe1 	bl	8000634 <cs5361_powerup>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <I2S_TO_CS5361>:

/**
 * @brief Bắt đầu nhận dữ liệu từ CS5361 qua I2S DMA
 */
void I2S_TO_CS5361(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
  // Đèn báo bắt đầu truyền dữ liệu
  HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 800067e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000682:	4811      	ldr	r0, [pc, #68]	@ (80006c8 <I2S_TO_CS5361+0x50>)
 8000684:	f001 fc7f 	bl	8001f86 <HAL_GPIO_TogglePin>
  
  // Đánh dấu I2S đang hoạt động
  i2s_active = 1;
 8000688:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <I2S_TO_CS5361+0x54>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
  last_i2s_activity = HAL_GetTick();
 800068e:	f000 fdf7 	bl	8001280 <HAL_GetTick>
 8000692:	4603      	mov	r3, r0
 8000694:	4a0e      	ldr	r2, [pc, #56]	@ (80006d0 <I2S_TO_CS5361+0x58>)
 8000696:	6013      	str	r3, [r2, #0]
  
  // Bắt đầu nhận dữ liệu qua DMA
  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(&hi2s3, (uint16_t *)adc_buffer, AUDIO_IN_PACKET * 2);
 8000698:	22c0      	movs	r2, #192	@ 0xc0
 800069a:	490e      	ldr	r1, [pc, #56]	@ (80006d4 <I2S_TO_CS5361+0x5c>)
 800069c:	480e      	ldr	r0, [pc, #56]	@ (80006d8 <I2S_TO_CS5361+0x60>)
 800069e:	f001 fdcd 	bl	800223c <HAL_I2S_Receive_DMA>
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d008      	beq.n	80006be <I2S_TO_CS5361+0x46>
  {
    // Báo lỗi nếu không khởi tạo được DMA
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <I2S_TO_CS5361+0x50>)
 80006b4:	f001 fc4e 	bl	8001f54 <HAL_GPIO_WritePin>
    i2s_active = 0;
 80006b8:	4b04      	ldr	r3, [pc, #16]	@ (80006cc <I2S_TO_CS5361+0x54>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
  }
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40020c00 	.word	0x40020c00
 80006cc:	200003b8 	.word	0x200003b8
 80006d0:	200003bc 	.word	0x200003bc
 80006d4:	20000238 	.word	0x20000238
 80006d8:	20000148 	.word	0x20000148

080006dc <HAL_I2S_RxHalfCpltCallback>:

/**
 * @brief Callback khi nhận được nửa buffer DMA
 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  if (hi2s->Instance == hi2s3.Instance)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <HAL_I2S_RxHalfCpltCallback+0x8c>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d137      	bne.n	8000760 <HAL_I2S_RxHalfCpltCallback+0x84>
  {
    // Đèn báo callback được gọi
    HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80006f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f4:	481d      	ldr	r0, [pc, #116]	@ (800076c <HAL_I2S_RxHalfCpltCallback+0x90>)
 80006f6:	f001 fc46 	bl	8001f86 <HAL_GPIO_TogglePin>
    last_i2s_activity = HAL_GetTick();
 80006fa:	f000 fdc1 	bl	8001280 <HAL_GetTick>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a1b      	ldr	r2, [pc, #108]	@ (8000770 <HAL_I2S_RxHalfCpltCallback+0x94>)
 8000702:	6013      	str	r3, [r2, #0]
    
    // Lấy con trỏ đến USB audio buffer
    USBD_AUDIO_HandleTypeDef *haudio = (USBD_AUDIO_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <HAL_I2S_RxHalfCpltCallback+0x98>)
 8000706:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800070a:	613b      	str	r3, [r7, #16]
    if (haudio != NULL && usb_active)
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d026      	beq.n	8000760 <HAL_I2S_RxHalfCpltCallback+0x84>
 8000712:	4b19      	ldr	r3, [pc, #100]	@ (8000778 <HAL_I2S_RxHalfCpltCallback+0x9c>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2b00      	cmp	r3, #0
 800071a:	d021      	beq.n	8000760 <HAL_I2S_RxHalfCpltCallback+0x84>
    {
      // Xử lý nửa đầu của buffer DMA
      int16_t *usb_buf = haudio->in_buffer;
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 8000722:	330a      	adds	r3, #10
 8000724:	60fb      	str	r3, [r7, #12]
      
      // Chỉ lấy kênh trái (L) từ CS5361
      for (uint16_t i = 0; i < (AUDIO_IN_PACKET / 2); i++)
 8000726:	2300      	movs	r3, #0
 8000728:	82fb      	strh	r3, [r7, #22]
 800072a:	e016      	b.n	800075a <HAL_I2S_RxHalfCpltCallback+0x7e>
      {
        // Lấy mẫu từ kênh trái (index chẵn)
        int32_t sample = adc_buffer[i*2];
 800072c:	8afb      	ldrh	r3, [r7, #22]
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	4a12      	ldr	r2, [pc, #72]	@ (800077c <HAL_I2S_RxHalfCpltCallback+0xa0>)
 8000732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000736:	60bb      	str	r3, [r7, #8]
        
        // Chuyển đổi từ 24-bit sang 16-bit và khuếch đại
        usb_buf[i] = (int16_t)((sample >> 8) * volume_gain);
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	121b      	asrs	r3, r3, #8
 800073c:	b29b      	uxth	r3, r3
 800073e:	4a10      	ldr	r2, [pc, #64]	@ (8000780 <HAL_I2S_RxHalfCpltCallback+0xa4>)
 8000740:	7812      	ldrb	r2, [r2, #0]
 8000742:	fb13 f302 	smulbb	r3, r3, r2
 8000746:	b299      	uxth	r1, r3
 8000748:	8afb      	ldrh	r3, [r7, #22]
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	68fa      	ldr	r2, [r7, #12]
 800074e:	4413      	add	r3, r2
 8000750:	b20a      	sxth	r2, r1
 8000752:	801a      	strh	r2, [r3, #0]
      for (uint16_t i = 0; i < (AUDIO_IN_PACKET / 2); i++)
 8000754:	8afb      	ldrh	r3, [r7, #22]
 8000756:	3301      	adds	r3, #1
 8000758:	82fb      	strh	r3, [r7, #22]
 800075a:	8afb      	ldrh	r3, [r7, #22]
 800075c:	2b2f      	cmp	r3, #47	@ 0x2f
 800075e:	d9e5      	bls.n	800072c <HAL_I2S_RxHalfCpltCallback+0x50>
      }
    }
  }
}
 8000760:	bf00      	nop
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000148 	.word	0x20000148
 800076c:	40020c00 	.word	0x40020c00
 8000770:	200003bc 	.word	0x200003bc
 8000774:	200003d0 	.word	0x200003d0
 8000778:	200003b9 	.word	0x200003b9
 800077c:	20000238 	.word	0x20000238
 8000780:	20000000 	.word	0x20000000

08000784 <HAL_I2S_RxCpltCallback>:

/**
 * @brief Callback khi nhận đủ buffer DMA
 */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  if (hi2s->Instance == hi2s3.Instance)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <HAL_I2S_RxCpltCallback+0xa4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	429a      	cmp	r2, r3
 8000796:	d142      	bne.n	800081e <HAL_I2S_RxCpltCallback+0x9a>
  {
    // Đèn báo callback được gọi
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000798:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800079c:	4823      	ldr	r0, [pc, #140]	@ (800082c <HAL_I2S_RxCpltCallback+0xa8>)
 800079e:	f001 fbf2 	bl	8001f86 <HAL_GPIO_TogglePin>
    last_i2s_activity = HAL_GetTick();
 80007a2:	f000 fd6d 	bl	8001280 <HAL_GetTick>
 80007a6:	4603      	mov	r3, r0
 80007a8:	4a21      	ldr	r2, [pc, #132]	@ (8000830 <HAL_I2S_RxCpltCallback+0xac>)
 80007aa:	6013      	str	r3, [r2, #0]
    
    // Lấy con trỏ đến USB audio buffer
    USBD_AUDIO_HandleTypeDef *haudio = (USBD_AUDIO_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80007ac:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <HAL_I2S_RxCpltCallback+0xb0>)
 80007ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80007b2:	613b      	str	r3, [r7, #16]
    if (haudio != NULL && usb_active)
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d031      	beq.n	800081e <HAL_I2S_RxCpltCallback+0x9a>
 80007ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <HAL_I2S_RxCpltCallback+0xb4>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d02c      	beq.n	800081e <HAL_I2S_RxCpltCallback+0x9a>
    {
      // Xử lý nửa sau của buffer DMA
      int16_t *usb_buf = haudio->in_buffer + (AUDIO_IN_PACKET / 2);
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 80007ca:	330a      	adds	r3, #10
 80007cc:	3360      	adds	r3, #96	@ 0x60
 80007ce:	60fb      	str	r3, [r7, #12]
      
      // Chỉ lấy kênh trái (L) từ CS5361
      for (uint16_t i = 0; i < (AUDIO_IN_PACKET / 2); i++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	82fb      	strh	r3, [r7, #22]
 80007d4:	e017      	b.n	8000806 <HAL_I2S_RxCpltCallback+0x82>
      {
        // Lấy mẫu từ kênh trái (index chẵn) trong nửa sau của buffer DMA
        int32_t sample = adc_buffer[(i + (AUDIO_IN_PACKET / 2))*2];
 80007d6:	8afb      	ldrh	r3, [r7, #22]
 80007d8:	3330      	adds	r3, #48	@ 0x30
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	4a17      	ldr	r2, [pc, #92]	@ (800083c <HAL_I2S_RxCpltCallback+0xb8>)
 80007de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e2:	60bb      	str	r3, [r7, #8]
        
        // Chuyển đổi từ 24-bit sang 16-bit và khuếch đại
        usb_buf[i] = (int16_t)((sample >> 8) * volume_gain);
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	121b      	asrs	r3, r3, #8
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	4a15      	ldr	r2, [pc, #84]	@ (8000840 <HAL_I2S_RxCpltCallback+0xbc>)
 80007ec:	7812      	ldrb	r2, [r2, #0]
 80007ee:	fb13 f302 	smulbb	r3, r3, r2
 80007f2:	b299      	uxth	r1, r3
 80007f4:	8afb      	ldrh	r3, [r7, #22]
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	b20a      	sxth	r2, r1
 80007fe:	801a      	strh	r2, [r3, #0]
      for (uint16_t i = 0; i < (AUDIO_IN_PACKET / 2); i++)
 8000800:	8afb      	ldrh	r3, [r7, #22]
 8000802:	3301      	adds	r3, #1
 8000804:	82fb      	strh	r3, [r7, #22]
 8000806:	8afb      	ldrh	r3, [r7, #22]
 8000808:	2b2f      	cmp	r3, #47	@ 0x2f
 800080a:	d9e4      	bls.n	80007d6 <HAL_I2S_RxCpltCallback+0x52>
      }
      
      // Gửi toàn bộ buffer qua USB
      USBD_LL_Transmit(&hUsbDeviceFS, AUDIO_IN_EP, (uint8_t*)haudio->in_buffer, AUDIO_IN_PACKET);
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	f503 5270 	add.w	r2, r3, #15360	@ 0x3c00
 8000812:	320a      	adds	r2, #10
 8000814:	2360      	movs	r3, #96	@ 0x60
 8000816:	2181      	movs	r1, #129	@ 0x81
 8000818:	4806      	ldr	r0, [pc, #24]	@ (8000834 <HAL_I2S_RxCpltCallback+0xb0>)
 800081a:	f008 fbb1 	bl	8008f80 <USBD_LL_Transmit>
    }
  }
}
 800081e:	bf00      	nop
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000148 	.word	0x20000148
 800082c:	40020c00 	.word	0x40020c00
 8000830:	200003bc 	.word	0x200003bc
 8000834:	200003d0 	.word	0x200003d0
 8000838:	200003b9 	.word	0x200003b9
 800083c:	20000238 	.word	0x20000238
 8000840:	20000000 	.word	0x20000000

08000844 <USB_Audio_Ready>:

/**
 * @brief Kiểm tra USB Audio đã sẵn sàng chưa
 */
uint8_t USB_Audio_Ready(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  if (hUsbDeviceFS.pClassData != NULL)
 8000848:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <USB_Audio_Ready+0x2c>)
 800084a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800084e:	2b00      	cmp	r3, #0
 8000850:	d004      	beq.n	800085c <USB_Audio_Ready+0x18>
  {
    usb_active = 1;
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <USB_Audio_Ready+0x30>)
 8000854:	2201      	movs	r2, #1
 8000856:	701a      	strb	r2, [r3, #0]
    return 1;
 8000858:	2301      	movs	r3, #1
 800085a:	e003      	b.n	8000864 <USB_Audio_Ready+0x20>
  }
  usb_active = 0;
 800085c:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <USB_Audio_Ready+0x30>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
  return 0;
 8000862:	2300      	movs	r3, #0
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	200003d0 	.word	0x200003d0
 8000874:	200003b9 	.word	0x200003b9

08000878 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087e:	f000 fc99 	bl	80011b4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000882:	f000 f915 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000886:	f000 fa2b 	bl	8000ce0 <MX_GPIO_Init>
  MX_DMA_Init();
 800088a:	f000 fa09 	bl	8000ca0 <MX_DMA_Init>
  MX_TIM4_Init();
 800088e:	f000 f9bb 	bl	8000c08 <MX_TIM4_Init>
  MX_CRC_Init();
 8000892:	f000 f977 	bl	8000b84 <MX_CRC_Init>
  MX_USB_DEVICE_Init();
 8000896:	f007 ff21 	bl	80086dc <MX_USB_DEVICE_Init>
  MX_I2S3_Init();
 800089a:	f000 f987 	bl	8000bac <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  // Tắt tất cả đèn LED
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008a4:	487a      	ldr	r0, [pc, #488]	@ (8000a90 <main+0x218>)
 80008a6:	f001 fb55 	bl	8001f54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008b0:	4877      	ldr	r0, [pc, #476]	@ (8000a90 <main+0x218>)
 80008b2:	f001 fb4f 	bl	8001f54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008bc:	4874      	ldr	r0, [pc, #464]	@ (8000a90 <main+0x218>)
 80008be:	f001 fb49 	bl	8001f54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008c8:	4871      	ldr	r0, [pc, #452]	@ (8000a90 <main+0x218>)
 80008ca:	f001 fb43 	bl	8001f54 <HAL_GPIO_WritePin>

  // Khởi tạo CS5361
  cs5361_init();
 80008ce:	f7ff febd 	bl	800064c <cs5361_init>
  HAL_Delay(50);
 80008d2:	2032      	movs	r0, #50	@ 0x32
 80008d4:	f000 fce0 	bl	8001298 <HAL_Delay>

  // Chờ USB khởi tạo
  uint32_t usb_timeout = HAL_GetTick() + 3000; // 3 second timeout
 80008d8:	f000 fcd2 	bl	8001280 <HAL_GetTick>
 80008dc:	4603      	mov	r3, r0
 80008de:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 80008e2:	60bb      	str	r3, [r7, #8]
  while (!USB_Audio_Ready() && HAL_GetTick() < usb_timeout)
 80008e4:	e007      	b.n	80008f6 <main+0x7e>
  {
    HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 80008e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008ea:	4869      	ldr	r0, [pc, #420]	@ (8000a90 <main+0x218>)
 80008ec:	f001 fb4b 	bl	8001f86 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 80008f0:	2064      	movs	r0, #100	@ 0x64
 80008f2:	f000 fcd1 	bl	8001298 <HAL_Delay>
  while (!USB_Audio_Ready() && HAL_GetTick() < usb_timeout)
 80008f6:	f7ff ffa5 	bl	8000844 <USB_Audio_Ready>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d105      	bne.n	800090c <main+0x94>
 8000900:	f000 fcbe 	bl	8001280 <HAL_GetTick>
 8000904:	4602      	mov	r2, r0
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	4293      	cmp	r3, r2
 800090a:	d8ec      	bhi.n	80008e6 <main+0x6e>
  }

  if (USB_Audio_Ready())
 800090c:	f7ff ff9a 	bl	8000844 <USB_Audio_Ready>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d011      	beq.n	800093a <main+0xc2>
  {
    // USB đã sẵn sàng, bắt đầu nhận dữ liệu từ CS5361
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800091c:	485c      	ldr	r0, [pc, #368]	@ (8000a90 <main+0x218>)
 800091e:	f001 fb19 	bl	8001f54 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8000922:	20c8      	movs	r0, #200	@ 0xc8
 8000924:	f000 fcb8 	bl	8001298 <HAL_Delay>
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800092e:	4858      	ldr	r0, [pc, #352]	@ (8000a90 <main+0x218>)
 8000930:	f001 fb10 	bl	8001f54 <HAL_GPIO_WritePin>
    I2S_TO_CS5361();
 8000934:	f7ff fea0 	bl	8000678 <I2S_TO_CS5361>
 8000938:	e01a      	b.n	8000970 <main+0xf8>
  }
  else
  {
    // USB chưa sẵn sàng, báo lỗi
    for (int i = 0; i < 5; i++)
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	e014      	b.n	800096a <main+0xf2>
    {
      HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000946:	4852      	ldr	r0, [pc, #328]	@ (8000a90 <main+0x218>)
 8000948:	f001 fb04 	bl	8001f54 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 800094c:	2064      	movs	r0, #100	@ 0x64
 800094e:	f000 fca3 	bl	8001298 <HAL_Delay>
      HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000958:	484d      	ldr	r0, [pc, #308]	@ (8000a90 <main+0x218>)
 800095a:	f001 fafb 	bl	8001f54 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 800095e:	2064      	movs	r0, #100	@ 0x64
 8000960:	f000 fc9a 	bl	8001298 <HAL_Delay>
    for (int i = 0; i < 5; i++)
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	3301      	adds	r3, #1
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	2b04      	cmp	r3, #4
 800096e:	dde7      	ble.n	8000940 <main+0xc8>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Kiểm tra trạng thái USB và I2S định kỳ
    static uint32_t last_check = 0;
    uint32_t current_time = HAL_GetTick();
 8000970:	f000 fc86 	bl	8001280 <HAL_GetTick>
 8000974:	6078      	str	r0, [r7, #4]
    
    if (current_time - last_check > 1000) // Kiểm tra mỗi giây
 8000976:	4b47      	ldr	r3, [pc, #284]	@ (8000a94 <main+0x21c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000982:	d9f5      	bls.n	8000970 <main+0xf8>
    {
      last_check = current_time;
 8000984:	4a43      	ldr	r2, [pc, #268]	@ (8000a94 <main+0x21c>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6013      	str	r3, [r2, #0]
      
      // Kiểm tra USB
      if (USB_Audio_Ready())
 800098a:	f7ff ff5b 	bl	8000844 <USB_Audio_Ready>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d0ed      	beq.n	8000970 <main+0xf8>
      {
        // Hiển thị trạng thái hoạt động
        HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000994:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000998:	483d      	ldr	r0, [pc, #244]	@ (8000a90 <main+0x218>)
 800099a:	f001 faf4 	bl	8001f86 <HAL_GPIO_TogglePin>
        
        // Kiểm tra I2S
        if (!i2s_active || (current_time - last_i2s_activity > 500))
 800099e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a98 <main+0x220>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d006      	beq.n	80009b6 <main+0x13e>
 80009a8:	4b3c      	ldr	r3, [pc, #240]	@ (8000a9c <main+0x224>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80009b4:	d901      	bls.n	80009ba <main+0x142>
        {
          // I2S không hoạt động hoặc đã lâu không có dữ liệu mới
          // Khởi động lại I2S
          I2S_TO_CS5361();
 80009b6:	f7ff fe5f 	bl	8000678 <I2S_TO_CS5361>
        }
        
        // Kiểm tra tín hiệu âm thanh
        static uint32_t silent_count = 0;
        int32_t signal_level = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
        
        // Tính mức tín hiệu trung bình
        for (int i = 0; i < 10; i++)
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	e00d      	b.n	80009e0 <main+0x168>
        {
          signal_level += abs(adc_buffer[i*2]);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4a35      	ldr	r2, [pc, #212]	@ (8000aa0 <main+0x228>)
 80009ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4413      	add	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
        for (int i = 0; i < 10; i++)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3301      	adds	r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2b09      	cmp	r3, #9
 80009e4:	ddee      	ble.n	80009c4 <main+0x14c>
        }
        signal_level /= 10;
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	4a2e      	ldr	r2, [pc, #184]	@ (8000aa4 <main+0x22c>)
 80009ea:	fb82 1203 	smull	r1, r2, r2, r3
 80009ee:	1092      	asrs	r2, r2, #2
 80009f0:	17db      	asrs	r3, r3, #31
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	613b      	str	r3, [r7, #16]
        
        // Điều chỉnh khuếch đại tự động
        if (signal_level < 1000)
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80009fc:	da25      	bge.n	8000a4a <main+0x1d2>
        {
          silent_count++;
 80009fe:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa8 <main+0x230>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	3301      	adds	r3, #1
 8000a04:	4a28      	ldr	r2, [pc, #160]	@ (8000aa8 <main+0x230>)
 8000a06:	6013      	str	r3, [r2, #0]
          if (silent_count > 5 && volume_gain < 10)
 8000a08:	4b27      	ldr	r3, [pc, #156]	@ (8000aa8 <main+0x230>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b05      	cmp	r3, #5
 8000a0e:	d9af      	bls.n	8000970 <main+0xf8>
 8000a10:	4b26      	ldr	r3, [pc, #152]	@ (8000aac <main+0x234>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b09      	cmp	r3, #9
 8000a16:	d8ab      	bhi.n	8000970 <main+0xf8>
          {
            volume_gain++;
 8000a18:	4b24      	ldr	r3, [pc, #144]	@ (8000aac <main+0x234>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	4b22      	ldr	r3, [pc, #136]	@ (8000aac <main+0x234>)
 8000a22:	701a      	strb	r2, [r3, #0]
            silent_count = 0;
 8000a24:	4b20      	ldr	r3, [pc, #128]	@ (8000aa8 <main+0x230>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a30:	4817      	ldr	r0, [pc, #92]	@ (8000a90 <main+0x218>)
 8000a32:	f001 fa8f 	bl	8001f54 <HAL_GPIO_WritePin>
            HAL_Delay(50);
 8000a36:	2032      	movs	r0, #50	@ 0x32
 8000a38:	f000 fc2e 	bl	8001298 <HAL_Delay>
            HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a42:	4813      	ldr	r0, [pc, #76]	@ (8000a90 <main+0x218>)
 8000a44:	f001 fa86 	bl	8001f54 <HAL_GPIO_WritePin>
 8000a48:	e792      	b.n	8000970 <main+0xf8>
          }
        }
        else
        {
          silent_count = 0;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	@ (8000aa8 <main+0x230>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
          if (signal_level > 20000 && volume_gain > 1)
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000a56:	4293      	cmp	r3, r2
 8000a58:	dd8a      	ble.n	8000970 <main+0xf8>
 8000a5a:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <main+0x234>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d986      	bls.n	8000970 <main+0xf8>
          {
            volume_gain--;
 8000a62:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <main+0x234>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <main+0x234>)
 8000a6c:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a74:	4806      	ldr	r0, [pc, #24]	@ (8000a90 <main+0x218>)
 8000a76:	f001 fa6d 	bl	8001f54 <HAL_GPIO_WritePin>
            HAL_Delay(50);
 8000a7a:	2032      	movs	r0, #50	@ 0x32
 8000a7c:	f000 fc0c 	bl	8001298 <HAL_Delay>
            HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a86:	4802      	ldr	r0, [pc, #8]	@ (8000a90 <main+0x218>)
 8000a88:	f001 fa64 	bl	8001f54 <HAL_GPIO_WritePin>
  {
 8000a8c:	e770      	b.n	8000970 <main+0xf8>
 8000a8e:	bf00      	nop
 8000a90:	40020c00 	.word	0x40020c00
 8000a94:	200003c0 	.word	0x200003c0
 8000a98:	200003b8 	.word	0x200003b8
 8000a9c:	200003bc 	.word	0x200003bc
 8000aa0:	20000238 	.word	0x20000238
 8000aa4:	66666667 	.word	0x66666667
 8000aa8:	200003c4 	.word	0x200003c4
 8000aac:	20000000 	.word	0x20000000

08000ab0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b094      	sub	sp, #80	@ 0x50
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0320 	add.w	r3, r7, #32
 8000aba:	2230      	movs	r2, #48	@ 0x30
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f008 faf8 	bl	80090b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	4b28      	ldr	r3, [pc, #160]	@ (8000b7c <SystemClock_Config+0xcc>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000adc:	4a27      	ldr	r2, [pc, #156]	@ (8000b7c <SystemClock_Config+0xcc>)
 8000ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae4:	4b25      	ldr	r3, [pc, #148]	@ (8000b7c <SystemClock_Config+0xcc>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af0:	2300      	movs	r3, #0
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <SystemClock_Config+0xd0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a21      	ldr	r2, [pc, #132]	@ (8000b80 <SystemClock_Config+0xd0>)
 8000afa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	4b1f      	ldr	r3, [pc, #124]	@ (8000b80 <SystemClock_Config+0xd0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b16:	2302      	movs	r3, #2
 8000b18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b20:	2308      	movs	r3, #8
 8000b22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b24:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b28:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b2e:	2307      	movs	r3, #7
 8000b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b32:	f107 0320 	add.w	r3, r7, #32
 8000b36:	4618      	mov	r0, r3
 8000b38:	f003 fa6e 	bl	8004018 <HAL_RCC_OscConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b42:	f000 f96d 	bl	8000e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000b46:	230f      	movs	r3, #15
 8000b48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b52:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	2105      	movs	r1, #5
 8000b64:	4618      	mov	r0, r3
 8000b66:	f003 fccf 	bl	8004508 <HAL_RCC_ClockConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b70:	f000 f956 	bl	8000e20 <Error_Handler>
  }
}
 8000b74:	bf00      	nop
 8000b76:	3750      	adds	r7, #80	@ 0x50
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40007000 	.word	0x40007000

08000b84 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <MX_CRC_Init+0x20>)
 8000b8a:	4a07      	ldr	r2, [pc, #28]	@ (8000ba8 <MX_CRC_Init+0x24>)
 8000b8c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <MX_CRC_Init+0x20>)
 8000b90:	f000 fcb7 	bl	8001502 <HAL_CRC_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000b9a:	f000 f941 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000140 	.word	0x20000140
 8000ba8:	40023000 	.word	0x40023000

08000bac <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000bb0:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <MX_I2S3_Init+0x54>)
 8000bb2:	4a14      	ldr	r2, [pc, #80]	@ (8000c04 <MX_I2S3_Init+0x58>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 8000bb6:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <MX_I2S3_Init+0x54>)
 8000bb8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000bbc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <MX_I2S3_Init+0x54>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <MX_I2S3_Init+0x54>)
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bca:	4b0d      	ldr	r3, [pc, #52]	@ (8000c00 <MX_I2S3_Init+0x54>)
 8000bcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bd0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <MX_I2S3_Init+0x54>)
 8000bd4:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000bd8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000bda:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <MX_I2S3_Init+0x54>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000be0:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <MX_I2S3_Init+0x54>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <MX_I2S3_Init+0x54>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <MX_I2S3_Init+0x54>)
 8000bee:	f001 f9e5 	bl	8001fbc <HAL_I2S_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000bf8:	f000 f912 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000148 	.word	0x20000148
 8000c04:	40003c00 	.word	0x40003c00

08000c08 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <MX_TIM4_Init+0x90>)
 8000c26:	4a1d      	ldr	r2, [pc, #116]	@ (8000c9c <MX_TIM4_Init+0x94>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6;
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c98 <MX_TIM4_Init+0x90>)
 8000c2c:	2206      	movs	r2, #6
 8000c2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <MX_TIM4_Init+0x90>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 8000c36:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <MX_TIM4_Init+0x90>)
 8000c38:	22f9      	movs	r2, #249	@ 0xf9
 8000c3a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3c:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <MX_TIM4_Init+0x90>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <MX_TIM4_Init+0x90>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c48:	4813      	ldr	r0, [pc, #76]	@ (8000c98 <MX_TIM4_Init+0x90>)
 8000c4a:	f003 ff97 	bl	8004b7c <HAL_TIM_Base_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8000c54:	f000 f8e4 	bl	8000e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c5e:	f107 0308 	add.w	r3, r7, #8
 8000c62:	4619      	mov	r1, r3
 8000c64:	480c      	ldr	r0, [pc, #48]	@ (8000c98 <MX_TIM4_Init+0x90>)
 8000c66:	f004 f8c8 	bl	8004dfa <HAL_TIM_ConfigClockSource>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8000c70:	f000 f8d6 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c74:	2300      	movs	r3, #0
 8000c76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <MX_TIM4_Init+0x90>)
 8000c82:	f004 faf9 	bl	8005278 <HAL_TIMEx_MasterConfigSynchronization>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000c8c:	f000 f8c8 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
}
 8000c90:	bf00      	nop
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200001f0 	.word	0x200001f0
 8000c9c:	40000800 	.word	0x40000800

08000ca0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <MX_DMA_Init+0x3c>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a0b      	ldr	r2, [pc, #44]	@ (8000cdc <MX_DMA_Init+0x3c>)
 8000cb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <MX_DMA_Init+0x3c>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	200b      	movs	r0, #11
 8000cc8:	f000 fbe5 	bl	8001496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ccc:	200b      	movs	r0, #11
 8000cce:	f000 fbfe 	bl	80014ce <HAL_NVIC_EnableIRQ>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	@ 0x28
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b45      	ldr	r3, [pc, #276]	@ (8000e10 <MX_GPIO_Init+0x130>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a44      	ldr	r2, [pc, #272]	@ (8000e10 <MX_GPIO_Init+0x130>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b42      	ldr	r3, [pc, #264]	@ (8000e10 <MX_GPIO_Init+0x130>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b3e      	ldr	r3, [pc, #248]	@ (8000e10 <MX_GPIO_Init+0x130>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a3d      	ldr	r2, [pc, #244]	@ (8000e10 <MX_GPIO_Init+0x130>)
 8000d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b3b      	ldr	r3, [pc, #236]	@ (8000e10 <MX_GPIO_Init+0x130>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	4b37      	ldr	r3, [pc, #220]	@ (8000e10 <MX_GPIO_Init+0x130>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a36      	ldr	r2, [pc, #216]	@ (8000e10 <MX_GPIO_Init+0x130>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b34      	ldr	r3, [pc, #208]	@ (8000e10 <MX_GPIO_Init+0x130>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	4b30      	ldr	r3, [pc, #192]	@ (8000e10 <MX_GPIO_Init+0x130>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a2f      	ldr	r2, [pc, #188]	@ (8000e10 <MX_GPIO_Init+0x130>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e10 <MX_GPIO_Init+0x130>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	4b29      	ldr	r3, [pc, #164]	@ (8000e10 <MX_GPIO_Init+0x130>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a28      	ldr	r2, [pc, #160]	@ (8000e10 <MX_GPIO_Init+0x130>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b26      	ldr	r3, [pc, #152]	@ (8000e10 <MX_GPIO_Init+0x130>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS5361_RST_Pin | CS5361_SA_Pin | CS5361_HPF_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000d88:	4822      	ldr	r0, [pc, #136]	@ (8000e14 <MX_GPIO_Init+0x134>)
 8000d8a:	f001 f8e3 	bl	8001f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS5361_MDIV_Pin | CS5361_M1_Pin | CS5361_M0_Pin | CS5361_MS_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8000d94:	4820      	ldr	r0, [pc, #128]	@ (8000e18 <MX_GPIO_Init+0x138>)
 8000d96:	f001 f8dd 	bl	8001f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d9e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	481b      	ldr	r0, [pc, #108]	@ (8000e1c <MX_GPIO_Init+0x13c>)
 8000db0:	f000 ff34 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000db4:	2304      	movs	r3, #4
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4813      	ldr	r0, [pc, #76]	@ (8000e14 <MX_GPIO_Init+0x134>)
 8000dc8:	f000 ff28 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS5361_RST_Pin CS5361_SA_Pin CS5361_HPF_Pin */
  GPIO_InitStruct.Pin = CS5361_RST_Pin | CS5361_SA_Pin | CS5361_HPF_Pin;
 8000dcc:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	480b      	ldr	r0, [pc, #44]	@ (8000e14 <MX_GPIO_Init+0x134>)
 8000de6:	f000 ff19 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS5361_MDIV_Pin CS5361_M1_Pin CS5361_M0_Pin CS5361_MS_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = CS5361_MDIV_Pin | CS5361_M1_Pin | CS5361_M0_Pin | CS5361_MS_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin;
 8000dea:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	4805      	ldr	r0, [pc, #20]	@ (8000e18 <MX_GPIO_Init+0x138>)
 8000e04:	f000 ff0a 	bl	8001c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e08:	bf00      	nop
 8000e0a:	3728      	adds	r7, #40	@ 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020400 	.word	0x40020400
 8000e18:	40020c00 	.word	0x40020c00
 8000e1c:	40020000 	.word	0x40020000

08000e20 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <Error_Handler+0x8>

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	4b10      	ldr	r3, [pc, #64]	@ (8000e78 <HAL_MspInit+0x4c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e78 <HAL_MspInit+0x4c>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e42:	4b0d      	ldr	r3, [pc, #52]	@ (8000e78 <HAL_MspInit+0x4c>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <HAL_MspInit+0x4c>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	4a08      	ldr	r2, [pc, #32]	@ (8000e78 <HAL_MspInit+0x4c>)
 8000e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5e:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_MspInit+0x4c>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e6a:	2007      	movs	r0, #7
 8000e6c:	f000 fb08 	bl	8001480 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40023800 	.word	0x40023800

08000e7c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb8 <HAL_CRC_MspInit+0x3c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d10d      	bne.n	8000eaa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <HAL_CRC_MspInit+0x40>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a09      	ldr	r2, [pc, #36]	@ (8000ebc <HAL_CRC_MspInit+0x40>)
 8000e98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <HAL_CRC_MspInit+0x40>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40023000 	.word	0x40023000
 8000ebc:	40023800 	.word	0x40023800

08000ec0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08e      	sub	sp, #56	@ 0x38
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a4e      	ldr	r2, [pc, #312]	@ (8001024 <HAL_I2S_MspInit+0x164>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	f040 8094 	bne.w	800101a <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ef6:	23c0      	movs	r3, #192	@ 0xc0
 8000ef8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 fcf8 	bl	80048f8 <HAL_RCCEx_PeriphCLKConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000f0e:	f7ff ff87 	bl	8000e20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b44      	ldr	r3, [pc, #272]	@ (8001028 <HAL_I2S_MspInit+0x168>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	4a43      	ldr	r2, [pc, #268]	@ (8001028 <HAL_I2S_MspInit+0x168>)
 8000f1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f22:	4b41      	ldr	r3, [pc, #260]	@ (8001028 <HAL_I2S_MspInit+0x168>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b3d      	ldr	r3, [pc, #244]	@ (8001028 <HAL_I2S_MspInit+0x168>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a3c      	ldr	r2, [pc, #240]	@ (8001028 <HAL_I2S_MspInit+0x168>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001028 <HAL_I2S_MspInit+0x168>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	4b36      	ldr	r3, [pc, #216]	@ (8001028 <HAL_I2S_MspInit+0x168>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a35      	ldr	r2, [pc, #212]	@ (8001028 <HAL_I2S_MspInit+0x168>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b33      	ldr	r3, [pc, #204]	@ (8001028 <HAL_I2S_MspInit+0x168>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f66:	2310      	movs	r3, #16
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f76:	2306      	movs	r3, #6
 8000f78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7e:	4619      	mov	r1, r3
 8000f80:	482a      	ldr	r0, [pc, #168]	@ (800102c <HAL_I2S_MspInit+0x16c>)
 8000f82:	f000 fe4b 	bl	8001c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000f86:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f98:	2306      	movs	r3, #6
 8000f9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4823      	ldr	r0, [pc, #140]	@ (8001030 <HAL_I2S_MspInit+0x170>)
 8000fa4:	f000 fe3a 	bl	8001c1c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8000fa8:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <HAL_I2S_MspInit+0x174>)
 8000faa:	4a23      	ldr	r2, [pc, #140]	@ (8001038 <HAL_I2S_MspInit+0x178>)
 8000fac:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8000fae:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <HAL_I2S_MspInit+0x174>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <HAL_I2S_MspInit+0x174>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fba:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <HAL_I2S_MspInit+0x174>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <HAL_I2S_MspInit+0x174>)
 8000fc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fc6:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <HAL_I2S_MspInit+0x174>)
 8000fca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fce:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <HAL_I2S_MspInit+0x174>)
 8000fd2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fd6:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <HAL_I2S_MspInit+0x174>)
 8000fda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fde:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <HAL_I2S_MspInit+0x174>)
 8000fe2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000fe6:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <HAL_I2S_MspInit+0x174>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8000fee:	4811      	ldr	r0, [pc, #68]	@ (8001034 <HAL_I2S_MspInit+0x174>)
 8000ff0:	f000 faa4 	bl	800153c <HAL_DMA_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8000ffa:	f7ff ff11 	bl	8000e20 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a0c      	ldr	r2, [pc, #48]	@ (8001034 <HAL_I2S_MspInit+0x174>)
 8001002:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001004:	4a0b      	ldr	r2, [pc, #44]	@ (8001034 <HAL_I2S_MspInit+0x174>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	2033      	movs	r0, #51	@ 0x33
 8001010:	f000 fa41 	bl	8001496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001014:	2033      	movs	r0, #51	@ 0x33
 8001016:	f000 fa5a 	bl	80014ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800101a:	bf00      	nop
 800101c:	3738      	adds	r7, #56	@ 0x38
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40003c00 	.word	0x40003c00
 8001028:	40023800 	.word	0x40023800
 800102c:	40020000 	.word	0x40020000
 8001030:	40020800 	.word	0x40020800
 8001034:	20000190 	.word	0x20000190
 8001038:	40026010 	.word	0x40026010

0800103c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0e      	ldr	r2, [pc, #56]	@ (8001084 <HAL_TIM_Base_MspInit+0x48>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d115      	bne.n	800107a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <HAL_TIM_Base_MspInit+0x4c>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	4a0c      	ldr	r2, [pc, #48]	@ (8001088 <HAL_TIM_Base_MspInit+0x4c>)
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	6413      	str	r3, [r2, #64]	@ 0x40
 800105e:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <HAL_TIM_Base_MspInit+0x4c>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	201e      	movs	r0, #30
 8001070:	f000 fa11 	bl	8001496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001074:	201e      	movs	r0, #30
 8001076:	f000 fa2a 	bl	80014ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40000800 	.word	0x40000800
 8001088:	40023800 	.word	0x40023800

0800108c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <NMI_Handler+0x4>

08001094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <MemManage_Handler+0x4>

080010a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e2:	f000 f8b9 	bl	8001258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80010f0:	4802      	ldr	r0, [pc, #8]	@ (80010fc <DMA1_Stream0_IRQHandler+0x10>)
 80010f2:	f000 fb29 	bl	8001748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000190 	.word	0x20000190

08001100 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001104:	4802      	ldr	r0, [pc, #8]	@ (8001110 <TIM4_IRQHandler+0x10>)
 8001106:	f003 fd88 	bl	8004c1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200001f0 	.word	0x200001f0

08001114 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001118:	4802      	ldr	r0, [pc, #8]	@ (8001124 <SPI3_IRQHandler+0x10>)
 800111a:	f001 f947 	bl	80023ac <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000148 	.word	0x20000148

08001128 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800112c:	4802      	ldr	r0, [pc, #8]	@ (8001138 <OTG_FS_IRQHandler+0x10>)
 800112e:	f001 fe37 	bl	8002da0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200008ac 	.word	0x200008ac

0800113c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <SystemInit+0x20>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001146:	4a05      	ldr	r2, [pc, #20]	@ (800115c <SystemInit+0x20>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001198 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001164:	f7ff ffea 	bl	800113c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001168:	480c      	ldr	r0, [pc, #48]	@ (800119c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116a:	490d      	ldr	r1, [pc, #52]	@ (80011a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800116c:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001180:	4c0a      	ldr	r4, [pc, #40]	@ (80011ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118e:	f007 ff99 	bl	80090c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001192:	f7ff fb71 	bl	8000878 <main>
  bx  lr    
 8001196:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001198:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 80011a4:	08009194 	.word	0x08009194
  ldr r2, =_sbss
 80011a8:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 80011ac:	20004aa4 	.word	0x20004aa4

080011b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC_IRQHandler>
	...

080011b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b8:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <HAL_Init+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0d      	ldr	r2, [pc, #52]	@ (80011f4 <HAL_Init+0x40>)
 80011be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <HAL_Init+0x40>)
 80011ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a07      	ldr	r2, [pc, #28]	@ (80011f4 <HAL_Init+0x40>)
 80011d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011dc:	2003      	movs	r0, #3
 80011de:	f000 f94f 	bl	8001480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f000 f808 	bl	80011f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e8:	f7ff fe20 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023c00 	.word	0x40023c00

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_InitTick+0x54>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <HAL_InitTick+0x58>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f967 	bl	80014ea <HAL_SYSTICK_Config>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e00e      	b.n	8001244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d80a      	bhi.n	8001242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122c:	2200      	movs	r2, #0
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f000 f92f 	bl	8001496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001238:	4a06      	ldr	r2, [pc, #24]	@ (8001254 <HAL_InitTick+0x5c>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	e000      	b.n	8001244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000004 	.word	0x20000004
 8001250:	2000000c 	.word	0x2000000c
 8001254:	20000008 	.word	0x20000008

08001258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_IncTick+0x20>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_IncTick+0x24>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a04      	ldr	r2, [pc, #16]	@ (800127c <HAL_IncTick+0x24>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	2000000c 	.word	0x2000000c
 800127c:	200003c8 	.word	0x200003c8

08001280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b03      	ldr	r3, [pc, #12]	@ (8001294 <HAL_GetTick+0x14>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	200003c8 	.word	0x200003c8

08001298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff ffee 	bl	8001280 <HAL_GetTick>
 80012a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b0:	d005      	beq.n	80012be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b2:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <HAL_Delay+0x44>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012be:	bf00      	nop
 80012c0:	f7ff ffde 	bl	8001280 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8f7      	bhi.n	80012c0 <HAL_Delay+0x28>
  {
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	2000000c 	.word	0x2000000c

080012e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001308:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800130c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <__NVIC_GetPriorityGrouping+0x18>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0307 	and.w	r3, r3, #7
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	db0b      	blt.n	800136e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f003 021f 	and.w	r2, r3, #31
 800135c:	4907      	ldr	r1, [pc, #28]	@ (800137c <__NVIC_EnableIRQ+0x38>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	095b      	lsrs	r3, r3, #5
 8001364:	2001      	movs	r0, #1
 8001366:	fa00 f202 	lsl.w	r2, r0, r2
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000e100 	.word	0xe000e100

08001380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	2b00      	cmp	r3, #0
 8001392:	db0a      	blt.n	80013aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	b2da      	uxtb	r2, r3
 8001398:	490c      	ldr	r1, [pc, #48]	@ (80013cc <__NVIC_SetPriority+0x4c>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	0112      	lsls	r2, r2, #4
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	440b      	add	r3, r1
 80013a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a8:	e00a      	b.n	80013c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4908      	ldr	r1, [pc, #32]	@ (80013d0 <__NVIC_SetPriority+0x50>)
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	3b04      	subs	r3, #4
 80013b8:	0112      	lsls	r2, r2, #4
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	440b      	add	r3, r1
 80013be:	761a      	strb	r2, [r3, #24]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000e100 	.word	0xe000e100
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	@ 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f1c3 0307 	rsb	r3, r3, #7
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	bf28      	it	cs
 80013f2:	2304      	movcs	r3, #4
 80013f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3304      	adds	r3, #4
 80013fa:	2b06      	cmp	r3, #6
 80013fc:	d902      	bls.n	8001404 <NVIC_EncodePriority+0x30>
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3b03      	subs	r3, #3
 8001402:	e000      	b.n	8001406 <NVIC_EncodePriority+0x32>
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	f04f 32ff 	mov.w	r2, #4294967295
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43da      	mvns	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	401a      	ands	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800141c:	f04f 31ff 	mov.w	r1, #4294967295
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	43d9      	mvns	r1, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	4313      	orrs	r3, r2
         );
}
 800142e:	4618      	mov	r0, r3
 8001430:	3724      	adds	r7, #36	@ 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800144c:	d301      	bcc.n	8001452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144e:	2301      	movs	r3, #1
 8001450:	e00f      	b.n	8001472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001452:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <SysTick_Config+0x40>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145a:	210f      	movs	r1, #15
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f7ff ff8e 	bl	8001380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001464:	4b05      	ldr	r3, [pc, #20]	@ (800147c <SysTick_Config+0x40>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146a:	4b04      	ldr	r3, [pc, #16]	@ (800147c <SysTick_Config+0x40>)
 800146c:	2207      	movs	r2, #7
 800146e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	e000e010 	.word	0xe000e010

08001480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff29 	bl	80012e0 <__NVIC_SetPriorityGrouping>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a8:	f7ff ff3e 	bl	8001328 <__NVIC_GetPriorityGrouping>
 80014ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	f7ff ff8e 	bl	80013d4 <NVIC_EncodePriority>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff5d 	bl	8001380 <__NVIC_SetPriority>
}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff31 	bl	8001344 <__NVIC_EnableIRQ>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffa2 	bl	800143c <SysTick_Config>
 80014f8:	4603      	mov	r3, r0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e00e      	b.n	8001532 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	795b      	ldrb	r3, [r3, #5]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d105      	bne.n	800152a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fca9 	bl	8000e7c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001548:	f7ff fe9a 	bl	8001280 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e099      	b.n	800168c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2202      	movs	r2, #2
 800155c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0201 	bic.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001578:	e00f      	b.n	800159a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800157a:	f7ff fe81 	bl	8001280 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b05      	cmp	r3, #5
 8001586:	d908      	bls.n	800159a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2220      	movs	r2, #32
 800158c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2203      	movs	r2, #3
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e078      	b.n	800168c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1e8      	bne.n	800157a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	4b38      	ldr	r3, [pc, #224]	@ (8001694 <HAL_DMA_Init+0x158>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d107      	bne.n	8001604 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fc:	4313      	orrs	r3, r2
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4313      	orrs	r3, r2
 8001602:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f023 0307 	bic.w	r3, r3, #7
 800161a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	4313      	orrs	r3, r2
 8001624:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162a:	2b04      	cmp	r3, #4
 800162c:	d117      	bne.n	800165e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	4313      	orrs	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00e      	beq.n	800165e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 fa6f 	bl	8001b24 <DMA_CheckFifoParam>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2240      	movs	r2, #64	@ 0x40
 8001650:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800165a:	2301      	movs	r3, #1
 800165c:	e016      	b.n	800168c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 fa26 	bl	8001ab8 <DMA_CalcBaseAndBitshift>
 800166c:	4603      	mov	r3, r0
 800166e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001674:	223f      	movs	r2, #63	@ 0x3f
 8001676:	409a      	lsls	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	f010803f 	.word	0xf010803f

08001698 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d101      	bne.n	80016be <HAL_DMA_Start_IT+0x26>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e040      	b.n	8001740 <HAL_DMA_Start_IT+0xa8>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d12f      	bne.n	8001732 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2202      	movs	r2, #2
 80016d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 f9b8 	bl	8001a5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f0:	223f      	movs	r2, #63	@ 0x3f
 80016f2:	409a      	lsls	r2, r3
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0216 	orr.w	r2, r2, #22
 8001706:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170c:	2b00      	cmp	r3, #0
 800170e:	d007      	beq.n	8001720 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0208 	orr.w	r2, r2, #8
 800171e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	e005      	b.n	800173e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800173a:	2302      	movs	r3, #2
 800173c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800173e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001754:	4b8e      	ldr	r3, [pc, #568]	@ (8001990 <HAL_DMA_IRQHandler+0x248>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a8e      	ldr	r2, [pc, #568]	@ (8001994 <HAL_DMA_IRQHandler+0x24c>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	0a9b      	lsrs	r3, r3, #10
 8001760:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001766:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001772:	2208      	movs	r2, #8
 8001774:	409a      	lsls	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4013      	ands	r3, r2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d01a      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d013      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0204 	bic.w	r2, r2, #4
 800179a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a0:	2208      	movs	r2, #8
 80017a2:	409a      	lsls	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ac:	f043 0201 	orr.w	r2, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b8:	2201      	movs	r2, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d012      	beq.n	80017ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00b      	beq.n	80017ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d6:	2201      	movs	r2, #1
 80017d8:	409a      	lsls	r2, r3
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e2:	f043 0202 	orr.w	r2, r3, #2
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ee:	2204      	movs	r2, #4
 80017f0:	409a      	lsls	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d012      	beq.n	8001820 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00b      	beq.n	8001820 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800180c:	2204      	movs	r2, #4
 800180e:	409a      	lsls	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001818:	f043 0204 	orr.w	r2, r3, #4
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001824:	2210      	movs	r2, #16
 8001826:	409a      	lsls	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d043      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d03c      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001842:	2210      	movs	r2, #16
 8001844:	409a      	lsls	r2, r3
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d018      	beq.n	800188a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d108      	bne.n	8001878 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	2b00      	cmp	r3, #0
 800186c:	d024      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	4798      	blx	r3
 8001876:	e01f      	b.n	80018b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800187c:	2b00      	cmp	r3, #0
 800187e:	d01b      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	4798      	blx	r3
 8001888:	e016      	b.n	80018b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001894:	2b00      	cmp	r3, #0
 8001896:	d107      	bne.n	80018a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0208 	bic.w	r2, r2, #8
 80018a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018bc:	2220      	movs	r2, #32
 80018be:	409a      	lsls	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 808f 	beq.w	80019e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0310 	and.w	r3, r3, #16
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 8087 	beq.w	80019e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018de:	2220      	movs	r2, #32
 80018e0:	409a      	lsls	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b05      	cmp	r3, #5
 80018f0:	d136      	bne.n	8001960 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0216 	bic.w	r2, r2, #22
 8001900:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001910:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	d103      	bne.n	8001922 <HAL_DMA_IRQHandler+0x1da>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0208 	bic.w	r2, r2, #8
 8001930:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001936:	223f      	movs	r2, #63	@ 0x3f
 8001938:	409a      	lsls	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001952:	2b00      	cmp	r3, #0
 8001954:	d07e      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	4798      	blx	r3
        }
        return;
 800195e:	e079      	b.n	8001a54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d01d      	beq.n	80019aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10d      	bne.n	8001998 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001980:	2b00      	cmp	r3, #0
 8001982:	d031      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	4798      	blx	r3
 800198c:	e02c      	b.n	80019e8 <HAL_DMA_IRQHandler+0x2a0>
 800198e:	bf00      	nop
 8001990:	20000004 	.word	0x20000004
 8001994:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800199c:	2b00      	cmp	r3, #0
 800199e:	d023      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	4798      	blx	r3
 80019a8:	e01e      	b.n	80019e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10f      	bne.n	80019d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0210 	bic.w	r2, r2, #16
 80019c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d032      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d022      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2205      	movs	r2, #5
 8001a00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	3301      	adds	r3, #1
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d307      	bcc.n	8001a30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f2      	bne.n	8001a14 <HAL_DMA_IRQHandler+0x2cc>
 8001a2e:	e000      	b.n	8001a32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4798      	blx	r3
 8001a52:	e000      	b.n	8001a56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a54:	bf00      	nop
    }
  }
}
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001a78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b40      	cmp	r3, #64	@ 0x40
 8001a88:	d108      	bne.n	8001a9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a9a:	e007      	b.n	8001aac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	60da      	str	r2, [r3, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	3b10      	subs	r3, #16
 8001ac8:	4a14      	ldr	r2, [pc, #80]	@ (8001b1c <DMA_CalcBaseAndBitshift+0x64>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	091b      	lsrs	r3, r3, #4
 8001ad0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ad2:	4a13      	ldr	r2, [pc, #76]	@ (8001b20 <DMA_CalcBaseAndBitshift+0x68>)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d909      	bls.n	8001afa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001aee:	f023 0303 	bic.w	r3, r3, #3
 8001af2:	1d1a      	adds	r2, r3, #4
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001af8:	e007      	b.n	8001b0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b02:	f023 0303 	bic.w	r3, r3, #3
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	aaaaaaab 	.word	0xaaaaaaab
 8001b20:	0800917c 	.word	0x0800917c

08001b24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d11f      	bne.n	8001b7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d856      	bhi.n	8001bf2 <DMA_CheckFifoParam+0xce>
 8001b44:	a201      	add	r2, pc, #4	@ (adr r2, 8001b4c <DMA_CheckFifoParam+0x28>)
 8001b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4a:	bf00      	nop
 8001b4c:	08001b5d 	.word	0x08001b5d
 8001b50:	08001b6f 	.word	0x08001b6f
 8001b54:	08001b5d 	.word	0x08001b5d
 8001b58:	08001bf3 	.word	0x08001bf3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d046      	beq.n	8001bf6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b6c:	e043      	b.n	8001bf6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b76:	d140      	bne.n	8001bfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b7c:	e03d      	b.n	8001bfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b86:	d121      	bne.n	8001bcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d837      	bhi.n	8001bfe <DMA_CheckFifoParam+0xda>
 8001b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b94 <DMA_CheckFifoParam+0x70>)
 8001b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b94:	08001ba5 	.word	0x08001ba5
 8001b98:	08001bab 	.word	0x08001bab
 8001b9c:	08001ba5 	.word	0x08001ba5
 8001ba0:	08001bbd 	.word	0x08001bbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ba8:	e030      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d025      	beq.n	8001c02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bba:	e022      	b.n	8001c02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001bc4:	d11f      	bne.n	8001c06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bca:	e01c      	b.n	8001c06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d903      	bls.n	8001bda <DMA_CheckFifoParam+0xb6>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d003      	beq.n	8001be0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bd8:	e018      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8001bde:	e015      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00e      	beq.n	8001c0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	73fb      	strb	r3, [r7, #15]
      break;
 8001bf0:	e00b      	b.n	8001c0a <DMA_CheckFifoParam+0xe6>
      break;
 8001bf2:	bf00      	nop
 8001bf4:	e00a      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      break;
 8001bf6:	bf00      	nop
 8001bf8:	e008      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      break;
 8001bfa:	bf00      	nop
 8001bfc:	e006      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      break;
 8001bfe:	bf00      	nop
 8001c00:	e004      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      break;
 8001c02:	bf00      	nop
 8001c04:	e002      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      break;   
 8001c06:	bf00      	nop
 8001c08:	e000      	b.n	8001c0c <DMA_CheckFifoParam+0xe8>
      break;
 8001c0a:	bf00      	nop
    }
  } 
  
  return status; 
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop

08001c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e16b      	b.n	8001f10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f040 815a 	bne.w	8001f0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d005      	beq.n	8001c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d130      	bne.n	8001cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 0201 	and.w	r2, r3, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d017      	beq.n	8001d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d123      	bne.n	8001d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	08da      	lsrs	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3208      	adds	r2, #8
 8001d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	220f      	movs	r2, #15
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	69b9      	ldr	r1, [r7, #24]
 8001d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80b4 	beq.w	8001f0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b60      	ldr	r3, [pc, #384]	@ (8001f28 <HAL_GPIO_Init+0x30c>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	4a5f      	ldr	r2, [pc, #380]	@ (8001f28 <HAL_GPIO_Init+0x30c>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f28 <HAL_GPIO_Init+0x30c>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dbe:	4a5b      	ldr	r2, [pc, #364]	@ (8001f2c <HAL_GPIO_Init+0x310>)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a52      	ldr	r2, [pc, #328]	@ (8001f30 <HAL_GPIO_Init+0x314>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d02b      	beq.n	8001e42 <HAL_GPIO_Init+0x226>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a51      	ldr	r2, [pc, #324]	@ (8001f34 <HAL_GPIO_Init+0x318>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d025      	beq.n	8001e3e <HAL_GPIO_Init+0x222>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a50      	ldr	r2, [pc, #320]	@ (8001f38 <HAL_GPIO_Init+0x31c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01f      	beq.n	8001e3a <HAL_GPIO_Init+0x21e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4f      	ldr	r2, [pc, #316]	@ (8001f3c <HAL_GPIO_Init+0x320>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d019      	beq.n	8001e36 <HAL_GPIO_Init+0x21a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4e      	ldr	r2, [pc, #312]	@ (8001f40 <HAL_GPIO_Init+0x324>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_Init+0x216>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4d      	ldr	r2, [pc, #308]	@ (8001f44 <HAL_GPIO_Init+0x328>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00d      	beq.n	8001e2e <HAL_GPIO_Init+0x212>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4c      	ldr	r2, [pc, #304]	@ (8001f48 <HAL_GPIO_Init+0x32c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d007      	beq.n	8001e2a <HAL_GPIO_Init+0x20e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f4c <HAL_GPIO_Init+0x330>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_GPIO_Init+0x20a>
 8001e22:	2307      	movs	r3, #7
 8001e24:	e00e      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e26:	2308      	movs	r3, #8
 8001e28:	e00c      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e2a:	2306      	movs	r3, #6
 8001e2c:	e00a      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e2e:	2305      	movs	r3, #5
 8001e30:	e008      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e32:	2304      	movs	r3, #4
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e36:	2303      	movs	r3, #3
 8001e38:	e004      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e002      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <HAL_GPIO_Init+0x228>
 8001e42:	2300      	movs	r3, #0
 8001e44:	69fa      	ldr	r2, [r7, #28]
 8001e46:	f002 0203 	and.w	r2, r2, #3
 8001e4a:	0092      	lsls	r2, r2, #2
 8001e4c:	4093      	lsls	r3, r2
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e54:	4935      	ldr	r1, [pc, #212]	@ (8001f2c <HAL_GPIO_Init+0x310>)
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e62:	4b3b      	ldr	r3, [pc, #236]	@ (8001f50 <HAL_GPIO_Init+0x334>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e86:	4a32      	ldr	r2, [pc, #200]	@ (8001f50 <HAL_GPIO_Init+0x334>)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e8c:	4b30      	ldr	r3, [pc, #192]	@ (8001f50 <HAL_GPIO_Init+0x334>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eb0:	4a27      	ldr	r2, [pc, #156]	@ (8001f50 <HAL_GPIO_Init+0x334>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eb6:	4b26      	ldr	r3, [pc, #152]	@ (8001f50 <HAL_GPIO_Init+0x334>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eda:	4a1d      	ldr	r2, [pc, #116]	@ (8001f50 <HAL_GPIO_Init+0x334>)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f50 <HAL_GPIO_Init+0x334>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f04:	4a12      	ldr	r2, [pc, #72]	@ (8001f50 <HAL_GPIO_Init+0x334>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2b0f      	cmp	r3, #15
 8001f14:	f67f ae90 	bls.w	8001c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	3724      	adds	r7, #36	@ 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40013800 	.word	0x40013800
 8001f30:	40020000 	.word	0x40020000
 8001f34:	40020400 	.word	0x40020400
 8001f38:	40020800 	.word	0x40020800
 8001f3c:	40020c00 	.word	0x40020c00
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40021400 	.word	0x40021400
 8001f48:	40021800 	.word	0x40021800
 8001f4c:	40021c00 	.word	0x40021c00
 8001f50:	40013c00 	.word	0x40013c00

08001f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
 8001f60:	4613      	mov	r3, r2
 8001f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f64:	787b      	ldrb	r3, [r7, #1]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f70:	e003      	b.n	8001f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	041a      	lsls	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	619a      	str	r2, [r3, #24]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f98:	887a      	ldrh	r2, [r7, #2]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	041a      	lsls	r2, r3, #16
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	43d9      	mvns	r1, r3
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	400b      	ands	r3, r1
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	619a      	str	r2, [r3, #24]
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e128      	b.n	8002220 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d109      	bne.n	8001fee <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a90      	ldr	r2, [pc, #576]	@ (8002228 <HAL_I2S_Init+0x26c>)
 8001fe6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7fe ff69 	bl	8000ec0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002004:	f023 030f 	bic.w	r3, r3, #15
 8002008:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2202      	movs	r2, #2
 8002010:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d060      	beq.n	80020dc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d102      	bne.n	8002028 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002022:	2310      	movs	r3, #16
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	e001      	b.n	800202c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002028:	2320      	movs	r3, #32
 800202a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b20      	cmp	r3, #32
 8002032:	d802      	bhi.n	800203a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800203a:	2001      	movs	r0, #1
 800203c:	f002 fd3e 	bl	8004abc <HAL_RCCEx_GetPeriphCLKFreq>
 8002040:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800204a:	d125      	bne.n	8002098 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d010      	beq.n	8002076 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	fbb2 f2f3 	udiv	r2, r2, r3
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	461a      	mov	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002070:	3305      	adds	r3, #5
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	e01f      	b.n	80020b6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	461a      	mov	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	3305      	adds	r3, #5
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	e00e      	b.n	80020b6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	fbb2 f2f3 	udiv	r2, r2, r3
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	461a      	mov	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	3305      	adds	r3, #5
 80020b4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4a5c      	ldr	r2, [pc, #368]	@ (800222c <HAL_I2S_Init+0x270>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	085b      	lsrs	r3, r3, #1
 80020d2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	e003      	b.n	80020e4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80020dc:	2302      	movs	r3, #2
 80020de:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d902      	bls.n	80020f0 <HAL_I2S_Init+0x134>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	2bff      	cmp	r3, #255	@ 0xff
 80020ee:	d907      	bls.n	8002100 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f4:	f043 0210 	orr.w	r2, r3, #16
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e08f      	b.n	8002220 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	ea42 0103 	orr.w	r1, r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	430a      	orrs	r2, r1
 8002112:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800211e:	f023 030f 	bic.w	r3, r3, #15
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6851      	ldr	r1, [r2, #4]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6892      	ldr	r2, [r2, #8]
 800212a:	4311      	orrs	r1, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68d2      	ldr	r2, [r2, #12]
 8002130:	4311      	orrs	r1, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6992      	ldr	r2, [r2, #24]
 8002136:	430a      	orrs	r2, r1
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002142:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d161      	bne.n	8002210 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a38      	ldr	r2, [pc, #224]	@ (8002230 <HAL_I2S_Init+0x274>)
 8002150:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a37      	ldr	r2, [pc, #220]	@ (8002234 <HAL_I2S_Init+0x278>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d101      	bne.n	8002160 <HAL_I2S_Init+0x1a4>
 800215c:	4b36      	ldr	r3, [pc, #216]	@ (8002238 <HAL_I2S_Init+0x27c>)
 800215e:	e001      	b.n	8002164 <HAL_I2S_Init+0x1a8>
 8002160:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	4932      	ldr	r1, [pc, #200]	@ (8002234 <HAL_I2S_Init+0x278>)
 800216c:	428a      	cmp	r2, r1
 800216e:	d101      	bne.n	8002174 <HAL_I2S_Init+0x1b8>
 8002170:	4a31      	ldr	r2, [pc, #196]	@ (8002238 <HAL_I2S_Init+0x27c>)
 8002172:	e001      	b.n	8002178 <HAL_I2S_Init+0x1bc>
 8002174:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002178:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800217c:	f023 030f 	bic.w	r3, r3, #15
 8002180:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a2b      	ldr	r2, [pc, #172]	@ (8002234 <HAL_I2S_Init+0x278>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d101      	bne.n	8002190 <HAL_I2S_Init+0x1d4>
 800218c:	4b2a      	ldr	r3, [pc, #168]	@ (8002238 <HAL_I2S_Init+0x27c>)
 800218e:	e001      	b.n	8002194 <HAL_I2S_Init+0x1d8>
 8002190:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002194:	2202      	movs	r2, #2
 8002196:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a25      	ldr	r2, [pc, #148]	@ (8002234 <HAL_I2S_Init+0x278>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_I2S_Init+0x1ea>
 80021a2:	4b25      	ldr	r3, [pc, #148]	@ (8002238 <HAL_I2S_Init+0x27c>)
 80021a4:	e001      	b.n	80021aa <HAL_I2S_Init+0x1ee>
 80021a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021b6:	d003      	beq.n	80021c0 <HAL_I2S_Init+0x204>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d103      	bne.n	80021c8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80021c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	e001      	b.n	80021cc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80021e0:	4313      	orrs	r3, r2
 80021e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80021ea:	4313      	orrs	r3, r2
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	897b      	ldrh	r3, [r7, #10]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021f8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002234 <HAL_I2S_Init+0x278>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d101      	bne.n	8002208 <HAL_I2S_Init+0x24c>
 8002204:	4b0c      	ldr	r3, [pc, #48]	@ (8002238 <HAL_I2S_Init+0x27c>)
 8002206:	e001      	b.n	800220c <HAL_I2S_Init+0x250>
 8002208:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800220c:	897a      	ldrh	r2, [r7, #10]
 800220e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	08002551 	.word	0x08002551
 800222c:	cccccccd 	.word	0xcccccccd
 8002230:	08002665 	.word	0x08002665
 8002234:	40003800 	.word	0x40003800
 8002238:	40003400 	.word	0x40003400

0800223c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	4613      	mov	r3, r2
 8002248:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <HAL_I2S_Receive_DMA+0x1a>
 8002250:	88fb      	ldrh	r3, [r7, #6]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e09d      	b.n	8002396 <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d001      	beq.n	800226a <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 8002266:	2302      	movs	r3, #2
 8002268:	e095      	b.n	8002396 <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_I2S_Receive_DMA+0x3e>
 8002276:	2302      	movs	r3, #2
 8002278:	e08d      	b.n	8002396 <HAL_I2S_Receive_DMA+0x15a>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2204      	movs	r2, #4
 8002286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d002      	beq.n	80022ae <HAL_I2S_Receive_DMA+0x72>
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b05      	cmp	r3, #5
 80022ac:	d10a      	bne.n	80022c4 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	865a      	strh	r2, [r3, #50]	@ 0x32
 80022c2:	e005      	b.n	80022d0 <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	88fa      	ldrh	r2, [r7, #6]
 80022c8:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	88fa      	ldrh	r2, [r7, #6]
 80022ce:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d4:	4a32      	ldr	r2, [pc, #200]	@ (80023a0 <HAL_I2S_Receive_DMA+0x164>)
 80022d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022dc:	4a31      	ldr	r2, [pc, #196]	@ (80023a4 <HAL_I2S_Receive_DMA+0x168>)
 80022de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e4:	4a30      	ldr	r2, [pc, #192]	@ (80023a8 <HAL_I2S_Receive_DMA+0x16c>)
 80022e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80022f6:	d10a      	bne.n	800230e <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	330c      	adds	r3, #12
 8002318:	4619      	mov	r1, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002324:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002326:	f7ff f9b7 	bl	8001698 <HAL_DMA_Start_IT>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00f      	beq.n	8002350 <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002334:	f043 0208 	orr.w	r2, r3, #8
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e022      	b.n	8002396 <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d107      	bne.n	8002376 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 0201 	orr.w	r2, r2, #1
 8002374:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002380:	2b00      	cmp	r3, #0
 8002382:	d107      	bne.n	8002394 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	69da      	ldr	r2, [r3, #28]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002392:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	0800242f 	.word	0x0800242f
 80023a4:	080023ed 	.word	0x080023ed
 80023a8:	0800244b 	.word	0x0800244b

080023ac <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	4798      	blx	r3
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10e      	bne.n	8002420 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0201 	bic.w	r2, r2, #1
 8002410:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f7fe f9af 	bl	8000784 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b084      	sub	sp, #16
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800243a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f7fe f94d 	bl	80006dc <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002456:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0203 	bic.w	r2, r2, #3
 8002466:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002480:	f043 0208 	orr.w	r2, r3, #8
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f7ff ffa5 	bl	80023d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a2:	881a      	ldrh	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	1c9a      	adds	r2, r3, #2
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10e      	bne.n	80024ea <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80024da:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff ff6d 	bl	80023c4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002504:	b292      	uxth	r2, r2
 8002506:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250c:	1c9a      	adds	r2, r3, #2
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002516:	b29b      	uxth	r3, r3
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10e      	bne.n	8002548 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002538:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe f91e 	bl	8000784 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b04      	cmp	r3, #4
 800256a:	d13a      	bne.n	80025e2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b01      	cmp	r3, #1
 8002574:	d109      	bne.n	800258a <I2S_IRQHandler+0x3a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002580:	2b40      	cmp	r3, #64	@ 0x40
 8002582:	d102      	bne.n	800258a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ffb4 	bl	80024f2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002590:	2b40      	cmp	r3, #64	@ 0x40
 8002592:	d126      	bne.n	80025e2 <I2S_IRQHandler+0x92>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	2b20      	cmp	r3, #32
 80025a0:	d11f      	bne.n	80025e2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80025b0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d4:	f043 0202 	orr.w	r2, r3, #2
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff fefb 	bl	80023d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d136      	bne.n	800265c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d109      	bne.n	800260c <I2S_IRQHandler+0xbc>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002602:	2b80      	cmp	r3, #128	@ 0x80
 8002604:	d102      	bne.n	800260c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ff45 	bl	8002496 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b08      	cmp	r3, #8
 8002614:	d122      	bne.n	800265c <I2S_IRQHandler+0x10c>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	2b20      	cmp	r3, #32
 8002622:	d11b      	bne.n	800265c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002632:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264e:	f043 0204 	orr.w	r2, r3, #4
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff febe 	bl	80023d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800265c:	bf00      	nop
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a92      	ldr	r2, [pc, #584]	@ (80028c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d101      	bne.n	8002682 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800267e:	4b92      	ldr	r3, [pc, #584]	@ (80028c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002680:	e001      	b.n	8002686 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002682:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a8b      	ldr	r2, [pc, #556]	@ (80028c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d101      	bne.n	80026a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800269c:	4b8a      	ldr	r3, [pc, #552]	@ (80028c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800269e:	e001      	b.n	80026a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80026a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026b0:	d004      	beq.n	80026bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f040 8099 	bne.w	80027ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d107      	bne.n	80026d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f925 	bl	8002920 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d107      	bne.n	80026f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f9c8 	bl	8002a80 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f6:	2b40      	cmp	r3, #64	@ 0x40
 80026f8:	d13a      	bne.n	8002770 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b00      	cmp	r3, #0
 8002702:	d035      	beq.n	8002770 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a6e      	ldr	r2, [pc, #440]	@ (80028c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d101      	bne.n	8002712 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800270e:	4b6e      	ldr	r3, [pc, #440]	@ (80028c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002710:	e001      	b.n	8002716 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002712:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4969      	ldr	r1, [pc, #420]	@ (80028c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800271e:	428b      	cmp	r3, r1
 8002720:	d101      	bne.n	8002726 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002722:	4b69      	ldr	r3, [pc, #420]	@ (80028c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002724:	e001      	b.n	800272a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002726:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800272a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800272e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800273e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002762:	f043 0202 	orr.w	r2, r3, #2
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff fe34 	bl	80023d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b08      	cmp	r3, #8
 8002778:	f040 80c3 	bne.w	8002902 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f003 0320 	and.w	r3, r3, #32
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 80bd 	beq.w	8002902 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002796:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a49      	ldr	r2, [pc, #292]	@ (80028c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80027a2:	4b49      	ldr	r3, [pc, #292]	@ (80028c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027a4:	e001      	b.n	80027aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80027a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4944      	ldr	r1, [pc, #272]	@ (80028c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80027b2:	428b      	cmp	r3, r1
 80027b4:	d101      	bne.n	80027ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80027b6:	4b44      	ldr	r3, [pc, #272]	@ (80028c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027b8:	e001      	b.n	80027be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80027ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027be:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80027c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80027c4:	2300      	movs	r3, #0
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	f043 0204 	orr.w	r2, r3, #4
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff fdf6 	bl	80023d8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027ec:	e089      	b.n	8002902 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d107      	bne.n	8002808 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f8be 	bl	8002984 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b01      	cmp	r3, #1
 8002810:	d107      	bne.n	8002822 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f8fd 	bl	8002a1c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002828:	2b40      	cmp	r3, #64	@ 0x40
 800282a:	d12f      	bne.n	800288c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	2b00      	cmp	r3, #0
 8002834:	d02a      	beq.n	800288c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002844:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1e      	ldr	r2, [pc, #120]	@ (80028c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d101      	bne.n	8002854 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002850:	4b1d      	ldr	r3, [pc, #116]	@ (80028c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002852:	e001      	b.n	8002858 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002854:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4919      	ldr	r1, [pc, #100]	@ (80028c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002860:	428b      	cmp	r3, r1
 8002862:	d101      	bne.n	8002868 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002864:	4b18      	ldr	r3, [pc, #96]	@ (80028c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002866:	e001      	b.n	800286c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002868:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800286c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002870:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287e:	f043 0202 	orr.w	r2, r3, #2
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff fda6 	bl	80023d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b08      	cmp	r3, #8
 8002894:	d136      	bne.n	8002904 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b00      	cmp	r3, #0
 800289e:	d031      	beq.n	8002904 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a07      	ldr	r2, [pc, #28]	@ (80028c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d101      	bne.n	80028ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80028aa:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80028ac:	e001      	b.n	80028b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80028ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4902      	ldr	r1, [pc, #8]	@ (80028c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80028ba:	428b      	cmp	r3, r1
 80028bc:	d106      	bne.n	80028cc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80028be:	4b02      	ldr	r3, [pc, #8]	@ (80028c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80028c0:	e006      	b.n	80028d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80028c2:	bf00      	nop
 80028c4:	40003800 	.word	0x40003800
 80028c8:	40003400 	.word	0x40003400
 80028cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80028d0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80028d4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80028e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f2:	f043 0204 	orr.w	r2, r3, #4
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff fd6c 	bl	80023d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002900:	e000      	b.n	8002904 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002902:	bf00      	nop
}
 8002904:	bf00      	nop
 8002906:	3720      	adds	r7, #32
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292c:	1c99      	adds	r1, r3, #2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6251      	str	r1, [r2, #36]	@ 0x24
 8002932:	881a      	ldrh	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d113      	bne.n	800297a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002960:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d106      	bne.n	800297a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ffc9 	bl	800290c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	1c99      	adds	r1, r3, #2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6251      	str	r1, [r2, #36]	@ 0x24
 8002996:	8819      	ldrh	r1, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1d      	ldr	r2, [pc, #116]	@ (8002a14 <I2SEx_TxISR_I2SExt+0x90>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d101      	bne.n	80029a6 <I2SEx_TxISR_I2SExt+0x22>
 80029a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a18 <I2SEx_TxISR_I2SExt+0x94>)
 80029a4:	e001      	b.n	80029aa <I2SEx_TxISR_I2SExt+0x26>
 80029a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029aa:	460a      	mov	r2, r1
 80029ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d121      	bne.n	8002a0a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a12      	ldr	r2, [pc, #72]	@ (8002a14 <I2SEx_TxISR_I2SExt+0x90>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d101      	bne.n	80029d4 <I2SEx_TxISR_I2SExt+0x50>
 80029d0:	4b11      	ldr	r3, [pc, #68]	@ (8002a18 <I2SEx_TxISR_I2SExt+0x94>)
 80029d2:	e001      	b.n	80029d8 <I2SEx_TxISR_I2SExt+0x54>
 80029d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	490d      	ldr	r1, [pc, #52]	@ (8002a14 <I2SEx_TxISR_I2SExt+0x90>)
 80029e0:	428b      	cmp	r3, r1
 80029e2:	d101      	bne.n	80029e8 <I2SEx_TxISR_I2SExt+0x64>
 80029e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a18 <I2SEx_TxISR_I2SExt+0x94>)
 80029e6:	e001      	b.n	80029ec <I2SEx_TxISR_I2SExt+0x68>
 80029e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80029f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d106      	bne.n	8002a0a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff ff81 	bl	800290c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40003800 	.word	0x40003800
 8002a18:	40003400 	.word	0x40003400

08002a1c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68d8      	ldr	r0, [r3, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2e:	1c99      	adds	r1, r3, #2
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002a34:	b282      	uxth	r2, r0
 8002a36:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d113      	bne.n	8002a78 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a5e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d106      	bne.n	8002a78 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff ff4a 	bl	800290c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a20      	ldr	r2, [pc, #128]	@ (8002b10 <I2SEx_RxISR_I2SExt+0x90>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d101      	bne.n	8002a96 <I2SEx_RxISR_I2SExt+0x16>
 8002a92:	4b20      	ldr	r3, [pc, #128]	@ (8002b14 <I2SEx_RxISR_I2SExt+0x94>)
 8002a94:	e001      	b.n	8002a9a <I2SEx_RxISR_I2SExt+0x1a>
 8002a96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a9a:	68d8      	ldr	r0, [r3, #12]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa0:	1c99      	adds	r1, r3, #2
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002aa6:	b282      	uxth	r2, r0
 8002aa8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d121      	bne.n	8002b06 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a12      	ldr	r2, [pc, #72]	@ (8002b10 <I2SEx_RxISR_I2SExt+0x90>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d101      	bne.n	8002ad0 <I2SEx_RxISR_I2SExt+0x50>
 8002acc:	4b11      	ldr	r3, [pc, #68]	@ (8002b14 <I2SEx_RxISR_I2SExt+0x94>)
 8002ace:	e001      	b.n	8002ad4 <I2SEx_RxISR_I2SExt+0x54>
 8002ad0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	490d      	ldr	r1, [pc, #52]	@ (8002b10 <I2SEx_RxISR_I2SExt+0x90>)
 8002adc:	428b      	cmp	r3, r1
 8002ade:	d101      	bne.n	8002ae4 <I2SEx_RxISR_I2SExt+0x64>
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b14 <I2SEx_RxISR_I2SExt+0x94>)
 8002ae2:	e001      	b.n	8002ae8 <I2SEx_RxISR_I2SExt+0x68>
 8002ae4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ae8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002aec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d106      	bne.n	8002b06 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff ff03 	bl	800290c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40003800 	.word	0x40003800
 8002b14:	40003400 	.word	0x40003400

08002b18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e101      	b.n	8002d2e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d106      	bne.n	8002b4a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f005 ff63 	bl	8008a10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b58:	d102      	bne.n	8002b60 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f002 fd2e 	bl	80055c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	7c1a      	ldrb	r2, [r3, #16]
 8002b72:	f88d 2000 	strb.w	r2, [sp]
 8002b76:	3304      	adds	r3, #4
 8002b78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b7a:	f002 fc0d 	bl	8005398 <USB_CoreInit>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0ce      	b.n	8002d2e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f002 fd26 	bl	80055e8 <USB_SetCurrentMode>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e0bf      	b.n	8002d2e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	73fb      	strb	r3, [r7, #15]
 8002bb2:	e04a      	b.n	8002c4a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	3315      	adds	r3, #21
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bc8:	7bfa      	ldrb	r2, [r7, #15]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3314      	adds	r3, #20
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	b298      	uxth	r0, r3
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	332e      	adds	r3, #46	@ 0x2e
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3318      	adds	r3, #24
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	331c      	adds	r3, #28
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c1c:	7bfa      	ldrb	r2, [r7, #15]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	3320      	adds	r3, #32
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3324      	adds	r3, #36	@ 0x24
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	3301      	adds	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	791b      	ldrb	r3, [r3, #4]
 8002c4e:	7bfa      	ldrb	r2, [r7, #15]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d3af      	bcc.n	8002bb4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c54:	2300      	movs	r3, #0
 8002c56:	73fb      	strb	r3, [r7, #15]
 8002c58:	e044      	b.n	8002ce4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c9c:	7bfa      	ldrb	r2, [r7, #15]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	791b      	ldrb	r3, [r3, #4]
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d3b5      	bcc.n	8002c5a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	7c1a      	ldrb	r2, [r3, #16]
 8002cf6:	f88d 2000 	strb.w	r2, [sp]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cfe:	f002 fcbf 	bl	8005680 <USB_DevInit>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e00c      	b.n	8002d2e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f003 fd09 	bl	800673e <USB_DevDisconnect>

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_PCD_Start+0x1c>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e022      	b.n	8002d98 <HAL_PCD_Start+0x62>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d009      	beq.n	8002d7a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d105      	bne.n	8002d7a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d72:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f002 fc10 	bl	80055a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 fcb7 	bl	80066fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002da0:	b590      	push	{r4, r7, lr}
 8002da2:	b08d      	sub	sp, #52	@ 0x34
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f003 fd75 	bl	80068a6 <USB_GetMode>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f040 848c 	bne.w	80036dc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f003 fcd9 	bl	8006780 <USB_ReadInterrupts>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8482 	beq.w	80036da <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f003 fcc6 	bl	8006780 <USB_ReadInterrupts>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d107      	bne.n	8002e0e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695a      	ldr	r2, [r3, #20]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f002 0202 	and.w	r2, r2, #2
 8002e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f003 fcb4 	bl	8006780 <USB_ReadInterrupts>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f003 0310 	and.w	r3, r3, #16
 8002e1e:	2b10      	cmp	r3, #16
 8002e20:	d161      	bne.n	8002ee6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699a      	ldr	r2, [r3, #24]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0210 	bic.w	r2, r2, #16
 8002e30:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f003 020f 	and.w	r2, r3, #15
 8002e3e:	4613      	mov	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3304      	adds	r3, #4
 8002e50:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	0c5b      	lsrs	r3, r3, #17
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d124      	bne.n	8002ea8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d035      	beq.n	8002ed6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	6a38      	ldr	r0, [r7, #32]
 8002e7e:	f003 faeb 	bl	8006458 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e8e:	441a      	add	r2, r3
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	695a      	ldr	r2, [r3, #20]
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	091b      	lsrs	r3, r3, #4
 8002e9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ea0:	441a      	add	r2, r3
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	615a      	str	r2, [r3, #20]
 8002ea6:	e016      	b.n	8002ed6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	0c5b      	lsrs	r3, r3, #17
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	2b06      	cmp	r3, #6
 8002eb2:	d110      	bne.n	8002ed6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002eba:	2208      	movs	r2, #8
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	6a38      	ldr	r0, [r7, #32]
 8002ec0:	f003 faca 	bl	8006458 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ed0:	441a      	add	r2, r3
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699a      	ldr	r2, [r3, #24]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0210 	orr.w	r2, r2, #16
 8002ee4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f003 fc48 	bl	8006780 <USB_ReadInterrupts>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ef6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002efa:	f040 80a7 	bne.w	800304c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f003 fc4d 	bl	80067a6 <USB_ReadDevAllOutEpInterrupt>
 8002f0c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002f0e:	e099      	b.n	8003044 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 808e 	beq.w	8003038 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f003 fc71 	bl	800680e <USB_ReadDevOutEPInterrupt>
 8002f2c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00c      	beq.n	8002f52 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f44:	461a      	mov	r2, r3
 8002f46:	2301      	movs	r3, #1
 8002f48:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fed1 	bl	8003cf4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00c      	beq.n	8002f76 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f68:	461a      	mov	r2, r3
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 ffa7 	bl	8003ec4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	2310      	movs	r3, #16
 8002f90:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d030      	beq.n	8002ffe <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa4:	2b80      	cmp	r3, #128	@ 0x80
 8002fa6:	d109      	bne.n	8002fbc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fba:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	3304      	adds	r3, #4
 8002fd0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	78db      	ldrb	r3, [r3, #3]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d108      	bne.n	8002fec <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f005 fe36 	bl	8008c58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f003 0320 	and.w	r3, r3, #32
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	4413      	add	r3, r2
 8003010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003014:	461a      	mov	r2, r3
 8003016:	2320      	movs	r3, #32
 8003018:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d009      	beq.n	8003038 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	4413      	add	r3, r2
 800302c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003030:	461a      	mov	r2, r3
 8003032:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003036:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303a:	3301      	adds	r3, #1
 800303c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800303e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003040:	085b      	lsrs	r3, r3, #1
 8003042:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003046:	2b00      	cmp	r3, #0
 8003048:	f47f af62 	bne.w	8002f10 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f003 fb95 	bl	8006780 <USB_ReadInterrupts>
 8003056:	4603      	mov	r3, r0
 8003058:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800305c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003060:	f040 80db 	bne.w	800321a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f003 fbb6 	bl	80067da <USB_ReadDevAllInEpInterrupt>
 800306e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003074:	e0cd      	b.n	8003212 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80c2 	beq.w	8003206 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f003 fbdc 	bl	800684a <USB_ReadDevInEPInterrupt>
 8003092:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d057      	beq.n	800314e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	2201      	movs	r2, #1
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69f9      	ldr	r1, [r7, #28]
 80030ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030be:	4013      	ands	r3, r2
 80030c0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030ce:	461a      	mov	r2, r3
 80030d0:	2301      	movs	r3, #1
 80030d2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	799b      	ldrb	r3, [r3, #6]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d132      	bne.n	8003142 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e0:	4613      	mov	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	3320      	adds	r3, #32
 80030ec:	6819      	ldr	r1, [r3, #0]
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f2:	4613      	mov	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4403      	add	r3, r0
 80030fc:	331c      	adds	r3, #28
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4419      	add	r1, r3
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003106:	4613      	mov	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4403      	add	r3, r0
 8003110:	3320      	adds	r3, #32
 8003112:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003116:	2b00      	cmp	r3, #0
 8003118:	d113      	bne.n	8003142 <HAL_PCD_IRQHandler+0x3a2>
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800311e:	4613      	mov	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	3324      	adds	r3, #36	@ 0x24
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d108      	bne.n	8003142 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800313a:	461a      	mov	r2, r3
 800313c:	2101      	movs	r1, #1
 800313e:	f003 fbe3 	bl	8006908 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003144:	b2db      	uxtb	r3, r3
 8003146:	4619      	mov	r1, r3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f005 fd00 	bl	8008b4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003164:	461a      	mov	r2, r3
 8003166:	2308      	movs	r3, #8
 8003168:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	4413      	add	r3, r2
 800317c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003180:	461a      	mov	r2, r3
 8003182:	2310      	movs	r3, #16
 8003184:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	4413      	add	r3, r2
 8003198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800319c:	461a      	mov	r2, r3
 800319e:	2340      	movs	r3, #64	@ 0x40
 80031a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d023      	beq.n	80031f4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031ae:	6a38      	ldr	r0, [r7, #32]
 80031b0:	f002 fbca 	bl	8005948 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031b6:	4613      	mov	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	3310      	adds	r3, #16
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	4413      	add	r3, r2
 80031c4:	3304      	adds	r3, #4
 80031c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	78db      	ldrb	r3, [r3, #3]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d108      	bne.n	80031e2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2200      	movs	r2, #0
 80031d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	4619      	mov	r1, r3
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f005 fd4d 	bl	8008c7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031ee:	461a      	mov	r2, r3
 80031f0:	2302      	movs	r3, #2
 80031f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fcea 	bl	8003bda <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	3301      	adds	r3, #1
 800320a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800320c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320e:	085b      	lsrs	r3, r3, #1
 8003210:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003214:	2b00      	cmp	r3, #0
 8003216:	f47f af2e 	bne.w	8003076 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f003 faae 	bl	8006780 <USB_ReadInterrupts>
 8003224:	4603      	mov	r3, r0
 8003226:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800322a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800322e:	d122      	bne.n	8003276 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800324a:	2b01      	cmp	r3, #1
 800324c:	d108      	bne.n	8003260 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003256:	2100      	movs	r1, #0
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fed1 	bl	8004000 <HAL_PCDEx_LPM_Callback>
 800325e:	e002      	b.n	8003266 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f005 fceb 	bl	8008c3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695a      	ldr	r2, [r3, #20]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003274:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f003 fa80 	bl	8006780 <USB_ReadInterrupts>
 8003280:	4603      	mov	r3, r0
 8003282:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003286:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800328a:	d112      	bne.n	80032b2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b01      	cmp	r3, #1
 800329a:	d102      	bne.n	80032a2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f005 fca7 	bl	8008bf0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80032b0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f003 fa62 	bl	8006780 <USB_ReadInterrupts>
 80032bc:	4603      	mov	r3, r0
 80032be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032c6:	f040 80b7 	bne.w	8003438 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2110      	movs	r1, #16
 80032e4:	4618      	mov	r0, r3
 80032e6:	f002 fb2f 	bl	8005948 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ea:	2300      	movs	r3, #0
 80032ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032ee:	e046      	b.n	800337e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032fc:	461a      	mov	r2, r3
 80032fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003302:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003314:	0151      	lsls	r1, r2, #5
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	440a      	add	r2, r1
 800331a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800331e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003322:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003330:	461a      	mov	r2, r3
 8003332:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003336:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003348:	0151      	lsls	r1, r2, #5
 800334a:	69fa      	ldr	r2, [r7, #28]
 800334c:	440a      	add	r2, r1
 800334e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003352:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003356:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	4413      	add	r3, r2
 8003360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003368:	0151      	lsls	r1, r2, #5
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	440a      	add	r2, r1
 800336e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003372:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003376:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800337a:	3301      	adds	r3, #1
 800337c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	791b      	ldrb	r3, [r3, #4]
 8003382:	461a      	mov	r2, r3
 8003384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003386:	4293      	cmp	r3, r2
 8003388:	d3b2      	bcc.n	80032f0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	69fa      	ldr	r2, [r7, #28]
 8003394:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003398:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800339c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	7bdb      	ldrb	r3, [r3, #15]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d016      	beq.n	80033d4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033b6:	f043 030b 	orr.w	r3, r3, #11
 80033ba:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c6:	69fa      	ldr	r2, [r7, #28]
 80033c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033cc:	f043 030b 	orr.w	r3, r3, #11
 80033d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80033d2:	e015      	b.n	8003400 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	69fa      	ldr	r2, [r7, #28]
 80033de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80033e6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80033ea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033fa:	f043 030b 	orr.w	r3, r3, #11
 80033fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800340e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003412:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003422:	461a      	mov	r2, r3
 8003424:	f003 fa70 	bl	8006908 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003436:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f003 f99f 	bl	8006780 <USB_ReadInterrupts>
 8003442:	4603      	mov	r3, r0
 8003444:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003448:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800344c:	d123      	bne.n	8003496 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f003 fa35 	bl	80068c2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f002 faec 	bl	8005a3a <USB_GetDevSpeed>
 8003462:	4603      	mov	r3, r0
 8003464:	461a      	mov	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681c      	ldr	r4, [r3, #0]
 800346e:	f001 fa37 	bl	80048e0 <HAL_RCC_GetHCLKFreq>
 8003472:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003478:	461a      	mov	r2, r3
 800347a:	4620      	mov	r0, r4
 800347c:	f001 fff0 	bl	8005460 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f005 fb8c 	bl	8008b9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003494:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f003 f970 	bl	8006780 <USB_ReadInterrupts>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d10a      	bne.n	80034c0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f005 fb69 	bl	8008b82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f002 0208 	and.w	r2, r2, #8
 80034be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f003 f95b 	bl	8006780 <USB_ReadInterrupts>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d0:	2b80      	cmp	r3, #128	@ 0x80
 80034d2:	d123      	bne.n	800351c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034e0:	2301      	movs	r3, #1
 80034e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034e4:	e014      	b.n	8003510 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d105      	bne.n	800350a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80034fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003500:	b2db      	uxtb	r3, r3
 8003502:	4619      	mov	r1, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fb0a 	bl	8003b1e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	3301      	adds	r3, #1
 800350e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	791b      	ldrb	r3, [r3, #4]
 8003514:	461a      	mov	r2, r3
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	4293      	cmp	r3, r2
 800351a:	d3e4      	bcc.n	80034e6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f003 f92d 	bl	8006780 <USB_ReadInterrupts>
 8003526:	4603      	mov	r3, r0
 8003528:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800352c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003530:	d13c      	bne.n	80035ac <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003532:	2301      	movs	r3, #1
 8003534:	627b      	str	r3, [r7, #36]	@ 0x24
 8003536:	e02b      	b.n	8003590 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	4413      	add	r3, r2
 8003540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	3318      	adds	r3, #24
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d115      	bne.n	800358a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800355e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003560:	2b00      	cmp	r3, #0
 8003562:	da12      	bge.n	800358a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	3317      	adds	r3, #23
 8003574:	2201      	movs	r2, #1
 8003576:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003580:	b2db      	uxtb	r3, r3
 8003582:	4619      	mov	r1, r3
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 faca 	bl	8003b1e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358c:	3301      	adds	r3, #1
 800358e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	791b      	ldrb	r3, [r3, #4]
 8003594:	461a      	mov	r2, r3
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	4293      	cmp	r3, r2
 800359a:	d3cd      	bcc.n	8003538 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80035aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f003 f8e5 	bl	8006780 <USB_ReadInterrupts>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035c0:	d156      	bne.n	8003670 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035c2:	2301      	movs	r3, #1
 80035c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035c6:	e045      	b.n	8003654 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80035c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d12e      	bne.n	800364e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	da2b      	bge.n	800364e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003602:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003606:	429a      	cmp	r2, r3
 8003608:	d121      	bne.n	800364e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800361c:	2201      	movs	r2, #1
 800361e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003646:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800364a:	6053      	str	r3, [r2, #4]
            break;
 800364c:	e008      	b.n	8003660 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	3301      	adds	r3, #1
 8003652:	627b      	str	r3, [r7, #36]	@ 0x24
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	791b      	ldrb	r3, [r3, #4]
 8003658:	461a      	mov	r2, r3
 800365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365c:	4293      	cmp	r3, r2
 800365e:	d3b3      	bcc.n	80035c8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695a      	ldr	r2, [r3, #20]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800366e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f003 f883 	bl	8006780 <USB_ReadInterrupts>
 800367a:	4603      	mov	r3, r0
 800367c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003684:	d10a      	bne.n	800369c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f005 fb0a 	bl	8008ca0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800369a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f003 f86d 	bl	8006780 <USB_ReadInterrupts>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d115      	bne.n	80036dc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f005 fafa 	bl	8008cbc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6859      	ldr	r1, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	605a      	str	r2, [r3, #4]
 80036d8:	e000      	b.n	80036dc <HAL_PCD_IRQHandler+0x93c>
      return;
 80036da:	bf00      	nop
    }
  }
}
 80036dc:	3734      	adds	r7, #52	@ 0x34
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd90      	pop	{r4, r7, pc}

080036e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	460b      	mov	r3, r1
 80036ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_PCD_SetAddress+0x1a>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e012      	b.n	8003722 <HAL_PCD_SetAddress+0x40>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f002 ffcc 	bl	80066b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b084      	sub	sp, #16
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	4608      	mov	r0, r1
 8003734:	4611      	mov	r1, r2
 8003736:	461a      	mov	r2, r3
 8003738:	4603      	mov	r3, r0
 800373a:	70fb      	strb	r3, [r7, #3]
 800373c:	460b      	mov	r3, r1
 800373e:	803b      	strh	r3, [r7, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800374c:	2b00      	cmp	r3, #0
 800374e:	da0f      	bge.n	8003770 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	f003 020f 	and.w	r2, r3, #15
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	3310      	adds	r3, #16
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	4413      	add	r3, r2
 8003764:	3304      	adds	r3, #4
 8003766:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2201      	movs	r2, #1
 800376c:	705a      	strb	r2, [r3, #1]
 800376e:	e00f      	b.n	8003790 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	f003 020f 	and.w	r2, r3, #15
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	4413      	add	r3, r2
 8003786:	3304      	adds	r3, #4
 8003788:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	b2da      	uxtb	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800379c:	883b      	ldrh	r3, [r7, #0]
 800379e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	78ba      	ldrb	r2, [r7, #2]
 80037aa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	785b      	ldrb	r3, [r3, #1]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d004      	beq.n	80037be <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037be:	78bb      	ldrb	r3, [r7, #2]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d102      	bne.n	80037ca <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <HAL_PCD_EP_Open+0xae>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e00e      	b.n	80037f6 <HAL_PCD_EP_Open+0xcc>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68f9      	ldr	r1, [r7, #12]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f002 f94c 	bl	8005a84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80037f4:	7afb      	ldrb	r3, [r7, #11]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	460b      	mov	r3, r1
 8003808:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800380a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800380e:	2b00      	cmp	r3, #0
 8003810:	da0f      	bge.n	8003832 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	f003 020f 	and.w	r2, r3, #15
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	3310      	adds	r3, #16
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4413      	add	r3, r2
 8003826:	3304      	adds	r3, #4
 8003828:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	705a      	strb	r2, [r3, #1]
 8003830:	e00f      	b.n	8003852 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003832:	78fb      	ldrb	r3, [r7, #3]
 8003834:	f003 020f 	and.w	r2, r3, #15
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	4413      	add	r3, r2
 8003848:	3304      	adds	r3, #4
 800384a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	f003 030f 	and.w	r3, r3, #15
 8003858:	b2da      	uxtb	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_PCD_EP_Close+0x6e>
 8003868:	2302      	movs	r3, #2
 800386a:	e00e      	b.n	800388a <HAL_PCD_EP_Close+0x8c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68f9      	ldr	r1, [r7, #12]
 800387a:	4618      	mov	r0, r3
 800387c:	f002 f98a 	bl	8005b94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b086      	sub	sp, #24
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
 800389e:	460b      	mov	r3, r1
 80038a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038a2:	7afb      	ldrb	r3, [r7, #11]
 80038a4:	f003 020f 	and.w	r2, r3, #15
 80038a8:	4613      	mov	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4413      	add	r3, r2
 80038b8:	3304      	adds	r3, #4
 80038ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2200      	movs	r2, #0
 80038cc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2200      	movs	r2, #0
 80038d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038d4:	7afb      	ldrb	r3, [r7, #11]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	799b      	ldrb	r3, [r3, #6]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d102      	bne.n	80038ee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	799b      	ldrb	r3, [r3, #6]
 80038f6:	461a      	mov	r2, r3
 80038f8:	6979      	ldr	r1, [r7, #20]
 80038fa:	f002 fa27 	bl	8005d4c <USB_EPStartXfer>

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	f003 020f 	and.w	r2, r3, #15
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800392a:	681b      	ldr	r3, [r3, #0]
}
 800392c:	4618      	mov	r0, r3
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	460b      	mov	r3, r1
 8003946:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003948:	7afb      	ldrb	r3, [r7, #11]
 800394a:	f003 020f 	and.w	r2, r3, #15
 800394e:	4613      	mov	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	3310      	adds	r3, #16
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4413      	add	r3, r2
 800395c:	3304      	adds	r3, #4
 800395e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2200      	movs	r2, #0
 8003970:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2201      	movs	r2, #1
 8003976:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003978:	7afb      	ldrb	r3, [r7, #11]
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	b2da      	uxtb	r2, r3
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	799b      	ldrb	r3, [r3, #6]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d102      	bne.n	8003992 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	799b      	ldrb	r3, [r3, #6]
 800399a:	461a      	mov	r2, r3
 800399c:	6979      	ldr	r1, [r7, #20]
 800399e:	f002 f9d5 	bl	8005d4c <USB_EPStartXfer>

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	7912      	ldrb	r2, [r2, #4]
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e04f      	b.n	8003a6a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	da0f      	bge.n	80039f2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d2:	78fb      	ldrb	r3, [r7, #3]
 80039d4:	f003 020f 	and.w	r2, r3, #15
 80039d8:	4613      	mov	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	3310      	adds	r3, #16
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	4413      	add	r3, r2
 80039e6:	3304      	adds	r3, #4
 80039e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	705a      	strb	r2, [r3, #1]
 80039f0:	e00d      	b.n	8003a0e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	4613      	mov	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	4413      	add	r3, r2
 8003a04:	3304      	adds	r3, #4
 8003a06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_PCD_EP_SetStall+0x82>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e01d      	b.n	8003a6a <HAL_PCD_EP_SetStall+0xbe>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68f9      	ldr	r1, [r7, #12]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f002 fd63 	bl	8006508 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d109      	bne.n	8003a60 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6818      	ldr	r0, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	7999      	ldrb	r1, [r3, #6]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f002 ff54 	bl	8006908 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	7912      	ldrb	r2, [r2, #4]
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d901      	bls.n	8003a90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e042      	b.n	8003b16 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	da0f      	bge.n	8003ab8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	f003 020f 	and.w	r2, r3, #15
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	3310      	adds	r3, #16
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	4413      	add	r3, r2
 8003aac:	3304      	adds	r3, #4
 8003aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	705a      	strb	r2, [r3, #1]
 8003ab6:	e00f      	b.n	8003ad8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	f003 020f 	and.w	r2, r3, #15
 8003abe:	4613      	mov	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	4413      	add	r3, r2
 8003ace:	3304      	adds	r3, #4
 8003ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ade:	78fb      	ldrb	r3, [r7, #3]
 8003ae0:	f003 030f 	and.w	r3, r3, #15
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_PCD_EP_ClrStall+0x86>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e00e      	b.n	8003b16 <HAL_PCD_EP_ClrStall+0xa4>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68f9      	ldr	r1, [r7, #12]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f002 fd6c 	bl	80065e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	460b      	mov	r3, r1
 8003b28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	da0c      	bge.n	8003b4c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	f003 020f 	and.w	r2, r3, #15
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	3310      	adds	r3, #16
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	4413      	add	r3, r2
 8003b46:	3304      	adds	r3, #4
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	e00c      	b.n	8003b66 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	f003 020f 	and.w	r2, r3, #15
 8003b52:	4613      	mov	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4413      	add	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	4413      	add	r3, r2
 8003b62:	3304      	adds	r3, #4
 8003b64:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68f9      	ldr	r1, [r7, #12]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f002 fb8b 	bl	8006288 <USB_EPStopXfer>
 8003b72:	4603      	mov	r3, r0
 8003b74:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b76:	7afb      	ldrb	r3, [r7, #11]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_PCD_EP_Flush+0x1a>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e01b      	b.n	8003bd2 <HAL_PCD_EP_Flush+0x52>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8003ba2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	da09      	bge.n	8003bbe <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	78fb      	ldrb	r3, [r7, #3]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	f001 fec6 	bl	8005948 <USB_FlushTxFifo>
 8003bbc:	e004      	b.n	8003bc8 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f001 fef2 	bl	80059ac <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b08a      	sub	sp, #40	@ 0x28
 8003bde:	af02      	add	r7, sp, #8
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	3310      	adds	r3, #16
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3304      	adds	r3, #4
 8003c00:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	695a      	ldr	r2, [r3, #20]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d901      	bls.n	8003c12 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e06b      	b.n	8003cea <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d902      	bls.n	8003c2e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3303      	adds	r3, #3
 8003c32:	089b      	lsrs	r3, r3, #2
 8003c34:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c36:	e02a      	b.n	8003c8e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d902      	bls.n	8003c54 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	3303      	adds	r3, #3
 8003c58:	089b      	lsrs	r3, r3, #2
 8003c5a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	68d9      	ldr	r1, [r3, #12]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	4603      	mov	r3, r0
 8003c70:	6978      	ldr	r0, [r7, #20]
 8003c72:	f002 fbb3 	bl	80063dc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	441a      	add	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	441a      	add	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d809      	bhi.n	8003cb8 <PCD_WriteEmptyTxFifo+0xde>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d203      	bcs.n	8003cb8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1bf      	bne.n	8003c38 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d811      	bhi.n	8003ce8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	2201      	movs	r2, #1
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	6939      	ldr	r1, [r7, #16]
 8003ce0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	333c      	adds	r3, #60	@ 0x3c
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	799b      	ldrb	r3, [r3, #6]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d17b      	bne.n	8003e22 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d015      	beq.n	8003d60 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	4a61      	ldr	r2, [pc, #388]	@ (8003ebc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	f240 80b9 	bls.w	8003eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 80b3 	beq.w	8003eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d56:	461a      	mov	r2, r3
 8003d58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d5c:	6093      	str	r3, [r2, #8]
 8003d5e:	e0a7      	b.n	8003eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f003 0320 	and.w	r3, r3, #32
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d009      	beq.n	8003d7e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	015a      	lsls	r2, r3, #5
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	4413      	add	r3, r2
 8003d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d76:	461a      	mov	r2, r3
 8003d78:	2320      	movs	r3, #32
 8003d7a:	6093      	str	r3, [r2, #8]
 8003d7c:	e098      	b.n	8003eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f040 8093 	bne.w	8003eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	4a4b      	ldr	r2, [pc, #300]	@ (8003ebc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d90f      	bls.n	8003db2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003da8:	461a      	mov	r2, r3
 8003daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dae:	6093      	str	r3, [r2, #8]
 8003db0:	e07e      	b.n	8003eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	4613      	mov	r3, r2
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a1a      	ldr	r2, [r3, #32]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	0159      	lsls	r1, r3, #5
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	440b      	add	r3, r1
 8003dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dde:	1ad2      	subs	r2, r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d114      	bne.n	8003e14 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d109      	bne.n	8003e06 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2101      	movs	r1, #1
 8003e00:	f002 fd82 	bl	8006908 <USB_EP0_OutStart>
 8003e04:	e006      	b.n	8003e14 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	441a      	add	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	4619      	mov	r1, r3
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f004 fe7c 	bl	8008b18 <HAL_PCD_DataOutStageCallback>
 8003e20:	e046      	b.n	8003eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	4a26      	ldr	r2, [pc, #152]	@ (8003ec0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d124      	bne.n	8003e74 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e40:	461a      	mov	r2, r3
 8003e42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e46:	6093      	str	r3, [r2, #8]
 8003e48:	e032      	b.n	8003eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e60:	461a      	mov	r2, r3
 8003e62:	2320      	movs	r3, #32
 8003e64:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f004 fe53 	bl	8008b18 <HAL_PCD_DataOutStageCallback>
 8003e72:	e01d      	b.n	8003eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d114      	bne.n	8003ea4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d108      	bne.n	8003ea4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	f002 fd32 	bl	8006908 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f004 fe34 	bl	8008b18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3720      	adds	r7, #32
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	4f54300a 	.word	0x4f54300a
 8003ec0:	4f54310a 	.word	0x4f54310a

08003ec4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	333c      	adds	r3, #60	@ 0x3c
 8003edc:	3304      	adds	r3, #4
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4a15      	ldr	r2, [pc, #84]	@ (8003f4c <PCD_EP_OutSetupPacket_int+0x88>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d90e      	bls.n	8003f18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d009      	beq.n	8003f18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f10:	461a      	mov	r2, r3
 8003f12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f004 fdeb 	bl	8008af4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4a0a      	ldr	r2, [pc, #40]	@ (8003f4c <PCD_EP_OutSetupPacket_int+0x88>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d90c      	bls.n	8003f40 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	799b      	ldrb	r3, [r3, #6]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d108      	bne.n	8003f40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f38:	461a      	mov	r2, r3
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	f002 fce4 	bl	8006908 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	4f54300a 	.word	0x4f54300a

08003f50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	70fb      	strb	r3, [r7, #3]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d107      	bne.n	8003f7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f6e:	883b      	ldrh	r3, [r7, #0]
 8003f70:	0419      	lsls	r1, r3, #16
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f7c:	e028      	b.n	8003fd0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f84:	0c1b      	lsrs	r3, r3, #16
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	4413      	add	r3, r2
 8003f8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	73fb      	strb	r3, [r7, #15]
 8003f90:	e00d      	b.n	8003fae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	3340      	adds	r3, #64	@ 0x40
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
 8003faa:	3301      	adds	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
 8003fae:	7bfa      	ldrb	r2, [r7, #15]
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d3ec      	bcc.n	8003f92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003fb8:	883b      	ldrh	r3, [r7, #0]
 8003fba:	0418      	lsls	r0, r3, #16
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6819      	ldr	r1, [r3, #0]
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	4302      	orrs	r2, r0
 8003fc8:	3340      	adds	r3, #64	@ 0x40
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	887a      	ldrh	r2, [r7, #2]
 8003ff0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	460b      	mov	r3, r1
 800400a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e267      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d075      	beq.n	8004122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004036:	4b88      	ldr	r3, [pc, #544]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	2b04      	cmp	r3, #4
 8004040:	d00c      	beq.n	800405c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004042:	4b85      	ldr	r3, [pc, #532]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800404a:	2b08      	cmp	r3, #8
 800404c:	d112      	bne.n	8004074 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800404e:	4b82      	ldr	r3, [pc, #520]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004056:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800405a:	d10b      	bne.n	8004074 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800405c:	4b7e      	ldr	r3, [pc, #504]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d05b      	beq.n	8004120 <HAL_RCC_OscConfig+0x108>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d157      	bne.n	8004120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e242      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800407c:	d106      	bne.n	800408c <HAL_RCC_OscConfig+0x74>
 800407e:	4b76      	ldr	r3, [pc, #472]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a75      	ldr	r2, [pc, #468]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	e01d      	b.n	80040c8 <HAL_RCC_OscConfig+0xb0>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004094:	d10c      	bne.n	80040b0 <HAL_RCC_OscConfig+0x98>
 8004096:	4b70      	ldr	r3, [pc, #448]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a6f      	ldr	r2, [pc, #444]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 800409c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a6c      	ldr	r2, [pc, #432]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	e00b      	b.n	80040c8 <HAL_RCC_OscConfig+0xb0>
 80040b0:	4b69      	ldr	r3, [pc, #420]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a68      	ldr	r2, [pc, #416]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	4b66      	ldr	r3, [pc, #408]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a65      	ldr	r2, [pc, #404]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d013      	beq.n	80040f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d0:	f7fd f8d6 	bl	8001280 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d8:	f7fd f8d2 	bl	8001280 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b64      	cmp	r3, #100	@ 0x64
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e207      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0xc0>
 80040f6:	e014      	b.n	8004122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f8:	f7fd f8c2 	bl	8001280 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004100:	f7fd f8be 	bl	8001280 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b64      	cmp	r3, #100	@ 0x64
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e1f3      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004112:	4b51      	ldr	r3, [pc, #324]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f0      	bne.n	8004100 <HAL_RCC_OscConfig+0xe8>
 800411e:	e000      	b.n	8004122 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d063      	beq.n	80041f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800412e:	4b4a      	ldr	r3, [pc, #296]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 030c 	and.w	r3, r3, #12
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00b      	beq.n	8004152 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800413a:	4b47      	ldr	r3, [pc, #284]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004142:	2b08      	cmp	r3, #8
 8004144:	d11c      	bne.n	8004180 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004146:	4b44      	ldr	r3, [pc, #272]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d116      	bne.n	8004180 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004152:	4b41      	ldr	r3, [pc, #260]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <HAL_RCC_OscConfig+0x152>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d001      	beq.n	800416a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e1c7      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800416a:	4b3b      	ldr	r3, [pc, #236]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4937      	ldr	r1, [pc, #220]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 800417a:	4313      	orrs	r3, r2
 800417c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417e:	e03a      	b.n	80041f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d020      	beq.n	80041ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004188:	4b34      	ldr	r3, [pc, #208]	@ (800425c <HAL_RCC_OscConfig+0x244>)
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418e:	f7fd f877 	bl	8001280 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004196:	f7fd f873 	bl	8001280 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e1a8      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b4:	4b28      	ldr	r3, [pc, #160]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	4925      	ldr	r1, [pc, #148]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	600b      	str	r3, [r1, #0]
 80041c8:	e015      	b.n	80041f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ca:	4b24      	ldr	r3, [pc, #144]	@ (800425c <HAL_RCC_OscConfig+0x244>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fd f856 	bl	8001280 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d8:	f7fd f852 	bl	8001280 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e187      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d036      	beq.n	8004270 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d016      	beq.n	8004238 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800420a:	4b15      	ldr	r3, [pc, #84]	@ (8004260 <HAL_RCC_OscConfig+0x248>)
 800420c:	2201      	movs	r2, #1
 800420e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004210:	f7fd f836 	bl	8001280 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004218:	f7fd f832 	bl	8001280 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e167      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422a:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <HAL_RCC_OscConfig+0x240>)
 800422c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f0      	beq.n	8004218 <HAL_RCC_OscConfig+0x200>
 8004236:	e01b      	b.n	8004270 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004238:	4b09      	ldr	r3, [pc, #36]	@ (8004260 <HAL_RCC_OscConfig+0x248>)
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423e:	f7fd f81f 	bl	8001280 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004244:	e00e      	b.n	8004264 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004246:	f7fd f81b 	bl	8001280 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d907      	bls.n	8004264 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e150      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
 8004258:	40023800 	.word	0x40023800
 800425c:	42470000 	.word	0x42470000
 8004260:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004264:	4b88      	ldr	r3, [pc, #544]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1ea      	bne.n	8004246 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8097 	beq.w	80043ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800427e:	2300      	movs	r3, #0
 8004280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004282:	4b81      	ldr	r3, [pc, #516]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10f      	bne.n	80042ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	4b7d      	ldr	r3, [pc, #500]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	4a7c      	ldr	r2, [pc, #496]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800429c:	6413      	str	r3, [r2, #64]	@ 0x40
 800429e:	4b7a      	ldr	r3, [pc, #488]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a6:	60bb      	str	r3, [r7, #8]
 80042a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042aa:	2301      	movs	r3, #1
 80042ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ae:	4b77      	ldr	r3, [pc, #476]	@ (800448c <HAL_RCC_OscConfig+0x474>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d118      	bne.n	80042ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ba:	4b74      	ldr	r3, [pc, #464]	@ (800448c <HAL_RCC_OscConfig+0x474>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a73      	ldr	r2, [pc, #460]	@ (800448c <HAL_RCC_OscConfig+0x474>)
 80042c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042c6:	f7fc ffdb 	bl	8001280 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ce:	f7fc ffd7 	bl	8001280 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e10c      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e0:	4b6a      	ldr	r3, [pc, #424]	@ (800448c <HAL_RCC_OscConfig+0x474>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0f0      	beq.n	80042ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d106      	bne.n	8004302 <HAL_RCC_OscConfig+0x2ea>
 80042f4:	4b64      	ldr	r3, [pc, #400]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80042f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f8:	4a63      	ldr	r2, [pc, #396]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004300:	e01c      	b.n	800433c <HAL_RCC_OscConfig+0x324>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	2b05      	cmp	r3, #5
 8004308:	d10c      	bne.n	8004324 <HAL_RCC_OscConfig+0x30c>
 800430a:	4b5f      	ldr	r3, [pc, #380]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430e:	4a5e      	ldr	r2, [pc, #376]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004310:	f043 0304 	orr.w	r3, r3, #4
 8004314:	6713      	str	r3, [r2, #112]	@ 0x70
 8004316:	4b5c      	ldr	r3, [pc, #368]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431a:	4a5b      	ldr	r2, [pc, #364]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	6713      	str	r3, [r2, #112]	@ 0x70
 8004322:	e00b      	b.n	800433c <HAL_RCC_OscConfig+0x324>
 8004324:	4b58      	ldr	r3, [pc, #352]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004328:	4a57      	ldr	r2, [pc, #348]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 800432a:	f023 0301 	bic.w	r3, r3, #1
 800432e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004330:	4b55      	ldr	r3, [pc, #340]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004334:	4a54      	ldr	r2, [pc, #336]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004336:	f023 0304 	bic.w	r3, r3, #4
 800433a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d015      	beq.n	8004370 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004344:	f7fc ff9c 	bl	8001280 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800434a:	e00a      	b.n	8004362 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434c:	f7fc ff98 	bl	8001280 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800435a:	4293      	cmp	r3, r2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e0cb      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004362:	4b49      	ldr	r3, [pc, #292]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0ee      	beq.n	800434c <HAL_RCC_OscConfig+0x334>
 800436e:	e014      	b.n	800439a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004370:	f7fc ff86 	bl	8001280 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004376:	e00a      	b.n	800438e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004378:	f7fc ff82 	bl	8001280 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004386:	4293      	cmp	r3, r2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e0b5      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800438e:	4b3e      	ldr	r3, [pc, #248]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1ee      	bne.n	8004378 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800439a:	7dfb      	ldrb	r3, [r7, #23]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d105      	bne.n	80043ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a0:	4b39      	ldr	r3, [pc, #228]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80043a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a4:	4a38      	ldr	r2, [pc, #224]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80043a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 80a1 	beq.w	80044f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043b6:	4b34      	ldr	r3, [pc, #208]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 030c 	and.w	r3, r3, #12
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d05c      	beq.n	800447c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d141      	bne.n	800444e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ca:	4b31      	ldr	r3, [pc, #196]	@ (8004490 <HAL_RCC_OscConfig+0x478>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d0:	f7fc ff56 	bl	8001280 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d8:	f7fc ff52 	bl	8001280 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e087      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ea:	4b27      	ldr	r3, [pc, #156]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69da      	ldr	r2, [r3, #28]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004404:	019b      	lsls	r3, r3, #6
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440c:	085b      	lsrs	r3, r3, #1
 800440e:	3b01      	subs	r3, #1
 8004410:	041b      	lsls	r3, r3, #16
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004418:	061b      	lsls	r3, r3, #24
 800441a:	491b      	ldr	r1, [pc, #108]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 800441c:	4313      	orrs	r3, r2
 800441e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004420:	4b1b      	ldr	r3, [pc, #108]	@ (8004490 <HAL_RCC_OscConfig+0x478>)
 8004422:	2201      	movs	r2, #1
 8004424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004426:	f7fc ff2b 	bl	8001280 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800442e:	f7fc ff27 	bl	8001280 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e05c      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004440:	4b11      	ldr	r3, [pc, #68]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0f0      	beq.n	800442e <HAL_RCC_OscConfig+0x416>
 800444c:	e054      	b.n	80044f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444e:	4b10      	ldr	r3, [pc, #64]	@ (8004490 <HAL_RCC_OscConfig+0x478>)
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004454:	f7fc ff14 	bl	8001280 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445c:	f7fc ff10 	bl	8001280 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e045      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446e:	4b06      	ldr	r3, [pc, #24]	@ (8004488 <HAL_RCC_OscConfig+0x470>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x444>
 800447a:	e03d      	b.n	80044f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d107      	bne.n	8004494 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e038      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
 8004488:	40023800 	.word	0x40023800
 800448c:	40007000 	.word	0x40007000
 8004490:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004494:	4b1b      	ldr	r3, [pc, #108]	@ (8004504 <HAL_RCC_OscConfig+0x4ec>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d028      	beq.n	80044f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d121      	bne.n	80044f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d11a      	bne.n	80044f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044c4:	4013      	ands	r3, r2
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d111      	bne.n	80044f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044da:	085b      	lsrs	r3, r3, #1
 80044dc:	3b01      	subs	r3, #1
 80044de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d107      	bne.n	80044f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40023800 	.word	0x40023800

08004508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0cc      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800451c:	4b68      	ldr	r3, [pc, #416]	@ (80046c0 <HAL_RCC_ClockConfig+0x1b8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d90c      	bls.n	8004544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452a:	4b65      	ldr	r3, [pc, #404]	@ (80046c0 <HAL_RCC_ClockConfig+0x1b8>)
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004532:	4b63      	ldr	r3, [pc, #396]	@ (80046c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	429a      	cmp	r2, r3
 800453e:	d001      	beq.n	8004544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0b8      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d020      	beq.n	8004592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800455c:	4b59      	ldr	r3, [pc, #356]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	4a58      	ldr	r2, [pc, #352]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004566:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0308 	and.w	r3, r3, #8
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004574:	4b53      	ldr	r3, [pc, #332]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4a52      	ldr	r2, [pc, #328]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800457e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004580:	4b50      	ldr	r3, [pc, #320]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	494d      	ldr	r1, [pc, #308]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	4313      	orrs	r3, r2
 8004590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d044      	beq.n	8004628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d107      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a6:	4b47      	ldr	r3, [pc, #284]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d119      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e07f      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d003      	beq.n	80045c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d107      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c6:	4b3f      	ldr	r3, [pc, #252]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e06f      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d6:	4b3b      	ldr	r3, [pc, #236]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e067      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045e6:	4b37      	ldr	r3, [pc, #220]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f023 0203 	bic.w	r2, r3, #3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	4934      	ldr	r1, [pc, #208]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045f8:	f7fc fe42 	bl	8001280 <HAL_GetTick>
 80045fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004600:	f7fc fe3e 	bl	8001280 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e04f      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004616:	4b2b      	ldr	r3, [pc, #172]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 020c 	and.w	r2, r3, #12
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	429a      	cmp	r2, r3
 8004626:	d1eb      	bne.n	8004600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004628:	4b25      	ldr	r3, [pc, #148]	@ (80046c0 <HAL_RCC_ClockConfig+0x1b8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d20c      	bcs.n	8004650 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004636:	4b22      	ldr	r3, [pc, #136]	@ (80046c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800463e:	4b20      	ldr	r3, [pc, #128]	@ (80046c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d001      	beq.n	8004650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e032      	b.n	80046b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800465c:	4b19      	ldr	r3, [pc, #100]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	4916      	ldr	r1, [pc, #88]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	4313      	orrs	r3, r2
 800466c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800467a:	4b12      	ldr	r3, [pc, #72]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	490e      	ldr	r1, [pc, #56]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	4313      	orrs	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800468e:	f000 f821 	bl	80046d4 <HAL_RCC_GetSysClockFreq>
 8004692:	4602      	mov	r2, r0
 8004694:	4b0b      	ldr	r3, [pc, #44]	@ (80046c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	490a      	ldr	r1, [pc, #40]	@ (80046c8 <HAL_RCC_ClockConfig+0x1c0>)
 80046a0:	5ccb      	ldrb	r3, [r1, r3]
 80046a2:	fa22 f303 	lsr.w	r3, r2, r3
 80046a6:	4a09      	ldr	r2, [pc, #36]	@ (80046cc <HAL_RCC_ClockConfig+0x1c4>)
 80046a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80046aa:	4b09      	ldr	r3, [pc, #36]	@ (80046d0 <HAL_RCC_ClockConfig+0x1c8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fc fda2 	bl	80011f8 <HAL_InitTick>

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40023c00 	.word	0x40023c00
 80046c4:	40023800 	.word	0x40023800
 80046c8:	0800916c 	.word	0x0800916c
 80046cc:	20000004 	.word	0x20000004
 80046d0:	20000008 	.word	0x20000008

080046d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d8:	b094      	sub	sp, #80	@ 0x50
 80046da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046ec:	4b79      	ldr	r3, [pc, #484]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 030c 	and.w	r3, r3, #12
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d00d      	beq.n	8004714 <HAL_RCC_GetSysClockFreq+0x40>
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	f200 80e1 	bhi.w	80048c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <HAL_RCC_GetSysClockFreq+0x34>
 8004702:	2b04      	cmp	r3, #4
 8004704:	d003      	beq.n	800470e <HAL_RCC_GetSysClockFreq+0x3a>
 8004706:	e0db      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004708:	4b73      	ldr	r3, [pc, #460]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800470a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800470c:	e0db      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800470e:	4b73      	ldr	r3, [pc, #460]	@ (80048dc <HAL_RCC_GetSysClockFreq+0x208>)
 8004710:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004712:	e0d8      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004714:	4b6f      	ldr	r3, [pc, #444]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800471c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800471e:	4b6d      	ldr	r3, [pc, #436]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d063      	beq.n	80047f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800472a:	4b6a      	ldr	r3, [pc, #424]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	099b      	lsrs	r3, r3, #6
 8004730:	2200      	movs	r2, #0
 8004732:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004734:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473c:	633b      	str	r3, [r7, #48]	@ 0x30
 800473e:	2300      	movs	r3, #0
 8004740:	637b      	str	r3, [r7, #52]	@ 0x34
 8004742:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004746:	4622      	mov	r2, r4
 8004748:	462b      	mov	r3, r5
 800474a:	f04f 0000 	mov.w	r0, #0
 800474e:	f04f 0100 	mov.w	r1, #0
 8004752:	0159      	lsls	r1, r3, #5
 8004754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004758:	0150      	lsls	r0, r2, #5
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4621      	mov	r1, r4
 8004760:	1a51      	subs	r1, r2, r1
 8004762:	6139      	str	r1, [r7, #16]
 8004764:	4629      	mov	r1, r5
 8004766:	eb63 0301 	sbc.w	r3, r3, r1
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004778:	4659      	mov	r1, fp
 800477a:	018b      	lsls	r3, r1, #6
 800477c:	4651      	mov	r1, sl
 800477e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004782:	4651      	mov	r1, sl
 8004784:	018a      	lsls	r2, r1, #6
 8004786:	4651      	mov	r1, sl
 8004788:	ebb2 0801 	subs.w	r8, r2, r1
 800478c:	4659      	mov	r1, fp
 800478e:	eb63 0901 	sbc.w	r9, r3, r1
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800479e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047a6:	4690      	mov	r8, r2
 80047a8:	4699      	mov	r9, r3
 80047aa:	4623      	mov	r3, r4
 80047ac:	eb18 0303 	adds.w	r3, r8, r3
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	462b      	mov	r3, r5
 80047b4:	eb49 0303 	adc.w	r3, r9, r3
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	f04f 0200 	mov.w	r2, #0
 80047be:	f04f 0300 	mov.w	r3, #0
 80047c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047c6:	4629      	mov	r1, r5
 80047c8:	024b      	lsls	r3, r1, #9
 80047ca:	4621      	mov	r1, r4
 80047cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047d0:	4621      	mov	r1, r4
 80047d2:	024a      	lsls	r2, r1, #9
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047da:	2200      	movs	r2, #0
 80047dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047e4:	f7fb fcf0 	bl	80001c8 <__aeabi_uldivmod>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4613      	mov	r3, r2
 80047ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047f0:	e058      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047f2:	4b38      	ldr	r3, [pc, #224]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	099b      	lsrs	r3, r3, #6
 80047f8:	2200      	movs	r2, #0
 80047fa:	4618      	mov	r0, r3
 80047fc:	4611      	mov	r1, r2
 80047fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004802:	623b      	str	r3, [r7, #32]
 8004804:	2300      	movs	r3, #0
 8004806:	627b      	str	r3, [r7, #36]	@ 0x24
 8004808:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800480c:	4642      	mov	r2, r8
 800480e:	464b      	mov	r3, r9
 8004810:	f04f 0000 	mov.w	r0, #0
 8004814:	f04f 0100 	mov.w	r1, #0
 8004818:	0159      	lsls	r1, r3, #5
 800481a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800481e:	0150      	lsls	r0, r2, #5
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4641      	mov	r1, r8
 8004826:	ebb2 0a01 	subs.w	sl, r2, r1
 800482a:	4649      	mov	r1, r9
 800482c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800483c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004840:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004844:	ebb2 040a 	subs.w	r4, r2, sl
 8004848:	eb63 050b 	sbc.w	r5, r3, fp
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	00eb      	lsls	r3, r5, #3
 8004856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800485a:	00e2      	lsls	r2, r4, #3
 800485c:	4614      	mov	r4, r2
 800485e:	461d      	mov	r5, r3
 8004860:	4643      	mov	r3, r8
 8004862:	18e3      	adds	r3, r4, r3
 8004864:	603b      	str	r3, [r7, #0]
 8004866:	464b      	mov	r3, r9
 8004868:	eb45 0303 	adc.w	r3, r5, r3
 800486c:	607b      	str	r3, [r7, #4]
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800487a:	4629      	mov	r1, r5
 800487c:	028b      	lsls	r3, r1, #10
 800487e:	4621      	mov	r1, r4
 8004880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004884:	4621      	mov	r1, r4
 8004886:	028a      	lsls	r2, r1, #10
 8004888:	4610      	mov	r0, r2
 800488a:	4619      	mov	r1, r3
 800488c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800488e:	2200      	movs	r2, #0
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	61fa      	str	r2, [r7, #28]
 8004894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004898:	f7fb fc96 	bl	80001c8 <__aeabi_uldivmod>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4613      	mov	r3, r2
 80048a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80048a4:	4b0b      	ldr	r3, [pc, #44]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	0c1b      	lsrs	r3, r3, #16
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	3301      	adds	r3, #1
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80048b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048be:	e002      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048c0:	4b05      	ldr	r3, [pc, #20]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80048c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3750      	adds	r7, #80	@ 0x50
 80048cc:	46bd      	mov	sp, r7
 80048ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048d2:	bf00      	nop
 80048d4:	40023800 	.word	0x40023800
 80048d8:	00f42400 	.word	0x00f42400
 80048dc:	007a1200 	.word	0x007a1200

080048e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048e4:	4b03      	ldr	r3, [pc, #12]	@ (80048f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048e6:	681b      	ldr	r3, [r3, #0]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000004 	.word	0x20000004

080048f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d105      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800491c:	2b00      	cmp	r3, #0
 800491e:	d035      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004920:	4b62      	ldr	r3, [pc, #392]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004926:	f7fc fcab 	bl	8001280 <HAL_GetTick>
 800492a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800492c:	e008      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800492e:	f7fc fca7 	bl	8001280 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e0b0      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004940:	4b5b      	ldr	r3, [pc, #364]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1f0      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	019a      	lsls	r2, r3, #6
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	071b      	lsls	r3, r3, #28
 8004958:	4955      	ldr	r1, [pc, #340]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800495a:	4313      	orrs	r3, r2
 800495c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004960:	4b52      	ldr	r3, [pc, #328]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004962:	2201      	movs	r2, #1
 8004964:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004966:	f7fc fc8b 	bl	8001280 <HAL_GetTick>
 800496a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800496c:	e008      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800496e:	f7fc fc87 	bl	8001280 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e090      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004980:	4b4b      	ldr	r3, [pc, #300]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8083 	beq.w	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800499a:	2300      	movs	r3, #0
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	4b44      	ldr	r3, [pc, #272]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a2:	4a43      	ldr	r2, [pc, #268]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80049aa:	4b41      	ldr	r3, [pc, #260]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80049b6:	4b3f      	ldr	r3, [pc, #252]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a3e      	ldr	r2, [pc, #248]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049c2:	f7fc fc5d 	bl	8001280 <HAL_GetTick>
 80049c6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80049c8:	e008      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ca:	f7fc fc59 	bl	8001280 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e062      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80049dc:	4b35      	ldr	r3, [pc, #212]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0f0      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049e8:	4b31      	ldr	r3, [pc, #196]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049f0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d02f      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d028      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a06:	4b2a      	ldr	r3, [pc, #168]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a0e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a10:	4b29      	ldr	r3, [pc, #164]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a16:	4b28      	ldr	r3, [pc, #160]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a1c:	4a24      	ldr	r2, [pc, #144]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a22:	4b23      	ldr	r3, [pc, #140]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d114      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004a2e:	f7fc fc27 	bl	8001280 <HAL_GetTick>
 8004a32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a34:	e00a      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a36:	f7fc fc23 	bl	8001280 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e02a      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4c:	4b18      	ldr	r3, [pc, #96]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0ee      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a64:	d10d      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004a66:	4b12      	ldr	r3, [pc, #72]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a7a:	490d      	ldr	r1, [pc, #52]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	608b      	str	r3, [r1, #8]
 8004a80:	e005      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a82:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a88:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004a8c:	6093      	str	r3, [r2, #8]
 8004a8e:	4b08      	ldr	r3, [pc, #32]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a90:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a9a:	4905      	ldr	r1, [pc, #20]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	42470068 	.word	0x42470068
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	40007000 	.word	0x40007000
 8004ab8:	42470e40 	.word	0x42470e40

08004abc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d13f      	bne.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004ada:	4b24      	ldr	r3, [pc, #144]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d006      	beq.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004af0:	d12f      	bne.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004af2:	4b1f      	ldr	r3, [pc, #124]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004af4:	617b      	str	r3, [r7, #20]
          break;
 8004af6:	e02f      	b.n	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004af8:	4b1c      	ldr	r3, [pc, #112]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b04:	d108      	bne.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b06:	4b19      	ldr	r3, [pc, #100]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b0e:	4a19      	ldr	r2, [pc, #100]	@ (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	e007      	b.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b18:	4b14      	ldr	r3, [pc, #80]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b20:	4a15      	ldr	r2, [pc, #84]	@ (8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b26:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004b28:	4b10      	ldr	r3, [pc, #64]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b2e:	099b      	lsrs	r3, r3, #6
 8004b30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	fb02 f303 	mul.w	r3, r2, r3
 8004b3a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b42:	0f1b      	lsrs	r3, r3, #28
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4e:	617b      	str	r3, [r7, #20]
          break;
 8004b50:	e002      	b.n	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]
          break;
 8004b56:	bf00      	nop
        }
      }
      break;
 8004b58:	e000      	b.n	8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004b5a:	bf00      	nop
    }
  }
  return frequency;
 8004b5c:	697b      	ldr	r3, [r7, #20]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	371c      	adds	r7, #28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	00bb8000 	.word	0x00bb8000
 8004b74:	007a1200 	.word	0x007a1200
 8004b78:	00f42400 	.word	0x00f42400

08004b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e041      	b.n	8004c12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fc fa4a 	bl	800103c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	f000 fa16 	bl	8004fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d020      	beq.n	8004c7e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d01b      	beq.n	8004c7e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f06f 0202 	mvn.w	r2, #2
 8004c4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	f003 0303 	and.w	r3, r3, #3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f9a3 	bl	8004fb0 <HAL_TIM_IC_CaptureCallback>
 8004c6a:	e005      	b.n	8004c78 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f995 	bl	8004f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f9a6 	bl	8004fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d020      	beq.n	8004cca <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f003 0304 	and.w	r3, r3, #4
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01b      	beq.n	8004cca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f06f 0204 	mvn.w	r2, #4
 8004c9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f97d 	bl	8004fb0 <HAL_TIM_IC_CaptureCallback>
 8004cb6:	e005      	b.n	8004cc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f96f 	bl	8004f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f980 	bl	8004fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d020      	beq.n	8004d16 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01b      	beq.n	8004d16 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f06f 0208 	mvn.w	r2, #8
 8004ce6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2204      	movs	r2, #4
 8004cec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	f003 0303 	and.w	r3, r3, #3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f957 	bl	8004fb0 <HAL_TIM_IC_CaptureCallback>
 8004d02:	e005      	b.n	8004d10 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f949 	bl	8004f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f95a 	bl	8004fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d020      	beq.n	8004d62 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 0310 	and.w	r3, r3, #16
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d01b      	beq.n	8004d62 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f06f 0210 	mvn.w	r2, #16
 8004d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2208      	movs	r2, #8
 8004d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f931 	bl	8004fb0 <HAL_TIM_IC_CaptureCallback>
 8004d4e:	e005      	b.n	8004d5c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f923 	bl	8004f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f934 	bl	8004fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00c      	beq.n	8004d86 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d007      	beq.n	8004d86 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f06f 0201 	mvn.w	r2, #1
 8004d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f901 	bl	8004f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00c      	beq.n	8004daa <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d007      	beq.n	8004daa <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 faed 	bl	8005384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00c      	beq.n	8004dce <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d007      	beq.n	8004dce <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f905 	bl	8004fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00c      	beq.n	8004df2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d007      	beq.n	8004df2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f06f 0220 	mvn.w	r2, #32
 8004dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fabf 	bl	8005370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004df2:	bf00      	nop
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e04:	2300      	movs	r3, #0
 8004e06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_TIM_ConfigClockSource+0x1c>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e0b4      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x186>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2202      	movs	r2, #2
 8004e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e34:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e3c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e4e:	d03e      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0xd4>
 8004e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e54:	f200 8087 	bhi.w	8004f66 <HAL_TIM_ConfigClockSource+0x16c>
 8004e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e5c:	f000 8086 	beq.w	8004f6c <HAL_TIM_ConfigClockSource+0x172>
 8004e60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e64:	d87f      	bhi.n	8004f66 <HAL_TIM_ConfigClockSource+0x16c>
 8004e66:	2b70      	cmp	r3, #112	@ 0x70
 8004e68:	d01a      	beq.n	8004ea0 <HAL_TIM_ConfigClockSource+0xa6>
 8004e6a:	2b70      	cmp	r3, #112	@ 0x70
 8004e6c:	d87b      	bhi.n	8004f66 <HAL_TIM_ConfigClockSource+0x16c>
 8004e6e:	2b60      	cmp	r3, #96	@ 0x60
 8004e70:	d050      	beq.n	8004f14 <HAL_TIM_ConfigClockSource+0x11a>
 8004e72:	2b60      	cmp	r3, #96	@ 0x60
 8004e74:	d877      	bhi.n	8004f66 <HAL_TIM_ConfigClockSource+0x16c>
 8004e76:	2b50      	cmp	r3, #80	@ 0x50
 8004e78:	d03c      	beq.n	8004ef4 <HAL_TIM_ConfigClockSource+0xfa>
 8004e7a:	2b50      	cmp	r3, #80	@ 0x50
 8004e7c:	d873      	bhi.n	8004f66 <HAL_TIM_ConfigClockSource+0x16c>
 8004e7e:	2b40      	cmp	r3, #64	@ 0x40
 8004e80:	d058      	beq.n	8004f34 <HAL_TIM_ConfigClockSource+0x13a>
 8004e82:	2b40      	cmp	r3, #64	@ 0x40
 8004e84:	d86f      	bhi.n	8004f66 <HAL_TIM_ConfigClockSource+0x16c>
 8004e86:	2b30      	cmp	r3, #48	@ 0x30
 8004e88:	d064      	beq.n	8004f54 <HAL_TIM_ConfigClockSource+0x15a>
 8004e8a:	2b30      	cmp	r3, #48	@ 0x30
 8004e8c:	d86b      	bhi.n	8004f66 <HAL_TIM_ConfigClockSource+0x16c>
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	d060      	beq.n	8004f54 <HAL_TIM_ConfigClockSource+0x15a>
 8004e92:	2b20      	cmp	r3, #32
 8004e94:	d867      	bhi.n	8004f66 <HAL_TIM_ConfigClockSource+0x16c>
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d05c      	beq.n	8004f54 <HAL_TIM_ConfigClockSource+0x15a>
 8004e9a:	2b10      	cmp	r3, #16
 8004e9c:	d05a      	beq.n	8004f54 <HAL_TIM_ConfigClockSource+0x15a>
 8004e9e:	e062      	b.n	8004f66 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004eb0:	f000 f9c2 	bl	8005238 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ec2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	609a      	str	r2, [r3, #8]
      break;
 8004ecc:	e04f      	b.n	8004f6e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ede:	f000 f9ab 	bl	8005238 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ef0:	609a      	str	r2, [r3, #8]
      break;
 8004ef2:	e03c      	b.n	8004f6e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f00:	461a      	mov	r2, r3
 8004f02:	f000 f91f 	bl	8005144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2150      	movs	r1, #80	@ 0x50
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 f978 	bl	8005202 <TIM_ITRx_SetConfig>
      break;
 8004f12:	e02c      	b.n	8004f6e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f20:	461a      	mov	r2, r3
 8004f22:	f000 f93e 	bl	80051a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2160      	movs	r1, #96	@ 0x60
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 f968 	bl	8005202 <TIM_ITRx_SetConfig>
      break;
 8004f32:	e01c      	b.n	8004f6e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f40:	461a      	mov	r2, r3
 8004f42:	f000 f8ff 	bl	8005144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2140      	movs	r1, #64	@ 0x40
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 f958 	bl	8005202 <TIM_ITRx_SetConfig>
      break;
 8004f52:	e00c      	b.n	8004f6e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f000 f94f 	bl	8005202 <TIM_ITRx_SetConfig>
      break;
 8004f64:	e003      	b.n	8004f6e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	73fb      	strb	r3, [r7, #15]
      break;
 8004f6a:	e000      	b.n	8004f6e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a46      	ldr	r2, [pc, #280]	@ (8005118 <TIM_Base_SetConfig+0x12c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d013      	beq.n	800502c <TIM_Base_SetConfig+0x40>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800500a:	d00f      	beq.n	800502c <TIM_Base_SetConfig+0x40>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a43      	ldr	r2, [pc, #268]	@ (800511c <TIM_Base_SetConfig+0x130>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00b      	beq.n	800502c <TIM_Base_SetConfig+0x40>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a42      	ldr	r2, [pc, #264]	@ (8005120 <TIM_Base_SetConfig+0x134>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d007      	beq.n	800502c <TIM_Base_SetConfig+0x40>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a41      	ldr	r2, [pc, #260]	@ (8005124 <TIM_Base_SetConfig+0x138>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d003      	beq.n	800502c <TIM_Base_SetConfig+0x40>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a40      	ldr	r2, [pc, #256]	@ (8005128 <TIM_Base_SetConfig+0x13c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d108      	bne.n	800503e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a35      	ldr	r2, [pc, #212]	@ (8005118 <TIM_Base_SetConfig+0x12c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d02b      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800504c:	d027      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a32      	ldr	r2, [pc, #200]	@ (800511c <TIM_Base_SetConfig+0x130>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d023      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a31      	ldr	r2, [pc, #196]	@ (8005120 <TIM_Base_SetConfig+0x134>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d01f      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a30      	ldr	r2, [pc, #192]	@ (8005124 <TIM_Base_SetConfig+0x138>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d01b      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a2f      	ldr	r2, [pc, #188]	@ (8005128 <TIM_Base_SetConfig+0x13c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d017      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a2e      	ldr	r2, [pc, #184]	@ (800512c <TIM_Base_SetConfig+0x140>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d013      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a2d      	ldr	r2, [pc, #180]	@ (8005130 <TIM_Base_SetConfig+0x144>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00f      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a2c      	ldr	r2, [pc, #176]	@ (8005134 <TIM_Base_SetConfig+0x148>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00b      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a2b      	ldr	r2, [pc, #172]	@ (8005138 <TIM_Base_SetConfig+0x14c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d007      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a2a      	ldr	r2, [pc, #168]	@ (800513c <TIM_Base_SetConfig+0x150>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d003      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a29      	ldr	r2, [pc, #164]	@ (8005140 <TIM_Base_SetConfig+0x154>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d108      	bne.n	80050b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a10      	ldr	r2, [pc, #64]	@ (8005118 <TIM_Base_SetConfig+0x12c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d003      	beq.n	80050e4 <TIM_Base_SetConfig+0xf8>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a12      	ldr	r2, [pc, #72]	@ (8005128 <TIM_Base_SetConfig+0x13c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d103      	bne.n	80050ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d105      	bne.n	800510a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f023 0201 	bic.w	r2, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	611a      	str	r2, [r3, #16]
  }
}
 800510a:	bf00      	nop
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40010000 	.word	0x40010000
 800511c:	40000400 	.word	0x40000400
 8005120:	40000800 	.word	0x40000800
 8005124:	40000c00 	.word	0x40000c00
 8005128:	40010400 	.word	0x40010400
 800512c:	40014000 	.word	0x40014000
 8005130:	40014400 	.word	0x40014400
 8005134:	40014800 	.word	0x40014800
 8005138:	40001800 	.word	0x40001800
 800513c:	40001c00 	.word	0x40001c00
 8005140:	40002000 	.word	0x40002000

08005144 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	f023 0201 	bic.w	r2, r3, #1
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800516e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f023 030a 	bic.w	r3, r3, #10
 8005180:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	621a      	str	r2, [r3, #32]
}
 8005196:	bf00      	nop
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b087      	sub	sp, #28
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	f023 0210 	bic.w	r2, r3, #16
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	031b      	lsls	r3, r3, #12
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	621a      	str	r2, [r3, #32]
}
 80051f6:	bf00      	nop
 80051f8:	371c      	adds	r7, #28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005202:	b480      	push	{r7}
 8005204:	b085      	sub	sp, #20
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005218:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	f043 0307 	orr.w	r3, r3, #7
 8005224:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	609a      	str	r2, [r3, #8]
}
 800522c:	bf00      	nop
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005252:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	021a      	lsls	r2, r3, #8
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	431a      	orrs	r2, r3
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4313      	orrs	r3, r2
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	609a      	str	r2, [r3, #8]
}
 800526c:	bf00      	nop
 800526e:	371c      	adds	r7, #28
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005288:	2b01      	cmp	r3, #1
 800528a:	d101      	bne.n	8005290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800528c:	2302      	movs	r3, #2
 800528e:	e05a      	b.n	8005346 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a21      	ldr	r2, [pc, #132]	@ (8005354 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d022      	beq.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052dc:	d01d      	beq.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005358 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d018      	beq.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a1b      	ldr	r2, [pc, #108]	@ (800535c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d013      	beq.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005360 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00e      	beq.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a18      	ldr	r2, [pc, #96]	@ (8005364 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d009      	beq.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a17      	ldr	r2, [pc, #92]	@ (8005368 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d004      	beq.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a15      	ldr	r2, [pc, #84]	@ (800536c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d10c      	bne.n	8005334 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005320:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	4313      	orrs	r3, r2
 800532a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	40010000 	.word	0x40010000
 8005358:	40000400 	.word	0x40000400
 800535c:	40000800 	.word	0x40000800
 8005360:	40000c00 	.word	0x40000c00
 8005364:	40010400 	.word	0x40010400
 8005368:	40014000 	.word	0x40014000
 800536c:	40001800 	.word	0x40001800

08005370 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005398:	b084      	sub	sp, #16
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	f107 001c 	add.w	r0, r7, #28
 80053a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d123      	bne.n	80053fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80053c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d105      	bne.n	80053ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f001 fae8 	bl	80069c4 <USB_CoreReset>
 80053f4:	4603      	mov	r3, r0
 80053f6:	73fb      	strb	r3, [r7, #15]
 80053f8:	e01b      	b.n	8005432 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f001 fadc 	bl	80069c4 <USB_CoreReset>
 800540c:	4603      	mov	r3, r0
 800540e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005410:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005414:	2b00      	cmp	r3, #0
 8005416:	d106      	bne.n	8005426 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	639a      	str	r2, [r3, #56]	@ 0x38
 8005424:	e005      	b.n	8005432 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800542a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005432:	7fbb      	ldrb	r3, [r7, #30]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d10b      	bne.n	8005450 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f043 0206 	orr.w	r2, r3, #6
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f043 0220 	orr.w	r2, r3, #32
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005450:	7bfb      	ldrb	r3, [r7, #15]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800545c:	b004      	add	sp, #16
 800545e:	4770      	bx	lr

08005460 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	4613      	mov	r3, r2
 800546c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800546e:	79fb      	ldrb	r3, [r7, #7]
 8005470:	2b02      	cmp	r3, #2
 8005472:	d165      	bne.n	8005540 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4a41      	ldr	r2, [pc, #260]	@ (800557c <USB_SetTurnaroundTime+0x11c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d906      	bls.n	800548a <USB_SetTurnaroundTime+0x2a>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4a40      	ldr	r2, [pc, #256]	@ (8005580 <USB_SetTurnaroundTime+0x120>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d202      	bcs.n	800548a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005484:	230f      	movs	r3, #15
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	e062      	b.n	8005550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4a3c      	ldr	r2, [pc, #240]	@ (8005580 <USB_SetTurnaroundTime+0x120>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d306      	bcc.n	80054a0 <USB_SetTurnaroundTime+0x40>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	4a3b      	ldr	r2, [pc, #236]	@ (8005584 <USB_SetTurnaroundTime+0x124>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d202      	bcs.n	80054a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800549a:	230e      	movs	r3, #14
 800549c:	617b      	str	r3, [r7, #20]
 800549e:	e057      	b.n	8005550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4a38      	ldr	r2, [pc, #224]	@ (8005584 <USB_SetTurnaroundTime+0x124>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d306      	bcc.n	80054b6 <USB_SetTurnaroundTime+0x56>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4a37      	ldr	r2, [pc, #220]	@ (8005588 <USB_SetTurnaroundTime+0x128>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d202      	bcs.n	80054b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054b0:	230d      	movs	r3, #13
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	e04c      	b.n	8005550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	4a33      	ldr	r2, [pc, #204]	@ (8005588 <USB_SetTurnaroundTime+0x128>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d306      	bcc.n	80054cc <USB_SetTurnaroundTime+0x6c>
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	4a32      	ldr	r2, [pc, #200]	@ (800558c <USB_SetTurnaroundTime+0x12c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d802      	bhi.n	80054cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80054c6:	230c      	movs	r3, #12
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	e041      	b.n	8005550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4a2f      	ldr	r2, [pc, #188]	@ (800558c <USB_SetTurnaroundTime+0x12c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d906      	bls.n	80054e2 <USB_SetTurnaroundTime+0x82>
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4a2e      	ldr	r2, [pc, #184]	@ (8005590 <USB_SetTurnaroundTime+0x130>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d802      	bhi.n	80054e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054dc:	230b      	movs	r3, #11
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	e036      	b.n	8005550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	4a2a      	ldr	r2, [pc, #168]	@ (8005590 <USB_SetTurnaroundTime+0x130>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d906      	bls.n	80054f8 <USB_SetTurnaroundTime+0x98>
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	4a29      	ldr	r2, [pc, #164]	@ (8005594 <USB_SetTurnaroundTime+0x134>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d802      	bhi.n	80054f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054f2:	230a      	movs	r3, #10
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	e02b      	b.n	8005550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4a26      	ldr	r2, [pc, #152]	@ (8005594 <USB_SetTurnaroundTime+0x134>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d906      	bls.n	800550e <USB_SetTurnaroundTime+0xae>
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4a25      	ldr	r2, [pc, #148]	@ (8005598 <USB_SetTurnaroundTime+0x138>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d202      	bcs.n	800550e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005508:	2309      	movs	r3, #9
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	e020      	b.n	8005550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	4a21      	ldr	r2, [pc, #132]	@ (8005598 <USB_SetTurnaroundTime+0x138>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d306      	bcc.n	8005524 <USB_SetTurnaroundTime+0xc4>
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	4a20      	ldr	r2, [pc, #128]	@ (800559c <USB_SetTurnaroundTime+0x13c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d802      	bhi.n	8005524 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800551e:	2308      	movs	r3, #8
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	e015      	b.n	8005550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4a1d      	ldr	r2, [pc, #116]	@ (800559c <USB_SetTurnaroundTime+0x13c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d906      	bls.n	800553a <USB_SetTurnaroundTime+0xda>
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4a1c      	ldr	r2, [pc, #112]	@ (80055a0 <USB_SetTurnaroundTime+0x140>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d202      	bcs.n	800553a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005534:	2307      	movs	r3, #7
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	e00a      	b.n	8005550 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800553a:	2306      	movs	r3, #6
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	e007      	b.n	8005550 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005540:	79fb      	ldrb	r3, [r7, #7]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d102      	bne.n	800554c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005546:	2309      	movs	r3, #9
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	e001      	b.n	8005550 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800554c:	2309      	movs	r3, #9
 800554e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	029b      	lsls	r3, r3, #10
 8005564:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005568:	431a      	orrs	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	371c      	adds	r7, #28
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	00d8acbf 	.word	0x00d8acbf
 8005580:	00e4e1c0 	.word	0x00e4e1c0
 8005584:	00f42400 	.word	0x00f42400
 8005588:	01067380 	.word	0x01067380
 800558c:	011a499f 	.word	0x011a499f
 8005590:	01312cff 	.word	0x01312cff
 8005594:	014ca43f 	.word	0x014ca43f
 8005598:	016e3600 	.word	0x016e3600
 800559c:	01a6ab1f 	.word	0x01a6ab1f
 80055a0:	01e84800 	.word	0x01e84800

080055a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f043 0201 	orr.w	r2, r3, #1
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f023 0201 	bic.w	r2, r3, #1
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	460b      	mov	r3, r1
 80055f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005604:	78fb      	ldrb	r3, [r7, #3]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d115      	bne.n	8005636 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005616:	200a      	movs	r0, #10
 8005618:	f7fb fe3e 	bl	8001298 <HAL_Delay>
      ms += 10U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	330a      	adds	r3, #10
 8005620:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f001 f93f 	bl	80068a6 <USB_GetMode>
 8005628:	4603      	mov	r3, r0
 800562a:	2b01      	cmp	r3, #1
 800562c:	d01e      	beq.n	800566c <USB_SetCurrentMode+0x84>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2bc7      	cmp	r3, #199	@ 0xc7
 8005632:	d9f0      	bls.n	8005616 <USB_SetCurrentMode+0x2e>
 8005634:	e01a      	b.n	800566c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d115      	bne.n	8005668 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005648:	200a      	movs	r0, #10
 800564a:	f7fb fe25 	bl	8001298 <HAL_Delay>
      ms += 10U;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	330a      	adds	r3, #10
 8005652:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f001 f926 	bl	80068a6 <USB_GetMode>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d005      	beq.n	800566c <USB_SetCurrentMode+0x84>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2bc7      	cmp	r3, #199	@ 0xc7
 8005664:	d9f0      	bls.n	8005648 <USB_SetCurrentMode+0x60>
 8005666:	e001      	b.n	800566c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e005      	b.n	8005678 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005670:	d101      	bne.n	8005676 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e000      	b.n	8005678 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005680:	b084      	sub	sp, #16
 8005682:	b580      	push	{r7, lr}
 8005684:	b086      	sub	sp, #24
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800568e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800569a:	2300      	movs	r3, #0
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	e009      	b.n	80056b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	3340      	adds	r3, #64	@ 0x40
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	2200      	movs	r2, #0
 80056ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	3301      	adds	r3, #1
 80056b2:	613b      	str	r3, [r7, #16]
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	2b0e      	cmp	r3, #14
 80056b8:	d9f2      	bls.n	80056a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d11c      	bne.n	80056fc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056d0:	f043 0302 	orr.w	r3, r3, #2
 80056d4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056da:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80056fa:	e00b      	b.n	8005714 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005700:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800571a:	461a      	mov	r2, r3
 800571c:	2300      	movs	r3, #0
 800571e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005720:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005724:	2b01      	cmp	r3, #1
 8005726:	d10d      	bne.n	8005744 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005728:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800572c:	2b00      	cmp	r3, #0
 800572e:	d104      	bne.n	800573a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005730:	2100      	movs	r1, #0
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f968 	bl	8005a08 <USB_SetDevSpeed>
 8005738:	e008      	b.n	800574c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800573a:	2101      	movs	r1, #1
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f963 	bl	8005a08 <USB_SetDevSpeed>
 8005742:	e003      	b.n	800574c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005744:	2103      	movs	r1, #3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f95e 	bl	8005a08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800574c:	2110      	movs	r1, #16
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f8fa 	bl	8005948 <USB_FlushTxFifo>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f924 	bl	80059ac <USB_FlushRxFifo>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005774:	461a      	mov	r2, r3
 8005776:	2300      	movs	r3, #0
 8005778:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005780:	461a      	mov	r2, r3
 8005782:	2300      	movs	r3, #0
 8005784:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800578c:	461a      	mov	r2, r3
 800578e:	2300      	movs	r3, #0
 8005790:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005792:	2300      	movs	r3, #0
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	e043      	b.n	8005820 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057ae:	d118      	bne.n	80057e2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c2:	461a      	mov	r2, r3
 80057c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	e013      	b.n	80057f4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057d8:	461a      	mov	r2, r3
 80057da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	e008      	b.n	80057f4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ee:	461a      	mov	r2, r3
 80057f0:	2300      	movs	r3, #0
 80057f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005800:	461a      	mov	r2, r3
 8005802:	2300      	movs	r3, #0
 8005804:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005812:	461a      	mov	r2, r3
 8005814:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005818:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	3301      	adds	r3, #1
 800581e:	613b      	str	r3, [r7, #16]
 8005820:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005824:	461a      	mov	r2, r3
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	4293      	cmp	r3, r2
 800582a:	d3b5      	bcc.n	8005798 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800582c:	2300      	movs	r3, #0
 800582e:	613b      	str	r3, [r7, #16]
 8005830:	e043      	b.n	80058ba <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005844:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005848:	d118      	bne.n	800587c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10a      	bne.n	8005866 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800585c:	461a      	mov	r2, r3
 800585e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	e013      	b.n	800588e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005872:	461a      	mov	r2, r3
 8005874:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	e008      	b.n	800588e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005888:	461a      	mov	r2, r3
 800588a:	2300      	movs	r3, #0
 800588c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800589a:	461a      	mov	r2, r3
 800589c:	2300      	movs	r3, #0
 800589e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ac:	461a      	mov	r2, r3
 80058ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	3301      	adds	r3, #1
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80058be:	461a      	mov	r2, r3
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d3b5      	bcc.n	8005832 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058d8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80058e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d105      	bne.n	80058fc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	f043 0210 	orr.w	r2, r3, #16
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699a      	ldr	r2, [r3, #24]
 8005900:	4b10      	ldr	r3, [pc, #64]	@ (8005944 <USB_DevInit+0x2c4>)
 8005902:	4313      	orrs	r3, r2
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005908:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800590c:	2b00      	cmp	r3, #0
 800590e:	d005      	beq.n	800591c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	f043 0208 	orr.w	r2, r3, #8
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800591c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005920:	2b01      	cmp	r3, #1
 8005922:	d107      	bne.n	8005934 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800592c:	f043 0304 	orr.w	r3, r3, #4
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005934:	7dfb      	ldrb	r3, [r7, #23]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005940:	b004      	add	sp, #16
 8005942:	4770      	bx	lr
 8005944:	803c3800 	.word	0x803c3800

08005948 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3301      	adds	r3, #1
 800595a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005962:	d901      	bls.n	8005968 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e01b      	b.n	80059a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	daf2      	bge.n	8005956 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	019b      	lsls	r3, r3, #6
 8005978:	f043 0220 	orr.w	r2, r3, #32
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3301      	adds	r3, #1
 8005984:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800598c:	d901      	bls.n	8005992 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e006      	b.n	80059a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b20      	cmp	r3, #32
 800599c:	d0f0      	beq.n	8005980 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3301      	adds	r3, #1
 80059bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059c4:	d901      	bls.n	80059ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e018      	b.n	80059fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	daf2      	bge.n	80059b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2210      	movs	r2, #16
 80059da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3301      	adds	r3, #1
 80059e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059e8:	d901      	bls.n	80059ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e006      	b.n	80059fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f003 0310 	and.w	r3, r3, #16
 80059f6:	2b10      	cmp	r3, #16
 80059f8:	d0f0      	beq.n	80059dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	68f9      	ldr	r1, [r7, #12]
 8005a24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b087      	sub	sp, #28
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 0306 	and.w	r3, r3, #6
 8005a52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d102      	bne.n	8005a60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	75fb      	strb	r3, [r7, #23]
 8005a5e:	e00a      	b.n	8005a76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d002      	beq.n	8005a6c <USB_GetDevSpeed+0x32>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b06      	cmp	r3, #6
 8005a6a:	d102      	bne.n	8005a72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	75fb      	strb	r3, [r7, #23]
 8005a70:	e001      	b.n	8005a76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a72:	230f      	movs	r3, #15
 8005a74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	371c      	adds	r7, #28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	785b      	ldrb	r3, [r3, #1]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d13a      	bne.n	8005b16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aa6:	69da      	ldr	r2, [r3, #28]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	f003 030f 	and.w	r3, r3, #15
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	68f9      	ldr	r1, [r7, #12]
 8005aba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d155      	bne.n	8005b84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	791b      	ldrb	r3, [r3, #4]
 8005af2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005af4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	059b      	lsls	r3, r3, #22
 8005afa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005afc:	4313      	orrs	r3, r2
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	0151      	lsls	r1, r2, #5
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	440a      	add	r2, r1
 8005b06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	e036      	b.n	8005b84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b1c:	69da      	ldr	r2, [r3, #28]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	2101      	movs	r1, #1
 8005b28:	fa01 f303 	lsl.w	r3, r1, r3
 8005b2c:	041b      	lsls	r3, r3, #16
 8005b2e:	68f9      	ldr	r1, [r7, #12]
 8005b30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b34:	4313      	orrs	r3, r2
 8005b36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d11a      	bne.n	8005b84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	791b      	ldrb	r3, [r3, #4]
 8005b68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b6a:	430b      	orrs	r3, r1
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	0151      	lsls	r1, r2, #5
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	440a      	add	r2, r1
 8005b76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
	...

08005b94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d161      	bne.n	8005c74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bc6:	d11f      	bne.n	8005c08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005be2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005be6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	0151      	lsls	r1, r2, #5
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	440a      	add	r2, r1
 8005bfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	f003 030f 	and.w	r3, r3, #15
 8005c18:	2101      	movs	r1, #1
 8005c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	43db      	mvns	r3, r3
 8005c22:	68f9      	ldr	r1, [r7, #12]
 8005c24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c28:	4013      	ands	r3, r2
 8005c2a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c32:	69da      	ldr	r2, [r3, #28]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	f003 030f 	and.w	r3, r3, #15
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	43db      	mvns	r3, r3
 8005c46:	68f9      	ldr	r1, [r7, #12]
 8005c48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	0159      	lsls	r1, r3, #5
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	440b      	add	r3, r1
 8005c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4b35      	ldr	r3, [pc, #212]	@ (8005d44 <USB_DeactivateEndpoint+0x1b0>)
 8005c6e:	4013      	ands	r3, r2
 8005c70:	600b      	str	r3, [r1, #0]
 8005c72:	e060      	b.n	8005d36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c8a:	d11f      	bne.n	8005ccc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	0151      	lsls	r1, r2, #5
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	440a      	add	r2, r1
 8005ca2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ca6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005caa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	0151      	lsls	r1, r2, #5
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	440a      	add	r2, r1
 8005cc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cc6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005cca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	f003 030f 	and.w	r3, r3, #15
 8005cdc:	2101      	movs	r1, #1
 8005cde:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce2:	041b      	lsls	r3, r3, #16
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	68f9      	ldr	r1, [r7, #12]
 8005ce8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cec:	4013      	ands	r3, r2
 8005cee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cf6:	69da      	ldr	r2, [r3, #28]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	f003 030f 	and.w	r3, r3, #15
 8005d00:	2101      	movs	r1, #1
 8005d02:	fa01 f303 	lsl.w	r3, r1, r3
 8005d06:	041b      	lsls	r3, r3, #16
 8005d08:	43db      	mvns	r3, r3
 8005d0a:	68f9      	ldr	r1, [r7, #12]
 8005d0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d10:	4013      	ands	r3, r2
 8005d12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	0159      	lsls	r1, r3, #5
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	440b      	add	r3, r1
 8005d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4b05      	ldr	r3, [pc, #20]	@ (8005d48 <USB_DeactivateEndpoint+0x1b4>)
 8005d32:	4013      	ands	r3, r2
 8005d34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	ec337800 	.word	0xec337800
 8005d48:	eff37800 	.word	0xeff37800

08005d4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08a      	sub	sp, #40	@ 0x28
 8005d50:	af02      	add	r7, sp, #8
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	4613      	mov	r3, r2
 8005d58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	785b      	ldrb	r3, [r3, #1]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	f040 817f 	bne.w	800606c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d132      	bne.n	8005ddc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	0151      	lsls	r1, r2, #5
 8005d88:	69fa      	ldr	r2, [r7, #28]
 8005d8a:	440a      	add	r2, r1
 8005d8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d90:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d94:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	0151      	lsls	r1, r2, #5
 8005dac:	69fa      	ldr	r2, [r7, #28]
 8005dae:	440a      	add	r2, r1
 8005db0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005db4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005db8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	0151      	lsls	r1, r2, #5
 8005dcc:	69fa      	ldr	r2, [r7, #28]
 8005dce:	440a      	add	r2, r1
 8005dd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dd4:	0cdb      	lsrs	r3, r3, #19
 8005dd6:	04db      	lsls	r3, r3, #19
 8005dd8:	6113      	str	r3, [r2, #16]
 8005dda:	e097      	b.n	8005f0c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	0151      	lsls	r1, r2, #5
 8005dee:	69fa      	ldr	r2, [r7, #28]
 8005df0:	440a      	add	r2, r1
 8005df2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005df6:	0cdb      	lsrs	r3, r3, #19
 8005df8:	04db      	lsls	r3, r3, #19
 8005dfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	0151      	lsls	r1, r2, #5
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	440a      	add	r2, r1
 8005e12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e16:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005e1a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005e1e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d11a      	bne.n	8005e5c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	691a      	ldr	r2, [r3, #16]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d903      	bls.n	8005e3a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	689a      	ldr	r2, [r3, #8]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	0151      	lsls	r1, r2, #5
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	440a      	add	r2, r1
 8005e50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e58:	6113      	str	r3, [r2, #16]
 8005e5a:	e044      	b.n	8005ee6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	691a      	ldr	r2, [r3, #16]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	4413      	add	r3, r2
 8005e66:	1e5a      	subs	r2, r3, #1
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e70:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e7e:	691a      	ldr	r2, [r3, #16]
 8005e80:	8afb      	ldrh	r3, [r7, #22]
 8005e82:	04d9      	lsls	r1, r3, #19
 8005e84:	4ba4      	ldr	r3, [pc, #656]	@ (8006118 <USB_EPStartXfer+0x3cc>)
 8005e86:	400b      	ands	r3, r1
 8005e88:	69b9      	ldr	r1, [r7, #24]
 8005e8a:	0148      	lsls	r0, r1, #5
 8005e8c:	69f9      	ldr	r1, [r7, #28]
 8005e8e:	4401      	add	r1, r0
 8005e90:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005e94:	4313      	orrs	r3, r2
 8005e96:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	791b      	ldrb	r3, [r3, #4]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d122      	bne.n	8005ee6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	0151      	lsls	r1, r2, #5
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	440a      	add	r2, r1
 8005eb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eba:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005ebe:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ecc:	691a      	ldr	r2, [r3, #16]
 8005ece:	8afb      	ldrh	r3, [r7, #22]
 8005ed0:	075b      	lsls	r3, r3, #29
 8005ed2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005ed6:	69b9      	ldr	r1, [r7, #24]
 8005ed8:	0148      	lsls	r0, r1, #5
 8005eda:	69f9      	ldr	r1, [r7, #28]
 8005edc:	4401      	add	r1, r0
 8005ede:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef2:	691a      	ldr	r2, [r3, #16]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005efc:	69b9      	ldr	r1, [r7, #24]
 8005efe:	0148      	lsls	r0, r1, #5
 8005f00:	69f9      	ldr	r1, [r7, #28]
 8005f02:	4401      	add	r1, r0
 8005f04:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f0c:	79fb      	ldrb	r3, [r7, #7]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d14b      	bne.n	8005faa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d009      	beq.n	8005f2e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f26:	461a      	mov	r2, r3
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	791b      	ldrb	r3, [r3, #4]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d128      	bne.n	8005f88 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d110      	bne.n	8005f68 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	69fa      	ldr	r2, [r7, #28]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f60:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	e00f      	b.n	8005f88 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	0151      	lsls	r1, r2, #5
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f86:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	0151      	lsls	r1, r2, #5
 8005f9a:	69fa      	ldr	r2, [r7, #28]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fa2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	e166      	b.n	8006278 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	0151      	lsls	r1, r2, #5
 8005fbc:	69fa      	ldr	r2, [r7, #28]
 8005fbe:	440a      	add	r2, r1
 8005fc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fc4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005fc8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	791b      	ldrb	r3, [r3, #4]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d015      	beq.n	8005ffe <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f000 814e 	beq.w	8006278 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fe2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	f003 030f 	and.w	r3, r3, #15
 8005fec:	2101      	movs	r1, #1
 8005fee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff2:	69f9      	ldr	r1, [r7, #28]
 8005ff4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	634b      	str	r3, [r1, #52]	@ 0x34
 8005ffc:	e13c      	b.n	8006278 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800600a:	2b00      	cmp	r3, #0
 800600c:	d110      	bne.n	8006030 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	015a      	lsls	r2, r3, #5
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	4413      	add	r3, r2
 8006016:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	0151      	lsls	r1, r2, #5
 8006020:	69fa      	ldr	r2, [r7, #28]
 8006022:	440a      	add	r2, r1
 8006024:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006028:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	e00f      	b.n	8006050 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	0151      	lsls	r1, r2, #5
 8006042:	69fa      	ldr	r2, [r7, #28]
 8006044:	440a      	add	r2, r1
 8006046:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800604a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800604e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	68d9      	ldr	r1, [r3, #12]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	781a      	ldrb	r2, [r3, #0]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	b298      	uxth	r0, r3
 800605e:	79fb      	ldrb	r3, [r7, #7]
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	4603      	mov	r3, r0
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f9b9 	bl	80063dc <USB_WritePacket>
 800606a:	e105      	b.n	8006278 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	69fa      	ldr	r2, [r7, #28]
 8006080:	440a      	add	r2, r1
 8006082:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006086:	0cdb      	lsrs	r3, r3, #19
 8006088:	04db      	lsls	r3, r3, #19
 800608a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	0151      	lsls	r1, r2, #5
 800609e:	69fa      	ldr	r2, [r7, #28]
 80060a0:	440a      	add	r2, r1
 80060a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060a6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060aa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060ae:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d132      	bne.n	800611c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060e4:	69b9      	ldr	r1, [r7, #24]
 80060e6:	0148      	lsls	r0, r1, #5
 80060e8:	69f9      	ldr	r1, [r7, #28]
 80060ea:	4401      	add	r1, r0
 80060ec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80060f0:	4313      	orrs	r3, r2
 80060f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	0151      	lsls	r1, r2, #5
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	440a      	add	r2, r1
 800610a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800610e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006112:	6113      	str	r3, [r2, #16]
 8006114:	e062      	b.n	80061dc <USB_EPStartXfer+0x490>
 8006116:	bf00      	nop
 8006118:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d123      	bne.n	800616c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006130:	691a      	ldr	r2, [r3, #16]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800613a:	69b9      	ldr	r1, [r7, #24]
 800613c:	0148      	lsls	r0, r1, #5
 800613e:	69f9      	ldr	r1, [r7, #28]
 8006140:	4401      	add	r1, r0
 8006142:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006146:	4313      	orrs	r3, r2
 8006148:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	0151      	lsls	r1, r2, #5
 800615c:	69fa      	ldr	r2, [r7, #28]
 800615e:	440a      	add	r2, r1
 8006160:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006164:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006168:	6113      	str	r3, [r2, #16]
 800616a:	e037      	b.n	80061dc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	4413      	add	r3, r2
 8006176:	1e5a      	subs	r2, r3, #1
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006180:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	8afa      	ldrh	r2, [r7, #22]
 8006188:	fb03 f202 	mul.w	r2, r3, r2
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800619c:	691a      	ldr	r2, [r3, #16]
 800619e:	8afb      	ldrh	r3, [r7, #22]
 80061a0:	04d9      	lsls	r1, r3, #19
 80061a2:	4b38      	ldr	r3, [pc, #224]	@ (8006284 <USB_EPStartXfer+0x538>)
 80061a4:	400b      	ands	r3, r1
 80061a6:	69b9      	ldr	r1, [r7, #24]
 80061a8:	0148      	lsls	r0, r1, #5
 80061aa:	69f9      	ldr	r1, [r7, #28]
 80061ac:	4401      	add	r1, r0
 80061ae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80061b2:	4313      	orrs	r3, r2
 80061b4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061cc:	69b9      	ldr	r1, [r7, #24]
 80061ce:	0148      	lsls	r0, r1, #5
 80061d0:	69f9      	ldr	r1, [r7, #28]
 80061d2:	4401      	add	r1, r0
 80061d4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80061d8:	4313      	orrs	r3, r2
 80061da:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80061dc:	79fb      	ldrb	r3, [r7, #7]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d10d      	bne.n	80061fe <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d009      	beq.n	80061fe <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	68d9      	ldr	r1, [r3, #12]
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061fa:	460a      	mov	r2, r1
 80061fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	791b      	ldrb	r3, [r3, #4]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d128      	bne.n	8006258 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006212:	2b00      	cmp	r3, #0
 8006214:	d110      	bne.n	8006238 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	4413      	add	r3, r2
 800621e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	0151      	lsls	r1, r2, #5
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	440a      	add	r2, r1
 800622c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006230:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	e00f      	b.n	8006258 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	0151      	lsls	r1, r2, #5
 800624a:	69fa      	ldr	r2, [r7, #28]
 800624c:	440a      	add	r2, r1
 800624e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006256:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	0151      	lsls	r1, r2, #5
 800626a:	69fa      	ldr	r2, [r7, #28]
 800626c:	440a      	add	r2, r1
 800626e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006272:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006276:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3720      	adds	r7, #32
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	1ff80000 	.word	0x1ff80000

08006288 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	785b      	ldrb	r3, [r3, #1]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d14a      	bne.n	800633c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062be:	f040 8086 	bne.w	80063ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	7812      	ldrb	r2, [r2, #0]
 80062d6:	0151      	lsls	r1, r2, #5
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	440a      	add	r2, r1
 80062dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80062e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	7812      	ldrb	r2, [r2, #0]
 80062fa:	0151      	lsls	r1, r2, #5
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	440a      	add	r2, r1
 8006300:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006304:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006308:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	3301      	adds	r3, #1
 800630e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006316:	4293      	cmp	r3, r2
 8006318:	d902      	bls.n	8006320 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	75fb      	strb	r3, [r7, #23]
          break;
 800631e:	e056      	b.n	80063ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006334:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006338:	d0e7      	beq.n	800630a <USB_EPStopXfer+0x82>
 800633a:	e048      	b.n	80063ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006350:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006354:	d13b      	bne.n	80063ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	7812      	ldrb	r2, [r2, #0]
 800636a:	0151      	lsls	r1, r2, #5
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	440a      	add	r2, r1
 8006370:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006374:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006378:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	7812      	ldrb	r2, [r2, #0]
 800638e:	0151      	lsls	r1, r2, #5
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	440a      	add	r2, r1
 8006394:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006398:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800639c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3301      	adds	r3, #1
 80063a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d902      	bls.n	80063b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	75fb      	strb	r3, [r7, #23]
          break;
 80063b2:	e00c      	b.n	80063ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063cc:	d0e7      	beq.n	800639e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063dc:	b480      	push	{r7}
 80063de:	b089      	sub	sp, #36	@ 0x24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	4611      	mov	r1, r2
 80063e8:	461a      	mov	r2, r3
 80063ea:	460b      	mov	r3, r1
 80063ec:	71fb      	strb	r3, [r7, #7]
 80063ee:	4613      	mov	r3, r2
 80063f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d123      	bne.n	800644a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006402:	88bb      	ldrh	r3, [r7, #4]
 8006404:	3303      	adds	r3, #3
 8006406:	089b      	lsrs	r3, r3, #2
 8006408:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800640a:	2300      	movs	r3, #0
 800640c:	61bb      	str	r3, [r7, #24]
 800640e:	e018      	b.n	8006442 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006410:	79fb      	ldrb	r3, [r7, #7]
 8006412:	031a      	lsls	r2, r3, #12
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	4413      	add	r3, r2
 8006418:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800641c:	461a      	mov	r2, r3
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	3301      	adds	r3, #1
 8006428:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	3301      	adds	r3, #1
 800642e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	3301      	adds	r3, #1
 8006434:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	3301      	adds	r3, #1
 800643a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	3301      	adds	r3, #1
 8006440:	61bb      	str	r3, [r7, #24]
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	429a      	cmp	r2, r3
 8006448:	d3e2      	bcc.n	8006410 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3724      	adds	r7, #36	@ 0x24
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006458:	b480      	push	{r7}
 800645a:	b08b      	sub	sp, #44	@ 0x2c
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	4613      	mov	r3, r2
 8006464:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800646e:	88fb      	ldrh	r3, [r7, #6]
 8006470:	089b      	lsrs	r3, r3, #2
 8006472:	b29b      	uxth	r3, r3
 8006474:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	f003 0303 	and.w	r3, r3, #3
 800647c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800647e:	2300      	movs	r3, #0
 8006480:	623b      	str	r3, [r7, #32]
 8006482:	e014      	b.n	80064ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006492:	3301      	adds	r3, #1
 8006494:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	3301      	adds	r3, #1
 800649a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800649c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649e:	3301      	adds	r3, #1
 80064a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80064a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a4:	3301      	adds	r3, #1
 80064a6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	3301      	adds	r3, #1
 80064ac:	623b      	str	r3, [r7, #32]
 80064ae:	6a3a      	ldr	r2, [r7, #32]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d3e6      	bcc.n	8006484 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064b6:	8bfb      	ldrh	r3, [r7, #30]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01e      	beq.n	80064fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064c6:	461a      	mov	r2, r3
 80064c8:	f107 0310 	add.w	r3, r7, #16
 80064cc:	6812      	ldr	r2, [r2, #0]
 80064ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	fa22 f303 	lsr.w	r3, r2, r3
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	701a      	strb	r2, [r3, #0]
      i++;
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	3301      	adds	r3, #1
 80064e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80064e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ea:	3301      	adds	r3, #1
 80064ec:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80064ee:	8bfb      	ldrh	r3, [r7, #30]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064f4:	8bfb      	ldrh	r3, [r7, #30]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1ea      	bne.n	80064d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	372c      	adds	r7, #44	@ 0x2c
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	785b      	ldrb	r3, [r3, #1]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d12c      	bne.n	800657e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	db12      	blt.n	800655c <USB_EPSetStall+0x54>
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00f      	beq.n	800655c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	0151      	lsls	r1, r2, #5
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	440a      	add	r2, r1
 8006552:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006556:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800655a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	0151      	lsls	r1, r2, #5
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	440a      	add	r2, r1
 8006572:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006576:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	e02b      	b.n	80065d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	db12      	blt.n	80065b6 <USB_EPSetStall+0xae>
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00f      	beq.n	80065b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	0151      	lsls	r1, r2, #5
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	440a      	add	r2, r1
 80065ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80065b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	0151      	lsls	r1, r2, #5
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	440a      	add	r2, r1
 80065cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80065d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	785b      	ldrb	r3, [r3, #1]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d128      	bne.n	8006652 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	0151      	lsls	r1, r2, #5
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	440a      	add	r2, r1
 8006616:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800661a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800661e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	791b      	ldrb	r3, [r3, #4]
 8006624:	2b03      	cmp	r3, #3
 8006626:	d003      	beq.n	8006630 <USB_EPClearStall+0x4c>
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	791b      	ldrb	r3, [r3, #4]
 800662c:	2b02      	cmp	r3, #2
 800662e:	d138      	bne.n	80066a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	0151      	lsls	r1, r2, #5
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	440a      	add	r2, r1
 8006646:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800664a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800664e:	6013      	str	r3, [r2, #0]
 8006650:	e027      	b.n	80066a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	4413      	add	r3, r2
 800665a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	0151      	lsls	r1, r2, #5
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	440a      	add	r2, r1
 8006668:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800666c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006670:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	791b      	ldrb	r3, [r3, #4]
 8006676:	2b03      	cmp	r3, #3
 8006678:	d003      	beq.n	8006682 <USB_EPClearStall+0x9e>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	791b      	ldrb	r3, [r3, #4]
 800667e:	2b02      	cmp	r3, #2
 8006680:	d10f      	bne.n	80066a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	0151      	lsls	r1, r2, #5
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	440a      	add	r2, r1
 8006698:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800669c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	460b      	mov	r3, r1
 80066ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066ce:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80066d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	011b      	lsls	r3, r3, #4
 80066e0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80066e4:	68f9      	ldr	r1, [r7, #12]
 80066e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066ea:	4313      	orrs	r3, r2
 80066ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006716:	f023 0303 	bic.w	r3, r3, #3
 800671a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800672a:	f023 0302 	bic.w	r3, r3, #2
 800672e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006758:	f023 0303 	bic.w	r3, r3, #3
 800675c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800676c:	f043 0302 	orr.w	r3, r3, #2
 8006770:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	4013      	ands	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006798:	68fb      	ldr	r3, [r7, #12]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b085      	sub	sp, #20
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	4013      	ands	r3, r2
 80067c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	0c1b      	lsrs	r3, r3, #16
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067da:	b480      	push	{r7}
 80067dc:	b085      	sub	sp, #20
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	4013      	ands	r3, r2
 80067fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	b29b      	uxth	r3, r3
}
 8006802:	4618      	mov	r0, r3
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800680e:	b480      	push	{r7}
 8006810:	b085      	sub	sp, #20
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	460b      	mov	r3, r1
 8006818:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800681e:	78fb      	ldrb	r3, [r7, #3]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	4013      	ands	r3, r2
 800683a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800683c:	68bb      	ldr	r3, [r7, #8]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800684a:	b480      	push	{r7}
 800684c:	b087      	sub	sp, #28
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	460b      	mov	r3, r1
 8006854:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800686a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800686c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800686e:	78fb      	ldrb	r3, [r7, #3]
 8006870:	f003 030f 	and.w	r3, r3, #15
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	fa22 f303 	lsr.w	r3, r2, r3
 800687a:	01db      	lsls	r3, r3, #7
 800687c:	b2db      	uxtb	r3, r3
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	4313      	orrs	r3, r2
 8006882:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006884:	78fb      	ldrb	r3, [r7, #3]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4013      	ands	r3, r2
 8006896:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006898:	68bb      	ldr	r3, [r7, #8]
}
 800689a:	4618      	mov	r0, r3
 800689c:	371c      	adds	r7, #28
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	f003 0301 	and.w	r3, r3, #1
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b085      	sub	sp, #20
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068dc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80068e0:	f023 0307 	bic.w	r3, r3, #7
 80068e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	460b      	mov	r3, r1
 8006912:	607a      	str	r2, [r7, #4]
 8006914:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	333c      	adds	r3, #60	@ 0x3c
 800691e:	3304      	adds	r3, #4
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	4a26      	ldr	r2, [pc, #152]	@ (80069c0 <USB_EP0_OutStart+0xb8>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d90a      	bls.n	8006942 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006938:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800693c:	d101      	bne.n	8006942 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	e037      	b.n	80069b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006948:	461a      	mov	r2, r3
 800694a:	2300      	movs	r3, #0
 800694c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800695c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006960:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006970:	f043 0318 	orr.w	r3, r3, #24
 8006974:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006984:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006988:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800698a:	7afb      	ldrb	r3, [r7, #11]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d10f      	bne.n	80069b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006996:	461a      	mov	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069aa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80069ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	371c      	adds	r7, #28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	4f54300a 	.word	0x4f54300a

080069c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	3301      	adds	r3, #1
 80069d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069dc:	d901      	bls.n	80069e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e01b      	b.n	8006a1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	daf2      	bge.n	80069d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f043 0201 	orr.w	r2, r3, #1
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3301      	adds	r3, #1
 80069fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a06:	d901      	bls.n	8006a0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e006      	b.n	8006a1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d0f0      	beq.n	80069fa <USB_CoreReset+0x36>

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <USBD_AUDIO_Init>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b084      	sub	sp, #16
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
 8006a2e:	460b      	mov	r3, r1
 8006a30:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8006a32:	f643 5010 	movw	r0, #15632	@ 0x3d10
 8006a36:	f002 faf9 	bl	800902c <USBD_static_malloc>
 8006a3a:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d105      	bne.n	8006a4e <USBD_AUDIO_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e029      	b.n	8006aa2 <USBD_AUDIO_Init+0x7c>
  }

  /* Khởi tạo giá trị mặc định cho buffer */
  haudio->in_buffer_half = 0;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2cca 	strb.w	r2, [r3, #3274]	@ 0xcca
  memset(haudio->in_buffer, 0, sizeof(haudio->in_buffer));
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 8006a60:	330a      	adds	r3, #10
 8006a62:	22c0      	movs	r2, #192	@ 0xc0
 8006a64:	2100      	movs	r1, #0
 8006a66:	4618      	mov	r0, r3
 8006a68:	f002 fb24 	bl	80090b4 <memset>

  pdev->pClassData = (void *)haudio;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, AUDIO_IN_EP, USBD_EP_TYPE_ISOC, AUDIO_IN_PACKET);
 8006a74:	2360      	movs	r3, #96	@ 0x60
 8006a76:	2201      	movs	r2, #1
 8006a78:	2181      	movs	r1, #129	@ 0x81
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f002 f993 	bl	8008da6 <USBD_LL_OpenEP>
  pdev->ep_in[AUDIO_IN_EP & 0xFU].is_used = 1U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Chuẩn bị gửi dữ liệu đầu tiên */
  USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 8006a86:	2181      	movs	r1, #129	@ 0x81
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f002 f9d1 	bl	8008e30 <USBD_LL_FlushEP>
  USBD_LL_Transmit(pdev, AUDIO_IN_EP, (uint8_t *)haudio->in_buffer, AUDIO_IN_PACKET);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f503 5270 	add.w	r2, r3, #15360	@ 0x3c00
 8006a94:	320a      	adds	r2, #10
 8006a96:	2360      	movs	r3, #96	@ 0x60
 8006a98:	2181      	movs	r1, #129	@ 0x81
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f002 fa70 	bl	8008f80 <USBD_LL_Transmit>

  return (uint8_t)USBD_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <USBD_AUDIO_DeInit>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b082      	sub	sp, #8
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f002 f99a 	bl	8008df2 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = 0U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f8a3 217a 	strh.w	r2, [r3, #378]	@ 0x17a

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00f      	beq.n	8006af8 <USBD_AUDIO_DeInit+0x4e>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006aea:	4618      	mov	r0, r3
 8006aec:	f002 faac 	bl	8009048 <USBD_static_free>
    pdev->pClassData = NULL;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <USBD_AUDIO_Setup>:
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	32b0      	adds	r2, #176	@ 0xb0
 8006b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b24:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d101      	bne.n	8006b30 <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e0c1      	b.n	8006cb4 <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01a      	beq.n	8006b72 <USBD_AUDIO_Setup+0x6e>
 8006b3c:	2b20      	cmp	r3, #32
 8006b3e:	f040 80b1 	bne.w	8006ca4 <USBD_AUDIO_Setup+0x1a0>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	785b      	ldrb	r3, [r3, #1]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d006      	beq.n	8006b58 <USBD_AUDIO_Setup+0x54>
 8006b4a:	2b81      	cmp	r3, #129	@ 0x81
 8006b4c:	d109      	bne.n	8006b62 <USBD_AUDIO_Setup+0x5e>
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fa2d 	bl	8006fb0 <AUDIO_REQ_GetCurrent>
      break;
 8006b56:	e00b      	b.n	8006b70 <USBD_AUDIO_Setup+0x6c>

    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fa54 	bl	8007008 <AUDIO_REQ_SetCurrent>
      break;
 8006b60:	e006      	b.n	8006b70 <USBD_AUDIO_Setup+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f001 fcbc 	bl	80084e2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b6e:	bf00      	nop
    }
    break;
 8006b70:	e09f      	b.n	8006cb2 <USBD_AUDIO_Setup+0x1ae>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	785b      	ldrb	r3, [r3, #1]
 8006b76:	2b0b      	cmp	r3, #11
 8006b78:	f200 8089 	bhi.w	8006c8e <USBD_AUDIO_Setup+0x18a>
 8006b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b84 <USBD_AUDIO_Setup+0x80>)
 8006b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b82:	bf00      	nop
 8006b84:	08006bb5 	.word	0x08006bb5
 8006b88:	08006c9d 	.word	0x08006c9d
 8006b8c:	08006c8f 	.word	0x08006c8f
 8006b90:	08006c8f 	.word	0x08006c8f
 8006b94:	08006c8f 	.word	0x08006c8f
 8006b98:	08006c8f 	.word	0x08006c8f
 8006b9c:	08006bdf 	.word	0x08006bdf
 8006ba0:	08006c8f 	.word	0x08006c8f
 8006ba4:	08006c8f 	.word	0x08006c8f
 8006ba8:	08006c8f 	.word	0x08006c8f
 8006bac:	08006c27 	.word	0x08006c27
 8006bb0:	08006c4f 	.word	0x08006c4f
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b03      	cmp	r3, #3
 8006bbe:	d107      	bne.n	8006bd0 <USBD_AUDIO_Setup+0xcc>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006bc0:	f107 0308 	add.w	r3, r7, #8
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f001 fd07 	bl	80085dc <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006bce:	e068      	b.n	8006ca2 <USBD_AUDIO_Setup+0x19e>
        USBD_CtlError(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f001 fc85 	bl	80084e2 <USBD_CtlError>
        ret = USBD_FAIL;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	75fb      	strb	r3, [r7, #23]
      break;
 8006bdc:	e061      	b.n	8006ca2 <USBD_AUDIO_Setup+0x19e>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	885b      	ldrh	r3, [r3, #2]
 8006be2:	0a1b      	lsrs	r3, r3, #8
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	2b21      	cmp	r3, #33	@ 0x21
 8006be8:	d15a      	bne.n	8006ca0 <USBD_AUDIO_Setup+0x19c>
      {
        pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 fa77 	bl	80070e4 <USBD_AUDIO_GetAudioHeaderDesc>
 8006bf6:	60f8      	str	r0, [r7, #12]
        if (pbuf != NULL)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00c      	beq.n	8006c18 <USBD_AUDIO_Setup+0x114>
        {
          len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	88db      	ldrh	r3, [r3, #6]
 8006c02:	2b09      	cmp	r3, #9
 8006c04:	bf28      	it	cs
 8006c06:	2309      	movcs	r3, #9
 8006c08:	817b      	strh	r3, [r7, #10]
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c0a:	897b      	ldrh	r3, [r7, #10]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	68f9      	ldr	r1, [r7, #12]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 fce3 	bl	80085dc <USBD_CtlSendData>
        {
          USBD_CtlError(pdev, req);
          ret = USBD_FAIL;
        }
      }
      break;
 8006c16:	e043      	b.n	8006ca0 <USBD_AUDIO_Setup+0x19c>
          USBD_CtlError(pdev, req);
 8006c18:	6839      	ldr	r1, [r7, #0]
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f001 fc61 	bl	80084e2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006c20:	2303      	movs	r3, #3
 8006c22:	75fb      	strb	r3, [r7, #23]
      break;
 8006c24:	e03c      	b.n	8006ca0 <USBD_AUDIO_Setup+0x19c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d106      	bne.n	8006c40 <USBD_AUDIO_Setup+0x13c>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	2201      	movs	r2, #1
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f001 fccf 	bl	80085dc <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006c3e:	e030      	b.n	8006ca2 <USBD_AUDIO_Setup+0x19e>
        USBD_CtlError(pdev, req);
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 fc4d 	bl	80084e2 <USBD_CtlError>
        ret = USBD_FAIL;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c4c:	e029      	b.n	8006ca2 <USBD_AUDIO_Setup+0x19e>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d112      	bne.n	8006c80 <USBD_AUDIO_Setup+0x17c>
      {
        if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	885b      	ldrh	r3, [r3, #2]
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d806      	bhi.n	8006c72 <USBD_AUDIO_Setup+0x16e>
        {
          haudio->alt_setting = (uint8_t)(req->wValue);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	885b      	ldrh	r3, [r3, #2]
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	601a      	str	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006c70:	e017      	b.n	8006ca2 <USBD_AUDIO_Setup+0x19e>
          USBD_CtlError(pdev, req);
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fc34 	bl	80084e2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c7e:	e010      	b.n	8006ca2 <USBD_AUDIO_Setup+0x19e>
        USBD_CtlError(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 fc2d 	bl	80084e2 <USBD_CtlError>
        ret = USBD_FAIL;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c8c:	e009      	b.n	8006ca2 <USBD_AUDIO_Setup+0x19e>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 fc26 	bl	80084e2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006c96:	2303      	movs	r3, #3
 8006c98:	75fb      	strb	r3, [r7, #23]
      break;
 8006c9a:	e002      	b.n	8006ca2 <USBD_AUDIO_Setup+0x19e>
      break;
 8006c9c:	bf00      	nop
 8006c9e:	e008      	b.n	8006cb2 <USBD_AUDIO_Setup+0x1ae>
      break;
 8006ca0:	bf00      	nop
    }
    break;
 8006ca2:	e006      	b.n	8006cb2 <USBD_AUDIO_Setup+0x1ae>
  default:
    USBD_CtlError(pdev, req);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 fc1b 	bl	80084e2 <USBD_CtlError>
    ret = USBD_FAIL;
 8006cac:	2303      	movs	r3, #3
 8006cae:	75fb      	strb	r3, [r7, #23]
    break;
 8006cb0:	bf00      	nop
  }

  return (uint8_t)ret;
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <USBD_AUDIO_GetCfgDesc>:
 *         return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2264      	movs	r2, #100	@ 0x64
 8006cc8:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8006cca:	4b03      	ldr	r3, [pc, #12]	@ (8006cd8 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	20000048 	.word	0x20000048

08006cdc <USBD_AUDIO_DataIn>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006cee:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <USBD_AUDIO_DataIn+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e030      	b.n	8006d5c <USBD_AUDIO_DataIn+0x80>
  }

  if (epnum == (AUDIO_IN_EP & 0x7F))
 8006cfa:	78fb      	ldrb	r3, [r7, #3]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d12c      	bne.n	8006d5a <USBD_AUDIO_DataIn+0x7e>
  {
    // Đảo trạng thái buffer half để xác định phần buffer nào sẽ được gửi tiếp theo
    haudio->in_buffer_half = !haudio->in_buffer_half;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8006d06:	f893 3cca 	ldrb.w	r3, [r3, #3274]	@ 0xcca
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	bf0c      	ite	eq
 8006d0e:	2301      	moveq	r3, #1
 8006d10:	2300      	movne	r3, #0
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	461a      	mov	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8006d1c:	f883 2cca 	strb.w	r2, [r3, #3274]	@ 0xcca
    
    // Tính offset cho buffer trước đó
    uint16_t prev = (AUDIO_IN_PACKET / 2) * !haudio->in_buffer_half;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8006d26:	f893 3cca 	ldrb.w	r3, [r3, #3274]	@ 0xcca
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <USBD_AUDIO_DataIn+0x56>
 8006d2e:	2330      	movs	r3, #48	@ 0x30
 8006d30:	e000      	b.n	8006d34 <USBD_AUDIO_DataIn+0x58>
 8006d32:	2300      	movs	r3, #0
 8006d34:	817b      	strh	r3, [r7, #10]

    // Bắt đầu nhận dữ liệu mới từ CS5361
    I2S_TO_CS5361();
 8006d36:	f7f9 fc9f 	bl	8000678 <I2S_TO_CS5361>

    // Gửi dữ liệu đã xử lý qua USB
    USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 8006d3a:	2181      	movs	r1, #129	@ 0x81
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f002 f877 	bl	8008e30 <USBD_LL_FlushEP>
    USBD_LL_Transmit(pdev, AUDIO_IN_EP, (uint8_t *)(haudio->in_buffer + prev), AUDIO_IN_PACKET);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 8006d48:	330a      	adds	r3, #10
 8006d4a:	897a      	ldrh	r2, [r7, #10]
 8006d4c:	0052      	lsls	r2, r2, #1
 8006d4e:	441a      	add	r2, r3
 8006d50:	2360      	movs	r3, #96	@ 0x60
 8006d52:	2181      	movs	r1, #129	@ 0x81
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f002 f913 	bl	8008f80 <USBD_LL_Transmit>
  }

  return (uint8_t)USBD_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USBD_AUDIO_EP0_RxReady>:
 *         handle EP0 Rx Ready event
 * @param  pdev: device instance
 * @retval status
 */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	32b0      	adds	r2, #176	@ 0xb0
 8006d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7a:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e02a      	b.n	8006ddc <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8006d8c:	f893 3ccb 	ldrb.w	r3, [r3, #3275]	@ 0xccb
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d122      	bne.n	8006dda <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8006d9a:	f893 3d0d 	ldrb.w	r3, [r3, #3341]	@ 0xd0d
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d11b      	bne.n	8006dda <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	33b0      	adds	r3, #176	@ 0xb0
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8006dba:	f892 2ccc 	ldrb.w	r2, [r2, #3276]	@ 0xccc
 8006dbe:	4610      	mov	r0, r2
 8006dc0:	4798      	blx	r3
      haudio->control.cmd = 0U;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2ccb 	strb.w	r2, [r3, #3275]	@ 0xccb
      haudio->control.len = 0U;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2d0c 	strb.w	r2, [r3, #3340]	@ 0xd0c
    }
  }

  return (uint8_t)USBD_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <USBD_AUDIO_EP0_TxReady>:
 *         handle EP0 TRx Ready event
 * @param  pdev: device instance
 * @retval status
 */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <USBD_AUDIO_SOF>:
 *         handle SOF event
 * @param  pdev: device instance
 * @retval status
 */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <USBD_AUDIO_IsoINIncomplete>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <USBD_AUDIO_IsoOutIncomplete>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	460b      	mov	r3, r1
 8006e34:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	32b0      	adds	r2, #176	@ 0xb0
 8006e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <USBD_AUDIO_IsoOutIncomplete+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e016      	b.n	8006e7a <USBD_AUDIO_IsoOutIncomplete+0x50>
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	32b0      	adds	r2, #176	@ 0xb0
 8006e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Prepare Out endpoint to receive next audio packet */
  (void)USBD_LL_PrepareReceive(pdev, epnum,
                               &haudio->buffer[haudio->wr_ptr],
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8006e62:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 8006e66:	461a      	mov	r2, r3
  (void)USBD_LL_PrepareReceive(pdev, epnum,
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	1d1a      	adds	r2, r3, #4
 8006e6e:	78f9      	ldrb	r1, [r7, #3]
 8006e70:	23c0      	movs	r3, #192	@ 0xc0
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f002 f8a5 	bl	8008fc2 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
	...

08006e84 <USBD_AUDIO_DataOut>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	32b0      	adds	r2, #176	@ 0xb0
 8006e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9e:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e07c      	b.n	8006fa4 <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 8006eaa:	4b40      	ldr	r3, [pc, #256]	@ (8006fac <USBD_AUDIO_DataOut+0x128>)
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	78fa      	ldrb	r2, [r7, #3]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d176      	bne.n	8006fa2 <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8006eb4:	78fb      	ldrb	r3, [r7, #3]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f002 f8a3 	bl	8009004 <USBD_LL_GetRxDataSize>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr], PacketSize, AUDIO_OUT_TC);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	33b0      	adds	r3, #176	@ 0xb0
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8006eda:	f8b2 2c08 	ldrh.w	r2, [r2, #3080]	@ 0xc08
 8006ede:	4611      	mov	r1, r2
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	440a      	add	r2, r1
 8006ee4:	1d10      	adds	r0, r2, #4
 8006ee6:	8979      	ldrh	r1, [r7, #10]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	4798      	blx	r3

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8006ef2:	f8b3 2c08 	ldrh.w	r2, [r3, #3080]	@ 0xc08
 8006ef6:	897b      	ldrh	r3, [r7, #10]
 8006ef8:	4413      	add	r3, r2
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8006f02:	f8a3 2c08 	strh.w	r2, [r3, #3080]	@ 0xc08

    if (haudio->wr_ptr >= AUDIO_TOTAL_BUF_SIZE)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8006f0c:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 8006f10:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 8006f14:	d321      	bcc.n	8006f5a <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f8a3 2c08 	strh.w	r2, [r3, #3080]	@ 0xc08

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8006f28:	f893 3c04 	ldrb.w	r3, [r3, #3076]	@ 0xc04
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d114      	bne.n	8006f5a <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0], AUDIO_TOTAL_BUF_SIZE / 2U, AUDIO_CMD_START);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	33b0      	adds	r3, #176	@ 0xb0
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	1d10      	adds	r0, r2, #4
 8006f46:	2201      	movs	r2, #1
 8006f48:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 8006f4c:	4798      	blx	r3
        haudio->offset = AUDIO_OFFSET_NONE;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2c04 	strb.w	r2, [r3, #3076]	@ 0xc04
      }
    }

    if (haudio->rd_enable == 0U)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8006f60:	f893 3c05 	ldrb.w	r3, [r3, #3077]	@ 0xc05
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10d      	bne.n	8006f84 <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8006f6e:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 8006f72:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8006f76:	d105      	bne.n	8006f84 <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2c05 	strb.w	r2, [r3, #3077]	@ 0xc05
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8006f84:	4b09      	ldr	r3, [pc, #36]	@ (8006fac <USBD_AUDIO_DataOut+0x128>)
 8006f86:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8006f8e:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	@ 0xc08
 8006f92:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4413      	add	r3, r2
 8006f98:	1d1a      	adds	r2, r3, #4
 8006f9a:	23c0      	movs	r3, #192	@ 0xc0
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f002 f810 	bl	8008fc2 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	200000b6 	.word	0x200000b6

08006fb0 <AUDIO_REQ_GetCurrent>:
 * @param  pdev: device instance
 * @param  req: setup class request
 * @retval status
 */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	32b0      	adds	r2, #176	@ 0xb0
 8006fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc8:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d017      	beq.n	8007000 <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f503 5373 	add.w	r3, r3, #15552	@ 0x3cc0
 8006fd6:	330c      	adds	r3, #12
 8006fd8:	2240      	movs	r2, #64	@ 0x40
 8006fda:	2100      	movs	r1, #0
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f002 f869 	bl	80090b4 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f503 5373 	add.w	r3, r3, #15552	@ 0x3cc0
 8006fe8:	330c      	adds	r3, #12
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	88d2      	ldrh	r2, [r2, #6]
 8006fee:	2a40      	cmp	r2, #64	@ 0x40
 8006ff0:	bf28      	it	cs
 8006ff2:	2240      	movcs	r2, #64	@ 0x40
 8006ff4:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 faef 	bl	80085dc <USBD_CtlSendData>
 8006ffe:	e000      	b.n	8007002 <AUDIO_REQ_GetCurrent+0x52>
    return;
 8007000:	bf00      	nop
}
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <AUDIO_REQ_SetCurrent>:
 * @param  pdev: device instance
 * @param  req: setup class request
 * @retval status
 */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	32b0      	adds	r2, #176	@ 0xb0
 800701c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007020:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d02f      	beq.n	8007088 <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	88db      	ldrh	r3, [r3, #6]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d02c      	beq.n	800708a <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;                            /* Set the request value */
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2ccb 	strb.w	r2, [r3, #3275]	@ 0xccb
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE); /* Set the request data length */
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	88db      	ldrh	r3, [r3, #6]
 8007040:	2b3f      	cmp	r3, #63	@ 0x3f
 8007042:	d803      	bhi.n	800704c <AUDIO_REQ_SetCurrent+0x44>
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	88db      	ldrh	r3, [r3, #6]
 8007048:	b2da      	uxtb	r2, r3
 800704a:	e000      	b.n	800704e <AUDIO_REQ_SetCurrent+0x46>
 800704c:	2240      	movs	r2, #64	@ 0x40
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007054:	f883 2d0c 	strb.w	r2, [r3, #3340]	@ 0xd0c
    haudio->control.unit = HIBYTE(req->wIndex);                         /* Set the request target unit */
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	889b      	ldrh	r3, [r3, #4]
 800705c:	0a1b      	lsrs	r3, r3, #8
 800705e:	b29b      	uxth	r3, r3
 8007060:	b2da      	uxtb	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007068:	f883 2d0d 	strb.w	r2, [r3, #3341]	@ 0xd0d

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f503 5373 	add.w	r3, r3, #15552	@ 0x3cc0
 8007072:	330c      	adds	r3, #12
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 800707a:	f892 2d0c 	ldrb.w	r2, [r2, #3340]	@ 0xd0c
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f001 fad7 	bl	8008634 <USBD_CtlPrepareRx>
 8007086:	e000      	b.n	800708a <AUDIO_REQ_SetCurrent+0x82>
    return;
 8007088:	bf00      	nop
  }
}
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_AUDIO_GetDeviceQualifierDesc>:
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	220a      	movs	r2, #10
 800709c:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 800709e:	4b03      	ldr	r3, [pc, #12]	@ (80070ac <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	200000ac 	.word	0x200000ac

080070b0 <USBD_AUDIO_RegisterInterface>:
 * @param  fops: Audio interface callback
 * @retval status
 */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e009      	b.n	80070d8 <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	33b0      	adds	r3, #176	@ 0xb0
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	4413      	add	r3, r2
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <USBD_AUDIO_GetAudioHeaderDesc>:
 * @param  pdev: device instance
 * @param  pConfDesc:  pointer to Bos descriptor
 * @retval pointer to the Audio AC Header descriptor
 */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc = NULL;
 80070f4:	2300      	movs	r3, #0
 80070f6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	885b      	ldrh	r3, [r3, #2]
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	7812      	ldrb	r2, [r2, #0]
 8007102:	4293      	cmp	r3, r2
 8007104:	d91b      	bls.n	800713e <USBD_AUDIO_GetAudioHeaderDesc+0x5a>
  {
    ptr = desc->bLength;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800710c:	e011      	b.n	8007132 <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800710e:	f107 030a 	add.w	r3, r7, #10
 8007112:	4619      	mov	r1, r3
 8007114:	6978      	ldr	r0, [r7, #20]
 8007116:	f000 fbe6 	bl	80078e6 <USBD_GetNextDesc>
 800711a:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	785b      	ldrb	r3, [r3, #1]
 8007120:	2b24      	cmp	r3, #36	@ 0x24
 8007122:	d106      	bne.n	8007132 <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 8007128:	2b01      	cmp	r3, #1
 800712a:	d102      	bne.n	8007132 <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
      {
        pAudioDesc = (uint8_t *)pdesc;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	613b      	str	r3, [r7, #16]
        break;
 8007130:	e005      	b.n	800713e <USBD_AUDIO_GetAudioHeaderDesc+0x5a>
    while (ptr < desc->wTotalLength)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	885b      	ldrh	r3, [r3, #2]
 8007136:	b29a      	uxth	r2, r3
 8007138:	897b      	ldrh	r3, [r7, #10]
 800713a:	429a      	cmp	r2, r3
 800713c:	d8e7      	bhi.n	800710e <USBD_AUDIO_GetAudioHeaderDesc+0x2a>
      }
    }
  }
  return pAudioDesc;
 800713e:	693b      	ldr	r3, [r7, #16]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	4613      	mov	r3, r2
 8007154:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800715c:	2303      	movs	r3, #3
 800715e:	e01f      	b.n	80071a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	79fa      	ldrb	r2, [r7, #7]
 8007192:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f001 fd9f 	bl	8008cd8 <USBD_LL_Init>
 800719a:	4603      	mov	r3, r0
 800719c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800719e:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80071bc:	2303      	movs	r3, #3
 80071be:	e025      	b.n	800720c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	32ae      	adds	r2, #174	@ 0xae
 80071d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00f      	beq.n	80071fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	32ae      	adds	r2, #174	@ 0xae
 80071e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ec:	f107 020e 	add.w	r2, r7, #14
 80071f0:	4610      	mov	r0, r2
 80071f2:	4798      	blx	r3
 80071f4:	4602      	mov	r2, r0
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007202:	1c5a      	adds	r2, r3, #1
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 fda7 	bl	8008d70 <USBD_LL_Start>
 8007222:	4603      	mov	r3, r0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007234:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007236:	4618      	mov	r0, r3
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	460b      	mov	r3, r1
 800724c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800724e:	2300      	movs	r3, #0
 8007250:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007258:	2b00      	cmp	r3, #0
 800725a:	d009      	beq.n	8007270 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	78fa      	ldrb	r2, [r7, #3]
 8007266:	4611      	mov	r1, r2
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	4798      	blx	r3
 800726c:	4603      	mov	r3, r0
 800726e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007270:	7bfb      	ldrb	r3, [r7, #15]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	460b      	mov	r3, r1
 8007284:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	78fa      	ldrb	r2, [r7, #3]
 8007294:	4611      	mov	r1, r2
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	4798      	blx	r3
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d001      	beq.n	80072a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80072a0:	2303      	movs	r3, #3
 80072a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b084      	sub	sp, #16
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
 80072b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f001 f8d4 	bl	800846e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80072d4:	461a      	mov	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80072e2:	f003 031f 	and.w	r3, r3, #31
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d01a      	beq.n	8007320 <USBD_LL_SetupStage+0x72>
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d822      	bhi.n	8007334 <USBD_LL_SetupStage+0x86>
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <USBD_LL_SetupStage+0x4a>
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d00a      	beq.n	800730c <USBD_LL_SetupStage+0x5e>
 80072f6:	e01d      	b.n	8007334 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fb2b 	bl	800795c <USBD_StdDevReq>
 8007306:	4603      	mov	r3, r0
 8007308:	73fb      	strb	r3, [r7, #15]
      break;
 800730a:	e020      	b.n	800734e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fb93 	bl	8007a40 <USBD_StdItfReq>
 800731a:	4603      	mov	r3, r0
 800731c:	73fb      	strb	r3, [r7, #15]
      break;
 800731e:	e016      	b.n	800734e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007326:	4619      	mov	r1, r3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fbf5 	bl	8007b18 <USBD_StdEPReq>
 800732e:	4603      	mov	r3, r0
 8007330:	73fb      	strb	r3, [r7, #15]
      break;
 8007332:	e00c      	b.n	800734e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800733a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800733e:	b2db      	uxtb	r3, r3
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f001 fd93 	bl	8008e6e <USBD_LL_StallEP>
 8007348:	4603      	mov	r3, r0
 800734a:	73fb      	strb	r3, [r7, #15]
      break;
 800734c:	bf00      	nop
  }

  return ret;
 800734e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	460b      	mov	r3, r1
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800736a:	7afb      	ldrb	r3, [r7, #11]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d16e      	bne.n	800744e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007376:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800737e:	2b03      	cmp	r3, #3
 8007380:	f040 8098 	bne.w	80074b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	429a      	cmp	r2, r3
 800738e:	d913      	bls.n	80073b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	1ad2      	subs	r2, r2, r3
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	4293      	cmp	r3, r2
 80073a8:	bf28      	it	cs
 80073aa:	4613      	movcs	r3, r2
 80073ac:	461a      	mov	r2, r3
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f001 f95c 	bl	800866e <USBD_CtlContinueRx>
 80073b6:	e07d      	b.n	80074b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80073be:	f003 031f 	and.w	r3, r3, #31
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d014      	beq.n	80073f0 <USBD_LL_DataOutStage+0x98>
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d81d      	bhi.n	8007406 <USBD_LL_DataOutStage+0xae>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d002      	beq.n	80073d4 <USBD_LL_DataOutStage+0x7c>
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d003      	beq.n	80073da <USBD_LL_DataOutStage+0x82>
 80073d2:	e018      	b.n	8007406 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	75bb      	strb	r3, [r7, #22]
            break;
 80073d8:	e018      	b.n	800740c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	4619      	mov	r1, r3
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 fa64 	bl	80078b2 <USBD_CoreFindIF>
 80073ea:	4603      	mov	r3, r0
 80073ec:	75bb      	strb	r3, [r7, #22]
            break;
 80073ee:	e00d      	b.n	800740c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	4619      	mov	r1, r3
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 fa66 	bl	80078cc <USBD_CoreFindEP>
 8007400:	4603      	mov	r3, r0
 8007402:	75bb      	strb	r3, [r7, #22]
            break;
 8007404:	e002      	b.n	800740c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	75bb      	strb	r3, [r7, #22]
            break;
 800740a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800740c:	7dbb      	ldrb	r3, [r7, #22]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d119      	bne.n	8007446 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b03      	cmp	r3, #3
 800741c:	d113      	bne.n	8007446 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800741e:	7dba      	ldrb	r2, [r7, #22]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	32ae      	adds	r2, #174	@ 0xae
 8007424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00b      	beq.n	8007446 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800742e:	7dba      	ldrb	r2, [r7, #22]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007436:	7dba      	ldrb	r2, [r7, #22]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	32ae      	adds	r2, #174	@ 0xae
 800743c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f001 f922 	bl	8008690 <USBD_CtlSendStatus>
 800744c:	e032      	b.n	80074b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800744e:	7afb      	ldrb	r3, [r7, #11]
 8007450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007454:	b2db      	uxtb	r3, r3
 8007456:	4619      	mov	r1, r3
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 fa37 	bl	80078cc <USBD_CoreFindEP>
 800745e:	4603      	mov	r3, r0
 8007460:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007462:	7dbb      	ldrb	r3, [r7, #22]
 8007464:	2bff      	cmp	r3, #255	@ 0xff
 8007466:	d025      	beq.n	80074b4 <USBD_LL_DataOutStage+0x15c>
 8007468:	7dbb      	ldrb	r3, [r7, #22]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d122      	bne.n	80074b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b03      	cmp	r3, #3
 8007478:	d117      	bne.n	80074aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800747a:	7dba      	ldrb	r2, [r7, #22]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	32ae      	adds	r2, #174	@ 0xae
 8007480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00f      	beq.n	80074aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800748a:	7dba      	ldrb	r2, [r7, #22]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007492:	7dba      	ldrb	r2, [r7, #22]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	32ae      	adds	r2, #174	@ 0xae
 8007498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	7afa      	ldrb	r2, [r7, #11]
 80074a0:	4611      	mov	r1, r2
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	4798      	blx	r3
 80074a6:	4603      	mov	r3, r0
 80074a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
 80074b2:	e000      	b.n	80074b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3718      	adds	r7, #24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b086      	sub	sp, #24
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	60f8      	str	r0, [r7, #12]
 80074c6:	460b      	mov	r3, r1
 80074c8:	607a      	str	r2, [r7, #4]
 80074ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80074cc:	7afb      	ldrb	r3, [r7, #11]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d16f      	bne.n	80075b2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	3314      	adds	r3, #20
 80074d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d15a      	bne.n	8007598 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	689a      	ldr	r2, [r3, #8]
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d914      	bls.n	8007518 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	689a      	ldr	r2, [r3, #8]
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	1ad2      	subs	r2, r2, r3
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	461a      	mov	r2, r3
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f001 f884 	bl	8008612 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800750a:	2300      	movs	r3, #0
 800750c:	2200      	movs	r2, #0
 800750e:	2100      	movs	r1, #0
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f001 fd56 	bl	8008fc2 <USBD_LL_PrepareReceive>
 8007516:	e03f      	b.n	8007598 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	68da      	ldr	r2, [r3, #12]
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	429a      	cmp	r2, r3
 8007522:	d11c      	bne.n	800755e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800752c:	429a      	cmp	r2, r3
 800752e:	d316      	bcc.n	800755e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800753a:	429a      	cmp	r2, r3
 800753c:	d20f      	bcs.n	800755e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800753e:	2200      	movs	r2, #0
 8007540:	2100      	movs	r1, #0
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f001 f865 	bl	8008612 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007550:	2300      	movs	r3, #0
 8007552:	2200      	movs	r2, #0
 8007554:	2100      	movs	r1, #0
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f001 fd33 	bl	8008fc2 <USBD_LL_PrepareReceive>
 800755c:	e01c      	b.n	8007598 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b03      	cmp	r3, #3
 8007568:	d10f      	bne.n	800758a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d009      	beq.n	800758a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800758a:	2180      	movs	r1, #128	@ 0x80
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f001 fc6e 	bl	8008e6e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f001 f88f 	bl	80086b6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d03a      	beq.n	8007618 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f7ff fe42 	bl	800722c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80075b0:	e032      	b.n	8007618 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80075b2:	7afb      	ldrb	r3, [r7, #11]
 80075b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	4619      	mov	r1, r3
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 f985 	bl	80078cc <USBD_CoreFindEP>
 80075c2:	4603      	mov	r3, r0
 80075c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	2bff      	cmp	r3, #255	@ 0xff
 80075ca:	d025      	beq.n	8007618 <USBD_LL_DataInStage+0x15a>
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d122      	bne.n	8007618 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b03      	cmp	r3, #3
 80075dc:	d11c      	bne.n	8007618 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80075de:	7dfa      	ldrb	r2, [r7, #23]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	32ae      	adds	r2, #174	@ 0xae
 80075e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d014      	beq.n	8007618 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80075ee:	7dfa      	ldrb	r2, [r7, #23]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80075f6:	7dfa      	ldrb	r2, [r7, #23]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	32ae      	adds	r2, #174	@ 0xae
 80075fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	7afa      	ldrb	r2, [r7, #11]
 8007604:	4611      	mov	r1, r2
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	4798      	blx	r3
 800760a:	4603      	mov	r3, r0
 800760c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800760e:	7dbb      	ldrb	r3, [r7, #22]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d001      	beq.n	8007618 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007614:	7dbb      	ldrb	r3, [r7, #22]
 8007616:	e000      	b.n	800761a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b084      	sub	sp, #16
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800765a:	2b00      	cmp	r3, #0
 800765c:	d014      	beq.n	8007688 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00e      	beq.n	8007688 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	6852      	ldr	r2, [r2, #4]
 8007676:	b2d2      	uxtb	r2, r2
 8007678:	4611      	mov	r1, r2
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	4798      	blx	r3
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007684:	2303      	movs	r3, #3
 8007686:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007688:	2340      	movs	r3, #64	@ 0x40
 800768a:	2200      	movs	r2, #0
 800768c:	2100      	movs	r1, #0
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f001 fb89 	bl	8008da6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2240      	movs	r2, #64	@ 0x40
 80076a0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076a4:	2340      	movs	r3, #64	@ 0x40
 80076a6:	2200      	movs	r2, #0
 80076a8:	2180      	movs	r1, #128	@ 0x80
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f001 fb7b 	bl	8008da6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2240      	movs	r2, #64	@ 0x40
 80076ba:	621a      	str	r2, [r3, #32]

  return ret;
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	460b      	mov	r3, r1
 80076d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	78fa      	ldrb	r2, [r7, #3]
 80076d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d006      	beq.n	8007708 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007700:	b2da      	uxtb	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2204      	movs	r2, #4
 800770c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b04      	cmp	r3, #4
 8007730:	d106      	bne.n	8007740 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007738:	b2da      	uxtb	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	370c      	adds	r7, #12
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b082      	sub	sp, #8
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b03      	cmp	r3, #3
 8007760:	d110      	bne.n	8007784 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00b      	beq.n	8007784 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d005      	beq.n	8007784 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800777e:	69db      	ldr	r3, [r3, #28]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b082      	sub	sp, #8
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	460b      	mov	r3, r1
 8007798:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	32ae      	adds	r2, #174	@ 0xae
 80077a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e01c      	b.n	80077ea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b03      	cmp	r3, #3
 80077ba:	d115      	bne.n	80077e8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	32ae      	adds	r2, #174	@ 0xae
 80077c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00b      	beq.n	80077e8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	32ae      	adds	r2, #174	@ 0xae
 80077da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077de:	6a1b      	ldr	r3, [r3, #32]
 80077e0:	78fa      	ldrb	r2, [r7, #3]
 80077e2:	4611      	mov	r1, r2
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b082      	sub	sp, #8
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	460b      	mov	r3, r1
 80077fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	32ae      	adds	r2, #174	@ 0xae
 8007808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007810:	2303      	movs	r3, #3
 8007812:	e01c      	b.n	800784e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b03      	cmp	r3, #3
 800781e:	d115      	bne.n	800784c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	32ae      	adds	r2, #174	@ 0xae
 800782a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800782e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00b      	beq.n	800784c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	32ae      	adds	r2, #174	@ 0xae
 800783e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007844:	78fa      	ldrb	r2, [r7, #3]
 8007846:	4611      	mov	r1, r2
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007874:	2300      	movs	r3, #0
 8007876:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00e      	beq.n	80078a8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	6852      	ldr	r2, [r2, #4]
 8007896:	b2d2      	uxtb	r2, r2
 8007898:	4611      	mov	r1, r2
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	4798      	blx	r3
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80078a4:	2303      	movs	r3, #3
 80078a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	460b      	mov	r3, r1
 80078bc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80078be:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80078d8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80078da:	4618      	mov	r0, r3
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b085      	sub	sp, #20
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	881b      	ldrh	r3, [r3, #0]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	7812      	ldrb	r2, [r2, #0]
 80078fc:	4413      	add	r3, r2
 80078fe:	b29a      	uxth	r2, r3
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	461a      	mov	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4413      	add	r3, r2
 800790e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007910:	68fb      	ldr	r3, [r7, #12]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800791e:	b480      	push	{r7}
 8007920:	b087      	sub	sp, #28
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	3301      	adds	r3, #1
 8007934:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800793c:	8a3b      	ldrh	r3, [r7, #16]
 800793e:	021b      	lsls	r3, r3, #8
 8007940:	b21a      	sxth	r2, r3
 8007942:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007946:	4313      	orrs	r3, r2
 8007948:	b21b      	sxth	r3, r3
 800794a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800794c:	89fb      	ldrh	r3, [r7, #14]
}
 800794e:	4618      	mov	r0, r3
 8007950:	371c      	adds	r7, #28
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
	...

0800795c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007972:	2b40      	cmp	r3, #64	@ 0x40
 8007974:	d005      	beq.n	8007982 <USBD_StdDevReq+0x26>
 8007976:	2b40      	cmp	r3, #64	@ 0x40
 8007978:	d857      	bhi.n	8007a2a <USBD_StdDevReq+0xce>
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00f      	beq.n	800799e <USBD_StdDevReq+0x42>
 800797e:	2b20      	cmp	r3, #32
 8007980:	d153      	bne.n	8007a2a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	32ae      	adds	r2, #174	@ 0xae
 800798c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	4798      	blx	r3
 8007998:	4603      	mov	r3, r0
 800799a:	73fb      	strb	r3, [r7, #15]
      break;
 800799c:	e04a      	b.n	8007a34 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	785b      	ldrb	r3, [r3, #1]
 80079a2:	2b09      	cmp	r3, #9
 80079a4:	d83b      	bhi.n	8007a1e <USBD_StdDevReq+0xc2>
 80079a6:	a201      	add	r2, pc, #4	@ (adr r2, 80079ac <USBD_StdDevReq+0x50>)
 80079a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ac:	08007a01 	.word	0x08007a01
 80079b0:	08007a15 	.word	0x08007a15
 80079b4:	08007a1f 	.word	0x08007a1f
 80079b8:	08007a0b 	.word	0x08007a0b
 80079bc:	08007a1f 	.word	0x08007a1f
 80079c0:	080079df 	.word	0x080079df
 80079c4:	080079d5 	.word	0x080079d5
 80079c8:	08007a1f 	.word	0x08007a1f
 80079cc:	080079f7 	.word	0x080079f7
 80079d0:	080079e9 	.word	0x080079e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fa3c 	bl	8007e54 <USBD_GetDescriptor>
          break;
 80079dc:	e024      	b.n	8007a28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fba1 	bl	8008128 <USBD_SetAddress>
          break;
 80079e6:	e01f      	b.n	8007a28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fbe0 	bl	80081b0 <USBD_SetConfig>
 80079f0:	4603      	mov	r3, r0
 80079f2:	73fb      	strb	r3, [r7, #15]
          break;
 80079f4:	e018      	b.n	8007a28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fc83 	bl	8008304 <USBD_GetConfig>
          break;
 80079fe:	e013      	b.n	8007a28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fcb4 	bl	8008370 <USBD_GetStatus>
          break;
 8007a08:	e00e      	b.n	8007a28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fce3 	bl	80083d8 <USBD_SetFeature>
          break;
 8007a12:	e009      	b.n	8007a28 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fd07 	bl	800842a <USBD_ClrFeature>
          break;
 8007a1c:	e004      	b.n	8007a28 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fd5e 	bl	80084e2 <USBD_CtlError>
          break;
 8007a26:	bf00      	nop
      }
      break;
 8007a28:	e004      	b.n	8007a34 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007a2a:	6839      	ldr	r1, [r7, #0]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fd58 	bl	80084e2 <USBD_CtlError>
      break;
 8007a32:	bf00      	nop
  }

  return ret;
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop

08007a40 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a56:	2b40      	cmp	r3, #64	@ 0x40
 8007a58:	d005      	beq.n	8007a66 <USBD_StdItfReq+0x26>
 8007a5a:	2b40      	cmp	r3, #64	@ 0x40
 8007a5c:	d852      	bhi.n	8007b04 <USBD_StdItfReq+0xc4>
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <USBD_StdItfReq+0x26>
 8007a62:	2b20      	cmp	r3, #32
 8007a64:	d14e      	bne.n	8007b04 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d840      	bhi.n	8007af6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	889b      	ldrh	r3, [r3, #4]
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d836      	bhi.n	8007aec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	889b      	ldrh	r3, [r3, #4]
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7ff ff13 	bl	80078b2 <USBD_CoreFindIF>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	2bff      	cmp	r3, #255	@ 0xff
 8007a94:	d01d      	beq.n	8007ad2 <USBD_StdItfReq+0x92>
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d11a      	bne.n	8007ad2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007a9c:	7bba      	ldrb	r2, [r7, #14]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	32ae      	adds	r2, #174	@ 0xae
 8007aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00f      	beq.n	8007acc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007aac:	7bba      	ldrb	r2, [r7, #14]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ab4:	7bba      	ldrb	r2, [r7, #14]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	32ae      	adds	r2, #174	@ 0xae
 8007aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	4798      	blx	r3
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007aca:	e004      	b.n	8007ad6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007acc:	2303      	movs	r3, #3
 8007ace:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ad0:	e001      	b.n	8007ad6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	88db      	ldrh	r3, [r3, #6]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d110      	bne.n	8007b00 <USBD_StdItfReq+0xc0>
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10d      	bne.n	8007b00 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fdd3 	bl	8008690 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007aea:	e009      	b.n	8007b00 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fcf7 	bl	80084e2 <USBD_CtlError>
          break;
 8007af4:	e004      	b.n	8007b00 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fcf2 	bl	80084e2 <USBD_CtlError>
          break;
 8007afe:	e000      	b.n	8007b02 <USBD_StdItfReq+0xc2>
          break;
 8007b00:	bf00      	nop
      }
      break;
 8007b02:	e004      	b.n	8007b0e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fceb 	bl	80084e2 <USBD_CtlError>
      break;
 8007b0c:	bf00      	nop
  }

  return ret;
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	889b      	ldrh	r3, [r3, #4]
 8007b2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b34:	2b40      	cmp	r3, #64	@ 0x40
 8007b36:	d007      	beq.n	8007b48 <USBD_StdEPReq+0x30>
 8007b38:	2b40      	cmp	r3, #64	@ 0x40
 8007b3a:	f200 817f 	bhi.w	8007e3c <USBD_StdEPReq+0x324>
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d02a      	beq.n	8007b98 <USBD_StdEPReq+0x80>
 8007b42:	2b20      	cmp	r3, #32
 8007b44:	f040 817a 	bne.w	8007e3c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b48:	7bbb      	ldrb	r3, [r7, #14]
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f7ff febd 	bl	80078cc <USBD_CoreFindEP>
 8007b52:	4603      	mov	r3, r0
 8007b54:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b56:	7b7b      	ldrb	r3, [r7, #13]
 8007b58:	2bff      	cmp	r3, #255	@ 0xff
 8007b5a:	f000 8174 	beq.w	8007e46 <USBD_StdEPReq+0x32e>
 8007b5e:	7b7b      	ldrb	r3, [r7, #13]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f040 8170 	bne.w	8007e46 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007b66:	7b7a      	ldrb	r2, [r7, #13]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007b6e:	7b7a      	ldrb	r2, [r7, #13]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	32ae      	adds	r2, #174	@ 0xae
 8007b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 8163 	beq.w	8007e46 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007b80:	7b7a      	ldrb	r2, [r7, #13]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	32ae      	adds	r2, #174	@ 0xae
 8007b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	6839      	ldr	r1, [r7, #0]
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	4798      	blx	r3
 8007b92:	4603      	mov	r3, r0
 8007b94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007b96:	e156      	b.n	8007e46 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	785b      	ldrb	r3, [r3, #1]
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d008      	beq.n	8007bb2 <USBD_StdEPReq+0x9a>
 8007ba0:	2b03      	cmp	r3, #3
 8007ba2:	f300 8145 	bgt.w	8007e30 <USBD_StdEPReq+0x318>
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 809b 	beq.w	8007ce2 <USBD_StdEPReq+0x1ca>
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d03c      	beq.n	8007c2a <USBD_StdEPReq+0x112>
 8007bb0:	e13e      	b.n	8007e30 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d002      	beq.n	8007bc4 <USBD_StdEPReq+0xac>
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d016      	beq.n	8007bf0 <USBD_StdEPReq+0xd8>
 8007bc2:	e02c      	b.n	8007c1e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bc4:	7bbb      	ldrb	r3, [r7, #14]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00d      	beq.n	8007be6 <USBD_StdEPReq+0xce>
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
 8007bcc:	2b80      	cmp	r3, #128	@ 0x80
 8007bce:	d00a      	beq.n	8007be6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007bd0:	7bbb      	ldrb	r3, [r7, #14]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f001 f94a 	bl	8008e6e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bda:	2180      	movs	r1, #128	@ 0x80
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f001 f946 	bl	8008e6e <USBD_LL_StallEP>
 8007be2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007be4:	e020      	b.n	8007c28 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fc7a 	bl	80084e2 <USBD_CtlError>
              break;
 8007bee:	e01b      	b.n	8007c28 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	885b      	ldrh	r3, [r3, #2]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d10e      	bne.n	8007c16 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00b      	beq.n	8007c16 <USBD_StdEPReq+0xfe>
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
 8007c00:	2b80      	cmp	r3, #128	@ 0x80
 8007c02:	d008      	beq.n	8007c16 <USBD_StdEPReq+0xfe>
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	88db      	ldrh	r3, [r3, #6]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d104      	bne.n	8007c16 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c0c:	7bbb      	ldrb	r3, [r7, #14]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f001 f92c 	bl	8008e6e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fd3a 	bl	8008690 <USBD_CtlSendStatus>

              break;
 8007c1c:	e004      	b.n	8007c28 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007c1e:	6839      	ldr	r1, [r7, #0]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fc5e 	bl	80084e2 <USBD_CtlError>
              break;
 8007c26:	bf00      	nop
          }
          break;
 8007c28:	e107      	b.n	8007e3a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d002      	beq.n	8007c3c <USBD_StdEPReq+0x124>
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d016      	beq.n	8007c68 <USBD_StdEPReq+0x150>
 8007c3a:	e04b      	b.n	8007cd4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c3c:	7bbb      	ldrb	r3, [r7, #14]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00d      	beq.n	8007c5e <USBD_StdEPReq+0x146>
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	2b80      	cmp	r3, #128	@ 0x80
 8007c46:	d00a      	beq.n	8007c5e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f001 f90e 	bl	8008e6e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c52:	2180      	movs	r1, #128	@ 0x80
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f001 f90a 	bl	8008e6e <USBD_LL_StallEP>
 8007c5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c5c:	e040      	b.n	8007ce0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fc3e 	bl	80084e2 <USBD_CtlError>
              break;
 8007c66:	e03b      	b.n	8007ce0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	885b      	ldrh	r3, [r3, #2]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d136      	bne.n	8007cde <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d004      	beq.n	8007c84 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007c7a:	7bbb      	ldrb	r3, [r7, #14]
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f001 f914 	bl	8008eac <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fd03 	bl	8008690 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c8a:	7bbb      	ldrb	r3, [r7, #14]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7ff fe1c 	bl	80078cc <USBD_CoreFindEP>
 8007c94:	4603      	mov	r3, r0
 8007c96:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c98:	7b7b      	ldrb	r3, [r7, #13]
 8007c9a:	2bff      	cmp	r3, #255	@ 0xff
 8007c9c:	d01f      	beq.n	8007cde <USBD_StdEPReq+0x1c6>
 8007c9e:	7b7b      	ldrb	r3, [r7, #13]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d11c      	bne.n	8007cde <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ca4:	7b7a      	ldrb	r2, [r7, #13]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007cac:	7b7a      	ldrb	r2, [r7, #13]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	32ae      	adds	r2, #174	@ 0xae
 8007cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d010      	beq.n	8007cde <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007cbc:	7b7a      	ldrb	r2, [r7, #13]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	32ae      	adds	r2, #174	@ 0xae
 8007cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	4798      	blx	r3
 8007cce:	4603      	mov	r3, r0
 8007cd0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007cd2:	e004      	b.n	8007cde <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fc03 	bl	80084e2 <USBD_CtlError>
              break;
 8007cdc:	e000      	b.n	8007ce0 <USBD_StdEPReq+0x1c8>
              break;
 8007cde:	bf00      	nop
          }
          break;
 8007ce0:	e0ab      	b.n	8007e3a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d002      	beq.n	8007cf4 <USBD_StdEPReq+0x1dc>
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d032      	beq.n	8007d58 <USBD_StdEPReq+0x240>
 8007cf2:	e097      	b.n	8007e24 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cf4:	7bbb      	ldrb	r3, [r7, #14]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d007      	beq.n	8007d0a <USBD_StdEPReq+0x1f2>
 8007cfa:	7bbb      	ldrb	r3, [r7, #14]
 8007cfc:	2b80      	cmp	r3, #128	@ 0x80
 8007cfe:	d004      	beq.n	8007d0a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fbed 	bl	80084e2 <USBD_CtlError>
                break;
 8007d08:	e091      	b.n	8007e2e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	da0b      	bge.n	8007d2a <USBD_StdEPReq+0x212>
 8007d12:	7bbb      	ldrb	r3, [r7, #14]
 8007d14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d18:	4613      	mov	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	3310      	adds	r3, #16
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	4413      	add	r3, r2
 8007d26:	3304      	adds	r3, #4
 8007d28:	e00b      	b.n	8007d42 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d2a:	7bbb      	ldrb	r3, [r7, #14]
 8007d2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d30:	4613      	mov	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	4413      	add	r3, r2
 8007d40:	3304      	adds	r3, #4
 8007d42:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2200      	movs	r2, #0
 8007d48:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fc43 	bl	80085dc <USBD_CtlSendData>
              break;
 8007d56:	e06a      	b.n	8007e2e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007d58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	da11      	bge.n	8007d84 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
 8007d62:	f003 020f 	and.w	r2, r3, #15
 8007d66:	6879      	ldr	r1, [r7, #4]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	4413      	add	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	440b      	add	r3, r1
 8007d72:	3324      	adds	r3, #36	@ 0x24
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d117      	bne.n	8007daa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fbb0 	bl	80084e2 <USBD_CtlError>
                  break;
 8007d82:	e054      	b.n	8007e2e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007d84:	7bbb      	ldrb	r3, [r7, #14]
 8007d86:	f003 020f 	and.w	r2, r3, #15
 8007d8a:	6879      	ldr	r1, [r7, #4]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	440b      	add	r3, r1
 8007d96:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d104      	bne.n	8007daa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fb9d 	bl	80084e2 <USBD_CtlError>
                  break;
 8007da8:	e041      	b.n	8007e2e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007daa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	da0b      	bge.n	8007dca <USBD_StdEPReq+0x2b2>
 8007db2:	7bbb      	ldrb	r3, [r7, #14]
 8007db4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007db8:	4613      	mov	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	4413      	add	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	3310      	adds	r3, #16
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	e00b      	b.n	8007de2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007dca:	7bbb      	ldrb	r3, [r7, #14]
 8007dcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	4413      	add	r3, r2
 8007de0:	3304      	adds	r3, #4
 8007de2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007de4:	7bbb      	ldrb	r3, [r7, #14]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d002      	beq.n	8007df0 <USBD_StdEPReq+0x2d8>
 8007dea:	7bbb      	ldrb	r3, [r7, #14]
 8007dec:	2b80      	cmp	r3, #128	@ 0x80
 8007dee:	d103      	bne.n	8007df8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	e00e      	b.n	8007e16 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f001 f874 	bl	8008eea <USBD_LL_IsStallEP>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d003      	beq.n	8007e10 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	e002      	b.n	8007e16 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	2200      	movs	r2, #0
 8007e14:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	2202      	movs	r2, #2
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fbdd 	bl	80085dc <USBD_CtlSendData>
              break;
 8007e22:	e004      	b.n	8007e2e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fb5b 	bl	80084e2 <USBD_CtlError>
              break;
 8007e2c:	bf00      	nop
          }
          break;
 8007e2e:	e004      	b.n	8007e3a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fb55 	bl	80084e2 <USBD_CtlError>
          break;
 8007e38:	bf00      	nop
      }
      break;
 8007e3a:	e005      	b.n	8007e48 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fb4f 	bl	80084e2 <USBD_CtlError>
      break;
 8007e44:	e000      	b.n	8007e48 <USBD_StdEPReq+0x330>
      break;
 8007e46:	bf00      	nop
  }

  return ret;
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
	...

08007e54 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007e62:	2300      	movs	r3, #0
 8007e64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	885b      	ldrh	r3, [r3, #2]
 8007e6e:	0a1b      	lsrs	r3, r3, #8
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	3b01      	subs	r3, #1
 8007e74:	2b06      	cmp	r3, #6
 8007e76:	f200 8128 	bhi.w	80080ca <USBD_GetDescriptor+0x276>
 8007e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e80 <USBD_GetDescriptor+0x2c>)
 8007e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e80:	08007e9d 	.word	0x08007e9d
 8007e84:	08007eb5 	.word	0x08007eb5
 8007e88:	08007ef5 	.word	0x08007ef5
 8007e8c:	080080cb 	.word	0x080080cb
 8007e90:	080080cb 	.word	0x080080cb
 8007e94:	0800806b 	.word	0x0800806b
 8007e98:	08008097 	.word	0x08008097
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	7c12      	ldrb	r2, [r2, #16]
 8007ea8:	f107 0108 	add.w	r1, r7, #8
 8007eac:	4610      	mov	r0, r2
 8007eae:	4798      	blx	r3
 8007eb0:	60f8      	str	r0, [r7, #12]
      break;
 8007eb2:	e112      	b.n	80080da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	7c1b      	ldrb	r3, [r3, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10d      	bne.n	8007ed8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec4:	f107 0208 	add.w	r2, r7, #8
 8007ec8:	4610      	mov	r0, r2
 8007eca:	4798      	blx	r3
 8007ecc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ed6:	e100      	b.n	80080da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee0:	f107 0208 	add.w	r2, r7, #8
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	4798      	blx	r3
 8007ee8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	3301      	adds	r3, #1
 8007eee:	2202      	movs	r2, #2
 8007ef0:	701a      	strb	r2, [r3, #0]
      break;
 8007ef2:	e0f2      	b.n	80080da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	885b      	ldrh	r3, [r3, #2]
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b05      	cmp	r3, #5
 8007efc:	f200 80ac 	bhi.w	8008058 <USBD_GetDescriptor+0x204>
 8007f00:	a201      	add	r2, pc, #4	@ (adr r2, 8007f08 <USBD_GetDescriptor+0xb4>)
 8007f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f06:	bf00      	nop
 8007f08:	08007f21 	.word	0x08007f21
 8007f0c:	08007f55 	.word	0x08007f55
 8007f10:	08007f89 	.word	0x08007f89
 8007f14:	08007fbd 	.word	0x08007fbd
 8007f18:	08007ff1 	.word	0x08007ff1
 8007f1c:	08008025 	.word	0x08008025
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00b      	beq.n	8007f44 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	7c12      	ldrb	r2, [r2, #16]
 8007f38:	f107 0108 	add.w	r1, r7, #8
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	4798      	blx	r3
 8007f40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f42:	e091      	b.n	8008068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 facb 	bl	80084e2 <USBD_CtlError>
            err++;
 8007f4c:	7afb      	ldrb	r3, [r7, #11]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	72fb      	strb	r3, [r7, #11]
          break;
 8007f52:	e089      	b.n	8008068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00b      	beq.n	8007f78 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	7c12      	ldrb	r2, [r2, #16]
 8007f6c:	f107 0108 	add.w	r1, r7, #8
 8007f70:	4610      	mov	r0, r2
 8007f72:	4798      	blx	r3
 8007f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f76:	e077      	b.n	8008068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fab1 	bl	80084e2 <USBD_CtlError>
            err++;
 8007f80:	7afb      	ldrb	r3, [r7, #11]
 8007f82:	3301      	adds	r3, #1
 8007f84:	72fb      	strb	r3, [r7, #11]
          break;
 8007f86:	e06f      	b.n	8008068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00b      	beq.n	8007fac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	7c12      	ldrb	r2, [r2, #16]
 8007fa0:	f107 0108 	add.w	r1, r7, #8
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	4798      	blx	r3
 8007fa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007faa:	e05d      	b.n	8008068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fa97 	bl	80084e2 <USBD_CtlError>
            err++;
 8007fb4:	7afb      	ldrb	r3, [r7, #11]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	72fb      	strb	r3, [r7, #11]
          break;
 8007fba:	e055      	b.n	8008068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00b      	beq.n	8007fe0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	7c12      	ldrb	r2, [r2, #16]
 8007fd4:	f107 0108 	add.w	r1, r7, #8
 8007fd8:	4610      	mov	r0, r2
 8007fda:	4798      	blx	r3
 8007fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fde:	e043      	b.n	8008068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fa7d 	bl	80084e2 <USBD_CtlError>
            err++;
 8007fe8:	7afb      	ldrb	r3, [r7, #11]
 8007fea:	3301      	adds	r3, #1
 8007fec:	72fb      	strb	r3, [r7, #11]
          break;
 8007fee:	e03b      	b.n	8008068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ff6:	695b      	ldr	r3, [r3, #20]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00b      	beq.n	8008014 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	7c12      	ldrb	r2, [r2, #16]
 8008008:	f107 0108 	add.w	r1, r7, #8
 800800c:	4610      	mov	r0, r2
 800800e:	4798      	blx	r3
 8008010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008012:	e029      	b.n	8008068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fa63 	bl	80084e2 <USBD_CtlError>
            err++;
 800801c:	7afb      	ldrb	r3, [r7, #11]
 800801e:	3301      	adds	r3, #1
 8008020:	72fb      	strb	r3, [r7, #11]
          break;
 8008022:	e021      	b.n	8008068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00b      	beq.n	8008048 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	7c12      	ldrb	r2, [r2, #16]
 800803c:	f107 0108 	add.w	r1, r7, #8
 8008040:	4610      	mov	r0, r2
 8008042:	4798      	blx	r3
 8008044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008046:	e00f      	b.n	8008068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fa49 	bl	80084e2 <USBD_CtlError>
            err++;
 8008050:	7afb      	ldrb	r3, [r7, #11]
 8008052:	3301      	adds	r3, #1
 8008054:	72fb      	strb	r3, [r7, #11]
          break;
 8008056:	e007      	b.n	8008068 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fa41 	bl	80084e2 <USBD_CtlError>
          err++;
 8008060:	7afb      	ldrb	r3, [r7, #11]
 8008062:	3301      	adds	r3, #1
 8008064:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008066:	bf00      	nop
      }
      break;
 8008068:	e037      	b.n	80080da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	7c1b      	ldrb	r3, [r3, #16]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d109      	bne.n	8008086 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800807a:	f107 0208 	add.w	r2, r7, #8
 800807e:	4610      	mov	r0, r2
 8008080:	4798      	blx	r3
 8008082:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008084:	e029      	b.n	80080da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fa2a 	bl	80084e2 <USBD_CtlError>
        err++;
 800808e:	7afb      	ldrb	r3, [r7, #11]
 8008090:	3301      	adds	r3, #1
 8008092:	72fb      	strb	r3, [r7, #11]
      break;
 8008094:	e021      	b.n	80080da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	7c1b      	ldrb	r3, [r3, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10d      	bne.n	80080ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a6:	f107 0208 	add.w	r2, r7, #8
 80080aa:	4610      	mov	r0, r2
 80080ac:	4798      	blx	r3
 80080ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	3301      	adds	r3, #1
 80080b4:	2207      	movs	r2, #7
 80080b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080b8:	e00f      	b.n	80080da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fa10 	bl	80084e2 <USBD_CtlError>
        err++;
 80080c2:	7afb      	ldrb	r3, [r7, #11]
 80080c4:	3301      	adds	r3, #1
 80080c6:	72fb      	strb	r3, [r7, #11]
      break;
 80080c8:	e007      	b.n	80080da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fa08 	bl	80084e2 <USBD_CtlError>
      err++;
 80080d2:	7afb      	ldrb	r3, [r7, #11]
 80080d4:	3301      	adds	r3, #1
 80080d6:	72fb      	strb	r3, [r7, #11]
      break;
 80080d8:	bf00      	nop
  }

  if (err != 0U)
 80080da:	7afb      	ldrb	r3, [r7, #11]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d11e      	bne.n	800811e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	88db      	ldrh	r3, [r3, #6]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d016      	beq.n	8008116 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80080e8:	893b      	ldrh	r3, [r7, #8]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00e      	beq.n	800810c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	88da      	ldrh	r2, [r3, #6]
 80080f2:	893b      	ldrh	r3, [r7, #8]
 80080f4:	4293      	cmp	r3, r2
 80080f6:	bf28      	it	cs
 80080f8:	4613      	movcs	r3, r2
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80080fe:	893b      	ldrh	r3, [r7, #8]
 8008100:	461a      	mov	r2, r3
 8008102:	68f9      	ldr	r1, [r7, #12]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fa69 	bl	80085dc <USBD_CtlSendData>
 800810a:	e009      	b.n	8008120 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f9e7 	bl	80084e2 <USBD_CtlError>
 8008114:	e004      	b.n	8008120 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 faba 	bl	8008690 <USBD_CtlSendStatus>
 800811c:	e000      	b.n	8008120 <USBD_GetDescriptor+0x2cc>
    return;
 800811e:	bf00      	nop
  }
}
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop

08008128 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	889b      	ldrh	r3, [r3, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d131      	bne.n	800819e <USBD_SetAddress+0x76>
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	88db      	ldrh	r3, [r3, #6]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d12d      	bne.n	800819e <USBD_SetAddress+0x76>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	885b      	ldrh	r3, [r3, #2]
 8008146:	2b7f      	cmp	r3, #127	@ 0x7f
 8008148:	d829      	bhi.n	800819e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	885b      	ldrh	r3, [r3, #2]
 800814e:	b2db      	uxtb	r3, r3
 8008150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008154:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b03      	cmp	r3, #3
 8008160:	d104      	bne.n	800816c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 f9bc 	bl	80084e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800816a:	e01d      	b.n	80081a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	7bfa      	ldrb	r2, [r7, #15]
 8008170:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008174:	7bfb      	ldrb	r3, [r7, #15]
 8008176:	4619      	mov	r1, r3
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fee2 	bl	8008f42 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fa86 	bl	8008690 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d004      	beq.n	8008194 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2202      	movs	r2, #2
 800818e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008192:	e009      	b.n	80081a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800819c:	e004      	b.n	80081a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f99e 	bl	80084e2 <USBD_CtlError>
  }
}
 80081a6:	bf00      	nop
 80081a8:	bf00      	nop
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	885b      	ldrh	r3, [r3, #2]
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	4b4e      	ldr	r3, [pc, #312]	@ (8008300 <USBD_SetConfig+0x150>)
 80081c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80081c8:	4b4d      	ldr	r3, [pc, #308]	@ (8008300 <USBD_SetConfig+0x150>)
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d905      	bls.n	80081dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f985 	bl	80084e2 <USBD_CtlError>
    return USBD_FAIL;
 80081d8:	2303      	movs	r3, #3
 80081da:	e08c      	b.n	80082f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d002      	beq.n	80081ee <USBD_SetConfig+0x3e>
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d029      	beq.n	8008240 <USBD_SetConfig+0x90>
 80081ec:	e075      	b.n	80082da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80081ee:	4b44      	ldr	r3, [pc, #272]	@ (8008300 <USBD_SetConfig+0x150>)
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d020      	beq.n	8008238 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80081f6:	4b42      	ldr	r3, [pc, #264]	@ (8008300 <USBD_SetConfig+0x150>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008200:	4b3f      	ldr	r3, [pc, #252]	@ (8008300 <USBD_SetConfig+0x150>)
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	4619      	mov	r1, r3
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7ff f81b 	bl	8007242 <USBD_SetClassConfig>
 800820c:	4603      	mov	r3, r0
 800820e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008210:	7bfb      	ldrb	r3, [r7, #15]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d008      	beq.n	8008228 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f962 	bl	80084e2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2202      	movs	r2, #2
 8008222:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008226:	e065      	b.n	80082f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fa31 	bl	8008690 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2203      	movs	r2, #3
 8008232:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008236:	e05d      	b.n	80082f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fa29 	bl	8008690 <USBD_CtlSendStatus>
      break;
 800823e:	e059      	b.n	80082f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008240:	4b2f      	ldr	r3, [pc, #188]	@ (8008300 <USBD_SetConfig+0x150>)
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d112      	bne.n	800826e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008250:	4b2b      	ldr	r3, [pc, #172]	@ (8008300 <USBD_SetConfig+0x150>)
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	461a      	mov	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800825a:	4b29      	ldr	r3, [pc, #164]	@ (8008300 <USBD_SetConfig+0x150>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f7ff f80a 	bl	800727a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fa12 	bl	8008690 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800826c:	e042      	b.n	80082f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800826e:	4b24      	ldr	r3, [pc, #144]	@ (8008300 <USBD_SetConfig+0x150>)
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	461a      	mov	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	429a      	cmp	r2, r3
 800827a:	d02a      	beq.n	80082d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	b2db      	uxtb	r3, r3
 8008282:	4619      	mov	r1, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7fe fff8 	bl	800727a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800828a:	4b1d      	ldr	r3, [pc, #116]	@ (8008300 <USBD_SetConfig+0x150>)
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	461a      	mov	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008294:	4b1a      	ldr	r3, [pc, #104]	@ (8008300 <USBD_SetConfig+0x150>)
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	4619      	mov	r1, r3
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7fe ffd1 	bl	8007242 <USBD_SetClassConfig>
 80082a0:	4603      	mov	r3, r0
 80082a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00f      	beq.n	80082ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f918 	bl	80084e2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	4619      	mov	r1, r3
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7fe ffdd 	bl	800727a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2202      	movs	r2, #2
 80082c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80082c8:	e014      	b.n	80082f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f9e0 	bl	8008690 <USBD_CtlSendStatus>
      break;
 80082d0:	e010      	b.n	80082f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f9dc 	bl	8008690 <USBD_CtlSendStatus>
      break;
 80082d8:	e00c      	b.n	80082f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80082da:	6839      	ldr	r1, [r7, #0]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f900 	bl	80084e2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80082e2:	4b07      	ldr	r3, [pc, #28]	@ (8008300 <USBD_SetConfig+0x150>)
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7fe ffc6 	bl	800727a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80082ee:	2303      	movs	r3, #3
 80082f0:	73fb      	strb	r3, [r7, #15]
      break;
 80082f2:	bf00      	nop
  }

  return ret;
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	200003cc 	.word	0x200003cc

08008304 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	88db      	ldrh	r3, [r3, #6]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d004      	beq.n	8008320 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008316:	6839      	ldr	r1, [r7, #0]
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f8e2 	bl	80084e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800831e:	e023      	b.n	8008368 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b02      	cmp	r3, #2
 800832a:	dc02      	bgt.n	8008332 <USBD_GetConfig+0x2e>
 800832c:	2b00      	cmp	r3, #0
 800832e:	dc03      	bgt.n	8008338 <USBD_GetConfig+0x34>
 8008330:	e015      	b.n	800835e <USBD_GetConfig+0x5a>
 8008332:	2b03      	cmp	r3, #3
 8008334:	d00b      	beq.n	800834e <USBD_GetConfig+0x4a>
 8008336:	e012      	b.n	800835e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	3308      	adds	r3, #8
 8008342:	2201      	movs	r2, #1
 8008344:	4619      	mov	r1, r3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f948 	bl	80085dc <USBD_CtlSendData>
        break;
 800834c:	e00c      	b.n	8008368 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	3304      	adds	r3, #4
 8008352:	2201      	movs	r2, #1
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f940 	bl	80085dc <USBD_CtlSendData>
        break;
 800835c:	e004      	b.n	8008368 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800835e:	6839      	ldr	r1, [r7, #0]
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f8be 	bl	80084e2 <USBD_CtlError>
        break;
 8008366:	bf00      	nop
}
 8008368:	bf00      	nop
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008380:	b2db      	uxtb	r3, r3
 8008382:	3b01      	subs	r3, #1
 8008384:	2b02      	cmp	r3, #2
 8008386:	d81e      	bhi.n	80083c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	88db      	ldrh	r3, [r3, #6]
 800838c:	2b02      	cmp	r3, #2
 800838e:	d004      	beq.n	800839a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f8a5 	bl	80084e2 <USBD_CtlError>
        break;
 8008398:	e01a      	b.n	80083d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d005      	beq.n	80083b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	f043 0202 	orr.w	r2, r3, #2
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	330c      	adds	r3, #12
 80083ba:	2202      	movs	r2, #2
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f90c 	bl	80085dc <USBD_CtlSendData>
      break;
 80083c4:	e004      	b.n	80083d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 f88a 	bl	80084e2 <USBD_CtlError>
      break;
 80083ce:	bf00      	nop
  }
}
 80083d0:	bf00      	nop
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	885b      	ldrh	r3, [r3, #2]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d107      	bne.n	80083fa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f94c 	bl	8008690 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80083f8:	e013      	b.n	8008422 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	885b      	ldrh	r3, [r3, #2]
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d10b      	bne.n	800841a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	889b      	ldrh	r3, [r3, #4]
 8008406:	0a1b      	lsrs	r3, r3, #8
 8008408:	b29b      	uxth	r3, r3
 800840a:	b2da      	uxtb	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f93c 	bl	8008690 <USBD_CtlSendStatus>
}
 8008418:	e003      	b.n	8008422 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f860 	bl	80084e2 <USBD_CtlError>
}
 8008422:	bf00      	nop
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b082      	sub	sp, #8
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800843a:	b2db      	uxtb	r3, r3
 800843c:	3b01      	subs	r3, #1
 800843e:	2b02      	cmp	r3, #2
 8008440:	d80b      	bhi.n	800845a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	885b      	ldrh	r3, [r3, #2]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d10c      	bne.n	8008464 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f91c 	bl	8008690 <USBD_CtlSendStatus>
      }
      break;
 8008458:	e004      	b.n	8008464 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f840 	bl	80084e2 <USBD_CtlError>
      break;
 8008462:	e000      	b.n	8008466 <USBD_ClrFeature+0x3c>
      break;
 8008464:	bf00      	nop
  }
}
 8008466:	bf00      	nop
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	781a      	ldrb	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3301      	adds	r3, #1
 8008488:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	781a      	ldrb	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3301      	adds	r3, #1
 8008496:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f7ff fa40 	bl	800791e <SWAPBYTE>
 800849e:	4603      	mov	r3, r0
 80084a0:	461a      	mov	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	3301      	adds	r3, #1
 80084aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3301      	adds	r3, #1
 80084b0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f7ff fa33 	bl	800791e <SWAPBYTE>
 80084b8:	4603      	mov	r3, r0
 80084ba:	461a      	mov	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	3301      	adds	r3, #1
 80084c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	3301      	adds	r3, #1
 80084ca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f7ff fa26 	bl	800791e <SWAPBYTE>
 80084d2:	4603      	mov	r3, r0
 80084d4:	461a      	mov	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	80da      	strh	r2, [r3, #6]
}
 80084da:	bf00      	nop
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b082      	sub	sp, #8
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80084ec:	2180      	movs	r1, #128	@ 0x80
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fcbd 	bl	8008e6e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80084f4:	2100      	movs	r1, #0
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fcb9 	bl	8008e6e <USBD_LL_StallEP>
}
 80084fc:	bf00      	nop
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008510:	2300      	movs	r3, #0
 8008512:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d042      	beq.n	80085a0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800851e:	6938      	ldr	r0, [r7, #16]
 8008520:	f000 f842 	bl	80085a8 <USBD_GetLen>
 8008524:	4603      	mov	r3, r0
 8008526:	3301      	adds	r3, #1
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800852e:	d808      	bhi.n	8008542 <USBD_GetString+0x3e>
 8008530:	6938      	ldr	r0, [r7, #16]
 8008532:	f000 f839 	bl	80085a8 <USBD_GetLen>
 8008536:	4603      	mov	r3, r0
 8008538:	3301      	adds	r3, #1
 800853a:	b29b      	uxth	r3, r3
 800853c:	005b      	lsls	r3, r3, #1
 800853e:	b29a      	uxth	r2, r3
 8008540:	e001      	b.n	8008546 <USBD_GetString+0x42>
 8008542:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800854a:	7dfb      	ldrb	r3, [r7, #23]
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	4413      	add	r3, r2
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	7812      	ldrb	r2, [r2, #0]
 8008554:	701a      	strb	r2, [r3, #0]
  idx++;
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	3301      	adds	r3, #1
 800855a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800855c:	7dfb      	ldrb	r3, [r7, #23]
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	4413      	add	r3, r2
 8008562:	2203      	movs	r2, #3
 8008564:	701a      	strb	r2, [r3, #0]
  idx++;
 8008566:	7dfb      	ldrb	r3, [r7, #23]
 8008568:	3301      	adds	r3, #1
 800856a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800856c:	e013      	b.n	8008596 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800856e:	7dfb      	ldrb	r3, [r7, #23]
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	4413      	add	r3, r2
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	7812      	ldrb	r2, [r2, #0]
 8008578:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	3301      	adds	r3, #1
 800857e:	613b      	str	r3, [r7, #16]
    idx++;
 8008580:	7dfb      	ldrb	r3, [r7, #23]
 8008582:	3301      	adds	r3, #1
 8008584:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008586:	7dfb      	ldrb	r3, [r7, #23]
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	4413      	add	r3, r2
 800858c:	2200      	movs	r2, #0
 800858e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008590:	7dfb      	ldrb	r3, [r7, #23]
 8008592:	3301      	adds	r3, #1
 8008594:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e7      	bne.n	800856e <USBD_GetString+0x6a>
 800859e:	e000      	b.n	80085a2 <USBD_GetString+0x9e>
    return;
 80085a0:	bf00      	nop
  }
}
 80085a2:	3718      	adds	r7, #24
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80085b8:	e005      	b.n	80085c6 <USBD_GetLen+0x1e>
  {
    len++;
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
 80085bc:	3301      	adds	r3, #1
 80085be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	3301      	adds	r3, #1
 80085c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1f5      	bne.n	80085ba <USBD_GetLen+0x12>
  }

  return len;
 80085ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2202      	movs	r2, #2
 80085ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	2100      	movs	r1, #0
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f000 fcbc 	bl	8008f80 <USBD_LL_Transmit>

  return USBD_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	60f8      	str	r0, [r7, #12]
 800861a:	60b9      	str	r1, [r7, #8]
 800861c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	2100      	movs	r1, #0
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 fcab 	bl	8008f80 <USBD_LL_Transmit>

  return USBD_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2203      	movs	r2, #3
 8008644:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	2100      	movs	r1, #0
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f000 fcaf 	bl	8008fc2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	60f8      	str	r0, [r7, #12]
 8008676:	60b9      	str	r1, [r7, #8]
 8008678:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	2100      	movs	r1, #0
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 fc9e 	bl	8008fc2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2204      	movs	r2, #4
 800869c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80086a0:	2300      	movs	r3, #0
 80086a2:	2200      	movs	r2, #0
 80086a4:	2100      	movs	r1, #0
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fc6a 	bl	8008f80 <USBD_LL_Transmit>

  return USBD_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b082      	sub	sp, #8
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2205      	movs	r2, #5
 80086c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086c6:	2300      	movs	r3, #0
 80086c8:	2200      	movs	r2, #0
 80086ca:	2100      	movs	r1, #0
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fc78 	bl	8008fc2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80086e0:	2200      	movs	r2, #0
 80086e2:	4912      	ldr	r1, [pc, #72]	@ (800872c <MX_USB_DEVICE_Init+0x50>)
 80086e4:	4812      	ldr	r0, [pc, #72]	@ (8008730 <MX_USB_DEVICE_Init+0x54>)
 80086e6:	f7fe fd2f 	bl	8007148 <USBD_Init>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d001      	beq.n	80086f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80086f0:	f7f8 fb96 	bl	8000e20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 80086f4:	490f      	ldr	r1, [pc, #60]	@ (8008734 <MX_USB_DEVICE_Init+0x58>)
 80086f6:	480e      	ldr	r0, [pc, #56]	@ (8008730 <MX_USB_DEVICE_Init+0x54>)
 80086f8:	f7fe fd56 	bl	80071a8 <USBD_RegisterClass>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d001      	beq.n	8008706 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008702:	f7f8 fb8d 	bl	8000e20 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 8008706:	490c      	ldr	r1, [pc, #48]	@ (8008738 <MX_USB_DEVICE_Init+0x5c>)
 8008708:	4809      	ldr	r0, [pc, #36]	@ (8008730 <MX_USB_DEVICE_Init+0x54>)
 800870a:	f7fe fcd1 	bl	80070b0 <USBD_AUDIO_RegisterInterface>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008714:	f7f8 fb84 	bl	8000e20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008718:	4805      	ldr	r0, [pc, #20]	@ (8008730 <MX_USB_DEVICE_Init+0x54>)
 800871a:	f7fe fd7b 	bl	8007214 <USBD_Start>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008724:	f7f8 fb7c 	bl	8000e20 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008728:	bf00      	nop
 800872a:	bd80      	pop	{r7, pc}
 800872c:	200000d4 	.word	0x200000d4
 8008730:	200003d0 	.word	0x200003d0
 8008734:	20000010 	.word	0x20000010
 8008738:	200000b8 	.word	0x200000b8

0800873c <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 8008748:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800874a:	4618      	mov	r0, r3
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr

08008756 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 8008756:	b480      	push	{r7}
 8008758:	b083      	sub	sp, #12
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800875e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8008760:	4618      	mov	r0, r3
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	4613      	mov	r3, r2
 8008778:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800877a:	79fb      	ldrb	r3, [r7, #7]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d001      	beq.n	8008784 <AUDIO_AudioCmd_FS+0x18>
 8008780:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 8008782:	e000      	b.n	8008786 <AUDIO_AudioCmd_FS+0x1a>
    break;
 8008784:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8008786:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8008788:	4618      	mov	r0, r3
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	4603      	mov	r3, r0
 800879c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 800879e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	4603      	mov	r3, r0
 80087b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 80087b6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	4613      	mov	r3, r2
 80087d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 80087d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 80087e0:	b480      	push	{r7}
 80087e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80087e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	4603      	mov	r3, r0
 80087f8:	6039      	str	r1, [r7, #0]
 80087fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	2212      	movs	r2, #18
 8008800:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008802:	4b03      	ldr	r3, [pc, #12]	@ (8008810 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008804:	4618      	mov	r0, r3
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	200000f0 	.word	0x200000f0

08008814 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	4603      	mov	r3, r0
 800881c:	6039      	str	r1, [r7, #0]
 800881e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2204      	movs	r2, #4
 8008824:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008826:	4b03      	ldr	r3, [pc, #12]	@ (8008834 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008828:	4618      	mov	r0, r3
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr
 8008834:	20000104 	.word	0x20000104

08008838 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	4603      	mov	r3, r0
 8008840:	6039      	str	r1, [r7, #0]
 8008842:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008844:	79fb      	ldrb	r3, [r7, #7]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d105      	bne.n	8008856 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	4907      	ldr	r1, [pc, #28]	@ (800886c <USBD_FS_ProductStrDescriptor+0x34>)
 800884e:	4808      	ldr	r0, [pc, #32]	@ (8008870 <USBD_FS_ProductStrDescriptor+0x38>)
 8008850:	f7ff fe58 	bl	8008504 <USBD_GetString>
 8008854:	e004      	b.n	8008860 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	4904      	ldr	r1, [pc, #16]	@ (800886c <USBD_FS_ProductStrDescriptor+0x34>)
 800885a:	4805      	ldr	r0, [pc, #20]	@ (8008870 <USBD_FS_ProductStrDescriptor+0x38>)
 800885c:	f7ff fe52 	bl	8008504 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008860:	4b02      	ldr	r3, [pc, #8]	@ (800886c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008862:	4618      	mov	r0, r3
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	200006ac 	.word	0x200006ac
 8008870:	08009124 	.word	0x08009124

08008874 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	4603      	mov	r3, r0
 800887c:	6039      	str	r1, [r7, #0]
 800887e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	4904      	ldr	r1, [pc, #16]	@ (8008894 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008884:	4804      	ldr	r0, [pc, #16]	@ (8008898 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008886:	f7ff fe3d 	bl	8008504 <USBD_GetString>
  return USBD_StrDesc;
 800888a:	4b02      	ldr	r3, [pc, #8]	@ (8008894 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800888c:	4618      	mov	r0, r3
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	200006ac 	.word	0x200006ac
 8008898:	08009138 	.word	0x08009138

0800889c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	4603      	mov	r3, r0
 80088a4:	6039      	str	r1, [r7, #0]
 80088a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	221a      	movs	r2, #26
 80088ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80088ae:	f000 f843 	bl	8008938 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80088b2:	4b02      	ldr	r3, [pc, #8]	@ (80088bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	20000108 	.word	0x20000108

080088c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	4603      	mov	r3, r0
 80088c8:	6039      	str	r1, [r7, #0]
 80088ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80088cc:	79fb      	ldrb	r3, [r7, #7]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d105      	bne.n	80088de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	4907      	ldr	r1, [pc, #28]	@ (80088f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80088d6:	4808      	ldr	r0, [pc, #32]	@ (80088f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088d8:	f7ff fe14 	bl	8008504 <USBD_GetString>
 80088dc:	e004      	b.n	80088e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	4904      	ldr	r1, [pc, #16]	@ (80088f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80088e2:	4805      	ldr	r0, [pc, #20]	@ (80088f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088e4:	f7ff fe0e 	bl	8008504 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088e8:	4b02      	ldr	r3, [pc, #8]	@ (80088f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	200006ac 	.word	0x200006ac
 80088f8:	0800914c 	.word	0x0800914c

080088fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	4603      	mov	r3, r0
 8008904:	6039      	str	r1, [r7, #0]
 8008906:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008908:	79fb      	ldrb	r3, [r7, #7]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d105      	bne.n	800891a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	4907      	ldr	r1, [pc, #28]	@ (8008930 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008912:	4808      	ldr	r0, [pc, #32]	@ (8008934 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008914:	f7ff fdf6 	bl	8008504 <USBD_GetString>
 8008918:	e004      	b.n	8008924 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	4904      	ldr	r1, [pc, #16]	@ (8008930 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800891e:	4805      	ldr	r0, [pc, #20]	@ (8008934 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008920:	f7ff fdf0 	bl	8008504 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008924:	4b02      	ldr	r3, [pc, #8]	@ (8008930 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008926:	4618      	mov	r0, r3
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	200006ac 	.word	0x200006ac
 8008934:	0800915c 	.word	0x0800915c

08008938 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800893e:	4b0f      	ldr	r3, [pc, #60]	@ (800897c <Get_SerialNum+0x44>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008944:	4b0e      	ldr	r3, [pc, #56]	@ (8008980 <Get_SerialNum+0x48>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800894a:	4b0e      	ldr	r3, [pc, #56]	@ (8008984 <Get_SerialNum+0x4c>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4413      	add	r3, r2
 8008956:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d009      	beq.n	8008972 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800895e:	2208      	movs	r2, #8
 8008960:	4909      	ldr	r1, [pc, #36]	@ (8008988 <Get_SerialNum+0x50>)
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f000 f814 	bl	8008990 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008968:	2204      	movs	r2, #4
 800896a:	4908      	ldr	r1, [pc, #32]	@ (800898c <Get_SerialNum+0x54>)
 800896c:	68b8      	ldr	r0, [r7, #8]
 800896e:	f000 f80f 	bl	8008990 <IntToUnicode>
  }
}
 8008972:	bf00      	nop
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	1fff7a10 	.word	0x1fff7a10
 8008980:	1fff7a14 	.word	0x1fff7a14
 8008984:	1fff7a18 	.word	0x1fff7a18
 8008988:	2000010a 	.word	0x2000010a
 800898c:	2000011a 	.word	0x2000011a

08008990 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008990:	b480      	push	{r7}
 8008992:	b087      	sub	sp, #28
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	4613      	mov	r3, r2
 800899c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800899e:	2300      	movs	r3, #0
 80089a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80089a2:	2300      	movs	r3, #0
 80089a4:	75fb      	strb	r3, [r7, #23]
 80089a6:	e027      	b.n	80089f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	0f1b      	lsrs	r3, r3, #28
 80089ac:	2b09      	cmp	r3, #9
 80089ae:	d80b      	bhi.n	80089c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	0f1b      	lsrs	r3, r3, #28
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	005b      	lsls	r3, r3, #1
 80089ba:	4619      	mov	r1, r3
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	440b      	add	r3, r1
 80089c0:	3230      	adds	r2, #48	@ 0x30
 80089c2:	b2d2      	uxtb	r2, r2
 80089c4:	701a      	strb	r2, [r3, #0]
 80089c6:	e00a      	b.n	80089de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	0f1b      	lsrs	r3, r3, #28
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	7dfb      	ldrb	r3, [r7, #23]
 80089d0:	005b      	lsls	r3, r3, #1
 80089d2:	4619      	mov	r1, r3
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	440b      	add	r3, r1
 80089d8:	3237      	adds	r2, #55	@ 0x37
 80089da:	b2d2      	uxtb	r2, r2
 80089dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	011b      	lsls	r3, r3, #4
 80089e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80089e4:	7dfb      	ldrb	r3, [r7, #23]
 80089e6:	005b      	lsls	r3, r3, #1
 80089e8:	3301      	adds	r3, #1
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	4413      	add	r3, r2
 80089ee:	2200      	movs	r2, #0
 80089f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80089f2:	7dfb      	ldrb	r3, [r7, #23]
 80089f4:	3301      	adds	r3, #1
 80089f6:	75fb      	strb	r3, [r7, #23]
 80089f8:	7dfa      	ldrb	r2, [r7, #23]
 80089fa:	79fb      	ldrb	r3, [r7, #7]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d3d3      	bcc.n	80089a8 <IntToUnicode+0x18>
  }
}
 8008a00:	bf00      	nop
 8008a02:	bf00      	nop
 8008a04:	371c      	adds	r7, #28
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
	...

08008a10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b08a      	sub	sp, #40	@ 0x28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a18:	f107 0314 	add.w	r3, r7, #20
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	601a      	str	r2, [r3, #0]
 8008a20:	605a      	str	r2, [r3, #4]
 8008a22:	609a      	str	r2, [r3, #8]
 8008a24:	60da      	str	r2, [r3, #12]
 8008a26:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a30:	d158      	bne.n	8008ae4 <HAL_PCD_MspInit+0xd4>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a32:	2300      	movs	r3, #0
 8008a34:	613b      	str	r3, [r7, #16]
 8008a36:	4b2d      	ldr	r3, [pc, #180]	@ (8008aec <HAL_PCD_MspInit+0xdc>)
 8008a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a3a:	4a2c      	ldr	r2, [pc, #176]	@ (8008aec <HAL_PCD_MspInit+0xdc>)
 8008a3c:	f043 0301 	orr.w	r3, r3, #1
 8008a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8008a42:	4b2a      	ldr	r3, [pc, #168]	@ (8008aec <HAL_PCD_MspInit+0xdc>)
 8008a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a46:	f003 0301 	and.w	r3, r3, #1
 8008a4a:	613b      	str	r3, [r7, #16]
 8008a4c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008a4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a54:	2300      	movs	r3, #0
 8008a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008a5c:	f107 0314 	add.w	r3, r7, #20
 8008a60:	4619      	mov	r1, r3
 8008a62:	4823      	ldr	r0, [pc, #140]	@ (8008af0 <HAL_PCD_MspInit+0xe0>)
 8008a64:	f7f9 f8da 	bl	8001c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin;
 8008a68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a6e:	2302      	movs	r3, #2
 8008a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a72:	2300      	movs	r3, #0
 8008a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a76:	2300      	movs	r3, #0
 8008a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a7a:	230a      	movs	r3, #10
 8008a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(OTG_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8008a7e:	f107 0314 	add.w	r3, r7, #20
 8008a82:	4619      	mov	r1, r3
 8008a84:	481a      	ldr	r0, [pc, #104]	@ (8008af0 <HAL_PCD_MspInit+0xe0>)
 8008a86:	f7f9 f8c9 	bl	8001c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008a8a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a90:	2302      	movs	r3, #2
 8008a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a94:	2300      	movs	r3, #0
 8008a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a9c:	230a      	movs	r3, #10
 8008a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008aa0:	f107 0314 	add.w	r3, r7, #20
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	4812      	ldr	r0, [pc, #72]	@ (8008af0 <HAL_PCD_MspInit+0xe0>)
 8008aa8:	f7f9 f8b8 	bl	8001c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008aac:	4b0f      	ldr	r3, [pc, #60]	@ (8008aec <HAL_PCD_MspInit+0xdc>)
 8008aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ab0:	4a0e      	ldr	r2, [pc, #56]	@ (8008aec <HAL_PCD_MspInit+0xdc>)
 8008ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ab6:	6353      	str	r3, [r2, #52]	@ 0x34
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60fb      	str	r3, [r7, #12]
 8008abc:	4b0b      	ldr	r3, [pc, #44]	@ (8008aec <HAL_PCD_MspInit+0xdc>)
 8008abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8008aec <HAL_PCD_MspInit+0xdc>)
 8008ac2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008ac6:	6453      	str	r3, [r2, #68]	@ 0x44
 8008ac8:	4b08      	ldr	r3, [pc, #32]	@ (8008aec <HAL_PCD_MspInit+0xdc>)
 8008aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008acc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ad0:	60fb      	str	r3, [r7, #12]
 8008ad2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	2043      	movs	r0, #67	@ 0x43
 8008ada:	f7f8 fcdc 	bl	8001496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ade:	2043      	movs	r0, #67	@ 0x43
 8008ae0:	f7f8 fcf5 	bl	80014ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008ae4:	bf00      	nop
 8008ae6:	3728      	adds	r7, #40	@ 0x28
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	40023800 	.word	0x40023800
 8008af0:	40020000 	.word	0x40020000

08008af4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008b08:	4619      	mov	r1, r3
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	f7fe fbcf 	bl	80072ae <USBD_LL_SetupStage>
}
 8008b10:	bf00      	nop
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	460b      	mov	r3, r1
 8008b22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008b2a:	78fa      	ldrb	r2, [r7, #3]
 8008b2c:	6879      	ldr	r1, [r7, #4]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	00db      	lsls	r3, r3, #3
 8008b32:	4413      	add	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	440b      	add	r3, r1
 8008b38:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	78fb      	ldrb	r3, [r7, #3]
 8008b40:	4619      	mov	r1, r3
 8008b42:	f7fe fc09 	bl	8007358 <USBD_LL_DataOutStage>
}
 8008b46:	bf00      	nop
 8008b48:	3708      	adds	r7, #8
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b082      	sub	sp, #8
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	460b      	mov	r3, r1
 8008b58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008b60:	78fa      	ldrb	r2, [r7, #3]
 8008b62:	6879      	ldr	r1, [r7, #4]
 8008b64:	4613      	mov	r3, r2
 8008b66:	00db      	lsls	r3, r3, #3
 8008b68:	4413      	add	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	440b      	add	r3, r1
 8008b6e:	3320      	adds	r3, #32
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	78fb      	ldrb	r3, [r7, #3]
 8008b74:	4619      	mov	r1, r3
 8008b76:	f7fe fca2 	bl	80074be <USBD_LL_DataInStage>
}
 8008b7a:	bf00      	nop
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b082      	sub	sp, #8
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7fe fddc 	bl	800774e <USBD_LL_SOF>
}
 8008b96:	bf00      	nop
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b084      	sub	sp, #16
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	79db      	ldrb	r3, [r3, #7]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d102      	bne.n	8008bb8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73fb      	strb	r3, [r7, #15]
 8008bb6:	e008      	b.n	8008bca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	79db      	ldrb	r3, [r3, #7]
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d102      	bne.n	8008bc6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	73fb      	strb	r3, [r7, #15]
 8008bc4:	e001      	b.n	8008bca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008bc6:	f7f8 f92b 	bl	8000e20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008bd0:	7bfa      	ldrb	r2, [r7, #15]
 8008bd2:	4611      	mov	r1, r2
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7fe fd76 	bl	80076c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7fe fd1e 	bl	8007622 <USBD_LL_Reset>
}
 8008be6:	bf00      	nop
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fe fd71 	bl	80076e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	6812      	ldr	r2, [r2, #0]
 8008c12:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008c16:	f043 0301 	orr.w	r3, r3, #1
 8008c1a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	7adb      	ldrb	r3, [r3, #11]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d005      	beq.n	8008c30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c24:	4b04      	ldr	r3, [pc, #16]	@ (8008c38 <HAL_PCD_SuspendCallback+0x48>)
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	4a03      	ldr	r2, [pc, #12]	@ (8008c38 <HAL_PCD_SuspendCallback+0x48>)
 8008c2a:	f043 0306 	orr.w	r3, r3, #6
 8008c2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	e000ed00 	.word	0xe000ed00

08008c3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fe fd67 	bl	800771e <USBD_LL_Resume>
}
 8008c50:	bf00      	nop
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	460b      	mov	r3, r1
 8008c62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c6a:	78fa      	ldrb	r2, [r7, #3]
 8008c6c:	4611      	mov	r1, r2
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fe fdbf 	bl	80077f2 <USBD_LL_IsoOUTIncomplete>
}
 8008c74:	bf00      	nop
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	460b      	mov	r3, r1
 8008c86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c8e:	78fa      	ldrb	r2, [r7, #3]
 8008c90:	4611      	mov	r1, r2
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe fd7b 	bl	800778e <USBD_LL_IsoINIncomplete>
}
 8008c98:	bf00      	nop
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fe fdd1 	bl	8007856 <USBD_LL_DevConnected>
}
 8008cb4:	bf00      	nop
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fe fdce 	bl	800786c <USBD_LL_DevDisconnected>
}
 8008cd0:	bf00      	nop
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d13c      	bne.n	8008d62 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ce8:	4a20      	ldr	r2, [pc, #128]	@ (8008d6c <USBD_LL_Init+0x94>)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8008d6c <USBD_LL_Init+0x94>)
 8008cf4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8008d6c <USBD_LL_Init+0x94>)
 8008cfa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008cfe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008d00:	4b1a      	ldr	r3, [pc, #104]	@ (8008d6c <USBD_LL_Init+0x94>)
 8008d02:	2204      	movs	r2, #4
 8008d04:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008d06:	4b19      	ldr	r3, [pc, #100]	@ (8008d6c <USBD_LL_Init+0x94>)
 8008d08:	2202      	movs	r2, #2
 8008d0a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d0c:	4b17      	ldr	r3, [pc, #92]	@ (8008d6c <USBD_LL_Init+0x94>)
 8008d0e:	2200      	movs	r2, #0
 8008d10:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008d12:	4b16      	ldr	r3, [pc, #88]	@ (8008d6c <USBD_LL_Init+0x94>)
 8008d14:	2202      	movs	r2, #2
 8008d16:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d18:	4b14      	ldr	r3, [pc, #80]	@ (8008d6c <USBD_LL_Init+0x94>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008d1e:	4b13      	ldr	r3, [pc, #76]	@ (8008d6c <USBD_LL_Init+0x94>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008d24:	4b11      	ldr	r3, [pc, #68]	@ (8008d6c <USBD_LL_Init+0x94>)
 8008d26:	2200      	movs	r2, #0
 8008d28:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008d2a:	4b10      	ldr	r3, [pc, #64]	@ (8008d6c <USBD_LL_Init+0x94>)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008d30:	4b0e      	ldr	r3, [pc, #56]	@ (8008d6c <USBD_LL_Init+0x94>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008d36:	480d      	ldr	r0, [pc, #52]	@ (8008d6c <USBD_LL_Init+0x94>)
 8008d38:	f7f9 feee 	bl	8002b18 <HAL_PCD_Init>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d001      	beq.n	8008d46 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008d42:	f7f8 f86d 	bl	8000e20 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008d46:	2180      	movs	r1, #128	@ 0x80
 8008d48:	4808      	ldr	r0, [pc, #32]	@ (8008d6c <USBD_LL_Init+0x94>)
 8008d4a:	f7fb f948 	bl	8003fde <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008d4e:	2240      	movs	r2, #64	@ 0x40
 8008d50:	2100      	movs	r1, #0
 8008d52:	4806      	ldr	r0, [pc, #24]	@ (8008d6c <USBD_LL_Init+0x94>)
 8008d54:	f7fb f8fc 	bl	8003f50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d58:	2280      	movs	r2, #128	@ 0x80
 8008d5a:	2101      	movs	r1, #1
 8008d5c:	4803      	ldr	r0, [pc, #12]	@ (8008d6c <USBD_LL_Init+0x94>)
 8008d5e:	f7fb f8f7 	bl	8003f50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	200008ac 	.word	0x200008ac

08008d70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7f9 ffd5 	bl	8002d36 <HAL_PCD_Start>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 f962 	bl	800905c <USBD_Get_USB_Status>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	4608      	mov	r0, r1
 8008db0:	4611      	mov	r1, r2
 8008db2:	461a      	mov	r2, r3
 8008db4:	4603      	mov	r3, r0
 8008db6:	70fb      	strb	r3, [r7, #3]
 8008db8:	460b      	mov	r3, r1
 8008dba:	70bb      	strb	r3, [r7, #2]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008dce:	78bb      	ldrb	r3, [r7, #2]
 8008dd0:	883a      	ldrh	r2, [r7, #0]
 8008dd2:	78f9      	ldrb	r1, [r7, #3]
 8008dd4:	f7fa fca9 	bl	800372a <HAL_PCD_EP_Open>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f000 f93c 	bl	800905c <USBD_Get_USB_Status>
 8008de4:	4603      	mov	r3, r0
 8008de6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008de8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b084      	sub	sp, #16
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e0c:	78fa      	ldrb	r2, [r7, #3]
 8008e0e:	4611      	mov	r1, r2
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fa fcf4 	bl	80037fe <HAL_PCD_EP_Close>
 8008e16:	4603      	mov	r3, r0
 8008e18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 f91d 	bl	800905c <USBD_Get_USB_Status>
 8008e22:	4603      	mov	r3, r0
 8008e24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e26:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e4a:	78fa      	ldrb	r2, [r7, #3]
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fa fe96 	bl	8003b80 <HAL_PCD_EP_Flush>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 f8fe 	bl	800905c <USBD_Get_USB_Status>
 8008e60:	4603      	mov	r3, r0
 8008e62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	460b      	mov	r3, r1
 8008e78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e88:	78fa      	ldrb	r2, [r7, #3]
 8008e8a:	4611      	mov	r1, r2
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7fa fd8d 	bl	80039ac <HAL_PCD_EP_SetStall>
 8008e92:	4603      	mov	r3, r0
 8008e94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e96:	7bfb      	ldrb	r3, [r7, #15]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f000 f8df 	bl	800905c <USBD_Get_USB_Status>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ea2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ec6:	78fa      	ldrb	r2, [r7, #3]
 8008ec8:	4611      	mov	r1, r2
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fa fdd1 	bl	8003a72 <HAL_PCD_EP_ClrStall>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 f8c0 	bl	800905c <USBD_Get_USB_Status>
 8008edc:	4603      	mov	r3, r0
 8008ede:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ee0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b085      	sub	sp, #20
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008efc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008efe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	da0b      	bge.n	8008f1e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008f06:	78fb      	ldrb	r3, [r7, #3]
 8008f08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f0c:	68f9      	ldr	r1, [r7, #12]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	00db      	lsls	r3, r3, #3
 8008f12:	4413      	add	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	440b      	add	r3, r1
 8008f18:	3316      	adds	r3, #22
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	e00b      	b.n	8008f36 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008f1e:	78fb      	ldrb	r3, [r7, #3]
 8008f20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f24:	68f9      	ldr	r1, [r7, #12]
 8008f26:	4613      	mov	r3, r2
 8008f28:	00db      	lsls	r3, r3, #3
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	440b      	add	r3, r1
 8008f30:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008f34:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b084      	sub	sp, #16
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f5c:	78fa      	ldrb	r2, [r7, #3]
 8008f5e:	4611      	mov	r1, r2
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fa fbbe 	bl	80036e2 <HAL_PCD_SetAddress>
 8008f66:	4603      	mov	r3, r0
 8008f68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 f875 	bl	800905c <USBD_Get_USB_Status>
 8008f72:	4603      	mov	r3, r0
 8008f74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f76:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	607a      	str	r2, [r7, #4]
 8008f8a:	603b      	str	r3, [r7, #0]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008f9e:	7af9      	ldrb	r1, [r7, #11]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	f7fa fcc8 	bl	8003938 <HAL_PCD_EP_Transmit>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fac:	7dfb      	ldrb	r3, [r7, #23]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 f854 	bl	800905c <USBD_Get_USB_Status>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008fb8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3718      	adds	r7, #24
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b086      	sub	sp, #24
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	60f8      	str	r0, [r7, #12]
 8008fca:	607a      	str	r2, [r7, #4]
 8008fcc:	603b      	str	r3, [r7, #0]
 8008fce:	460b      	mov	r3, r1
 8008fd0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008fe0:	7af9      	ldrb	r1, [r7, #11]
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	f7fa fc54 	bl	8003892 <HAL_PCD_EP_Receive>
 8008fea:	4603      	mov	r3, r0
 8008fec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f000 f833 	bl	800905c <USBD_Get_USB_Status>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ffa:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3718      	adds	r7, #24
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	460b      	mov	r3, r1
 800900e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009016:	78fa      	ldrb	r2, [r7, #3]
 8009018:	4611      	mov	r1, r2
 800901a:	4618      	mov	r0, r3
 800901c:	f7fa fc74 	bl	8003908 <HAL_PCD_EP_GetRxCount>
 8009020:	4603      	mov	r3, r0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
	...

0800902c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009034:	4b03      	ldr	r3, [pc, #12]	@ (8009044 <USBD_static_malloc+0x18>)
}
 8009036:	4618      	mov	r0, r3
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	20000d90 	.word	0x20000d90

08009048 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]

}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	4603      	mov	r3, r0
 8009064:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800906a:	79fb      	ldrb	r3, [r7, #7]
 800906c:	2b03      	cmp	r3, #3
 800906e:	d817      	bhi.n	80090a0 <USBD_Get_USB_Status+0x44>
 8009070:	a201      	add	r2, pc, #4	@ (adr r2, 8009078 <USBD_Get_USB_Status+0x1c>)
 8009072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009076:	bf00      	nop
 8009078:	08009089 	.word	0x08009089
 800907c:	0800908f 	.word	0x0800908f
 8009080:	08009095 	.word	0x08009095
 8009084:	0800909b 	.word	0x0800909b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009088:	2300      	movs	r3, #0
 800908a:	73fb      	strb	r3, [r7, #15]
    break;
 800908c:	e00b      	b.n	80090a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800908e:	2303      	movs	r3, #3
 8009090:	73fb      	strb	r3, [r7, #15]
    break;
 8009092:	e008      	b.n	80090a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009094:	2301      	movs	r3, #1
 8009096:	73fb      	strb	r3, [r7, #15]
    break;
 8009098:	e005      	b.n	80090a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800909a:	2303      	movs	r3, #3
 800909c:	73fb      	strb	r3, [r7, #15]
    break;
 800909e:	e002      	b.n	80090a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80090a0:	2303      	movs	r3, #3
 80090a2:	73fb      	strb	r3, [r7, #15]
    break;
 80090a4:	bf00      	nop
  }
  return usb_status;
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <memset>:
 80090b4:	4402      	add	r2, r0
 80090b6:	4603      	mov	r3, r0
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d100      	bne.n	80090be <memset+0xa>
 80090bc:	4770      	bx	lr
 80090be:	f803 1b01 	strb.w	r1, [r3], #1
 80090c2:	e7f9      	b.n	80090b8 <memset+0x4>

080090c4 <__libc_init_array>:
 80090c4:	b570      	push	{r4, r5, r6, lr}
 80090c6:	4d0d      	ldr	r5, [pc, #52]	@ (80090fc <__libc_init_array+0x38>)
 80090c8:	4c0d      	ldr	r4, [pc, #52]	@ (8009100 <__libc_init_array+0x3c>)
 80090ca:	1b64      	subs	r4, r4, r5
 80090cc:	10a4      	asrs	r4, r4, #2
 80090ce:	2600      	movs	r6, #0
 80090d0:	42a6      	cmp	r6, r4
 80090d2:	d109      	bne.n	80090e8 <__libc_init_array+0x24>
 80090d4:	4d0b      	ldr	r5, [pc, #44]	@ (8009104 <__libc_init_array+0x40>)
 80090d6:	4c0c      	ldr	r4, [pc, #48]	@ (8009108 <__libc_init_array+0x44>)
 80090d8:	f000 f818 	bl	800910c <_init>
 80090dc:	1b64      	subs	r4, r4, r5
 80090de:	10a4      	asrs	r4, r4, #2
 80090e0:	2600      	movs	r6, #0
 80090e2:	42a6      	cmp	r6, r4
 80090e4:	d105      	bne.n	80090f2 <__libc_init_array+0x2e>
 80090e6:	bd70      	pop	{r4, r5, r6, pc}
 80090e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80090ec:	4798      	blx	r3
 80090ee:	3601      	adds	r6, #1
 80090f0:	e7ee      	b.n	80090d0 <__libc_init_array+0xc>
 80090f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80090f6:	4798      	blx	r3
 80090f8:	3601      	adds	r6, #1
 80090fa:	e7f2      	b.n	80090e2 <__libc_init_array+0x1e>
 80090fc:	0800918c 	.word	0x0800918c
 8009100:	0800918c 	.word	0x0800918c
 8009104:	0800918c 	.word	0x0800918c
 8009108:	08009190 	.word	0x08009190

0800910c <_init>:
 800910c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910e:	bf00      	nop
 8009110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009112:	bc08      	pop	{r3}
 8009114:	469e      	mov	lr, r3
 8009116:	4770      	bx	lr

08009118 <_fini>:
 8009118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911a:	bf00      	nop
 800911c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800911e:	bc08      	pop	{r3}
 8009120:	469e      	mov	lr, r3
 8009122:	4770      	bx	lr
