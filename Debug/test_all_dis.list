
test_all_dis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e40c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  0800e59c  0800e59c  0000f59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e774  0800e774  00010168  2**0
                  CONTENTS
  4 .ARM          00000008  0800e774  0800e774  0000f774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e77c  0800e77c  00010168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e77c  0800e77c  0000f77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e780  0800e780  0000f780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0800e784  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010168  2**0
                  CONTENTS
 10 .bss          00006a58  20000168  20000168  00010168  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  20006bc0  20006bc0  00010168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010168  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026f2e  00000000  00000000  00010198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005dc3  00000000  00000000  000370c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ff0  00000000  00000000  0003ce90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000187a  00000000  00000000  0003ee80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a7e  00000000  00000000  000406fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027f2e  00000000  00000000  00068178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df045  00000000  00000000  000900a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016f0eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008cf4  00000000  00000000  0016f130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00177e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e584 	.word	0x0800e584

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	0800e584 	.word	0x0800e584

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <cs5361_set_mode>:
/* External variable declaration for I2S handle */
extern I2S_HandleTypeDef hi2s3;
/* External variable declaration for USB Device handle */

void cs5361_set_mode(cs5361_mode_t mode)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
  switch (mode)
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d002      	beq.n	8000576 <cs5361_set_mode+0x16>
 8000570:	2b01      	cmp	r3, #1
 8000572:	d007      	beq.n	8000584 <cs5361_set_mode+0x24>
    break;
  case CS5361_SLAVE_MODE:
    HAL_GPIO_WritePin(CS5361_MS_GPIO_Port, CS5361_MS_Pin, 0);
    break;
  default:
    break;
 8000574:	e00d      	b.n	8000592 <cs5361_set_mode+0x32>
    HAL_GPIO_WritePin(CS5361_MS_GPIO_Port, CS5361_MS_Pin, 1);
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800057c:	4807      	ldr	r0, [pc, #28]	@ (800059c <cs5361_set_mode+0x3c>)
 800057e:	f001 fd71 	bl	8002064 <HAL_GPIO_WritePin>
    break;
 8000582:	e006      	b.n	8000592 <cs5361_set_mode+0x32>
    HAL_GPIO_WritePin(CS5361_MS_GPIO_Port, CS5361_MS_Pin, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800058a:	4804      	ldr	r0, [pc, #16]	@ (800059c <cs5361_set_mode+0x3c>)
 800058c:	f001 fd6a 	bl	8002064 <HAL_GPIO_WritePin>
    break;
 8000590:	bf00      	nop
  }
}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40020c00 	.word	0x40020c00

080005a0 <cs5361_set_speed_mode>:
void cs5361_set_speed_mode(cs5361_speed_mode_t speed)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
  switch (speed)
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d020      	beq.n	80005f2 <cs5361_set_speed_mode+0x52>
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	dc2b      	bgt.n	800060c <cs5361_set_speed_mode+0x6c>
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d002      	beq.n	80005be <cs5361_set_speed_mode+0x1e>
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d00d      	beq.n	80005d8 <cs5361_set_speed_mode+0x38>
  case CS5361_QUAD_SPEED:
    HAL_GPIO_WritePin(CS5361_M0_GPIO_Port, CS5361_M0_Pin, 0);
    HAL_GPIO_WritePin(CS5361_M1_GPIO_Port, CS5361_M1_Pin, 1);
    break;
  default:
    break;
 80005bc:	e026      	b.n	800060c <cs5361_set_speed_mode+0x6c>
    HAL_GPIO_WritePin(CS5361_M0_GPIO_Port, CS5361_M0_Pin, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005c4:	4814      	ldr	r0, [pc, #80]	@ (8000618 <cs5361_set_speed_mode+0x78>)
 80005c6:	f001 fd4d 	bl	8002064 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS5361_M1_GPIO_Port, CS5361_M1_Pin, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005d0:	4811      	ldr	r0, [pc, #68]	@ (8000618 <cs5361_set_speed_mode+0x78>)
 80005d2:	f001 fd47 	bl	8002064 <HAL_GPIO_WritePin>
    break;
 80005d6:	e01a      	b.n	800060e <cs5361_set_speed_mode+0x6e>
    HAL_GPIO_WritePin(CS5361_M0_GPIO_Port, CS5361_M0_Pin, 1);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005de:	480e      	ldr	r0, [pc, #56]	@ (8000618 <cs5361_set_speed_mode+0x78>)
 80005e0:	f001 fd40 	bl	8002064 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS5361_M1_GPIO_Port, CS5361_M1_Pin, 0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005ea:	480b      	ldr	r0, [pc, #44]	@ (8000618 <cs5361_set_speed_mode+0x78>)
 80005ec:	f001 fd3a 	bl	8002064 <HAL_GPIO_WritePin>
    break;
 80005f0:	e00d      	b.n	800060e <cs5361_set_speed_mode+0x6e>
    HAL_GPIO_WritePin(CS5361_M0_GPIO_Port, CS5361_M0_Pin, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005f8:	4807      	ldr	r0, [pc, #28]	@ (8000618 <cs5361_set_speed_mode+0x78>)
 80005fa:	f001 fd33 	bl	8002064 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS5361_M1_GPIO_Port, CS5361_M1_Pin, 1);
 80005fe:	2201      	movs	r2, #1
 8000600:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000604:	4804      	ldr	r0, [pc, #16]	@ (8000618 <cs5361_set_speed_mode+0x78>)
 8000606:	f001 fd2d 	bl	8002064 <HAL_GPIO_WritePin>
    break;
 800060a:	e000      	b.n	800060e <cs5361_set_speed_mode+0x6e>
    break;
 800060c:	bf00      	nop
  }
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40020c00 	.word	0x40020c00

0800061c <cs5361_set_mdiv>:
void cs5361_set_mdiv(cs5361_mdiv_mode_t mdiv)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
  switch (mdiv)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <cs5361_set_mdiv+0x16>
 800062c:	2b01      	cmp	r3, #1
 800062e:	d007      	beq.n	8000640 <cs5361_set_mdiv+0x24>
    break;
  case CS5361_MDIV_2:
    HAL_GPIO_WritePin(CS5361_MDIV_GPIO_Port, CS5361_MDIV_Pin, 1);
    break;
  default:
    break;
 8000630:	e00d      	b.n	800064e <cs5361_set_mdiv+0x32>
    HAL_GPIO_WritePin(CS5361_MDIV_GPIO_Port, CS5361_MDIV_Pin, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000638:	4807      	ldr	r0, [pc, #28]	@ (8000658 <cs5361_set_mdiv+0x3c>)
 800063a:	f001 fd13 	bl	8002064 <HAL_GPIO_WritePin>
    break;
 800063e:	e006      	b.n	800064e <cs5361_set_mdiv+0x32>
    HAL_GPIO_WritePin(CS5361_MDIV_GPIO_Port, CS5361_MDIV_Pin, 1);
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000646:	4804      	ldr	r0, [pc, #16]	@ (8000658 <cs5361_set_mdiv+0x3c>)
 8000648:	f001 fd0c 	bl	8002064 <HAL_GPIO_WritePin>
    break;
 800064c:	bf00      	nop
  }
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40020c00 	.word	0x40020c00

0800065c <cs5361_set_hpf>:
void cs5361_set_hpf(cs5361_hpf_mode_t hpf)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  switch (hpf)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d002      	beq.n	8000672 <cs5361_set_hpf+0x16>
 800066c:	2b01      	cmp	r3, #1
 800066e:	d007      	beq.n	8000680 <cs5361_set_hpf+0x24>
    break;
  case CS5361_HPF_ENABLE:
    HAL_GPIO_WritePin(CS5361_HPF_GPIO_Port, CS5361_HPF_Pin, 0);
    break;
  default:
    break;
 8000670:	e00d      	b.n	800068e <cs5361_set_hpf+0x32>
    HAL_GPIO_WritePin(CS5361_HPF_GPIO_Port, CS5361_HPF_Pin, 1);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000678:	4807      	ldr	r0, [pc, #28]	@ (8000698 <cs5361_set_hpf+0x3c>)
 800067a:	f001 fcf3 	bl	8002064 <HAL_GPIO_WritePin>
    break;
 800067e:	e006      	b.n	800068e <cs5361_set_hpf+0x32>
    HAL_GPIO_WritePin(CS5361_HPF_GPIO_Port, CS5361_HPF_Pin, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000686:	4804      	ldr	r0, [pc, #16]	@ (8000698 <cs5361_set_hpf+0x3c>)
 8000688:	f001 fcec 	bl	8002064 <HAL_GPIO_WritePin>
    break;
 800068c:	bf00      	nop
  }
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40020400 	.word	0x40020400

0800069c <cs5361_set_sa>:
void cs5361_set_sa(cs5361_sa_mode_t sa)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
  switch (sa)
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <cs5361_set_sa+0x16>
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d007      	beq.n	80006c0 <cs5361_set_sa+0x24>
    break;
  case CS5361_LEFT_JUSTIFIED_MODE:
    HAL_GPIO_WritePin(CS5361_SA_GPIO_Port, CS5361_SA_Pin, 0);
    break;
  default:
    break;
 80006b0:	e00d      	b.n	80006ce <cs5361_set_sa+0x32>
    HAL_GPIO_WritePin(CS5361_SA_GPIO_Port, CS5361_SA_Pin, 1);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <cs5361_set_sa+0x3c>)
 80006ba:	f001 fcd3 	bl	8002064 <HAL_GPIO_WritePin>
    break;
 80006be:	e006      	b.n	80006ce <cs5361_set_sa+0x32>
    HAL_GPIO_WritePin(CS5361_SA_GPIO_Port, CS5361_SA_Pin, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <cs5361_set_sa+0x3c>)
 80006c8:	f001 fccc 	bl	8002064 <HAL_GPIO_WritePin>
    break;
 80006cc:	bf00      	nop
  }
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40020400 	.word	0x40020400

080006dc <cs5361_powerup>:
void cs5361_powerdown(void)
{
  HAL_GPIO_WritePin(CS5361_RST_GPIO_Port, CS5361_RST_Pin, 0);
}
void cs5361_powerup(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(CS5361_RST_GPIO_Port, CS5361_RST_Pin, 1);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006e6:	4802      	ldr	r0, [pc, #8]	@ (80006f0 <cs5361_powerup+0x14>)
 80006e8:	f001 fcbc 	bl	8002064 <HAL_GPIO_WritePin>
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40020400 	.word	0x40020400

080006f4 <cs5361_init>:
void cs5361_init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  cs5361_set_mode(CS5361_SLAVE_MODE);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f7ff ff31 	bl	8000560 <cs5361_set_mode>
  cs5361_set_speed_mode(CS5361_SINGLE_SPEED);
 80006fe:	2000      	movs	r0, #0
 8000700:	f7ff ff4e 	bl	80005a0 <cs5361_set_speed_mode>
  cs5361_set_mdiv(CS5361_MDIV_2);
 8000704:	2001      	movs	r0, #1
 8000706:	f7ff ff89 	bl	800061c <cs5361_set_mdiv>
  cs5361_set_hpf(CS5361_HPF_ENABLE);
 800070a:	2001      	movs	r0, #1
 800070c:	f7ff ffa6 	bl	800065c <cs5361_set_hpf>
  cs5361_set_sa(CS5361_I2S_MODE);
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff ffc3 	bl	800069c <cs5361_set_sa>
  cs5361_powerup();
 8000716:	f7ff ffe1 	bl	80006dc <cs5361_powerup>
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000724:	f000 fe2e 	bl	8001384 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000728:	f000 f852 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072c:	f000 f992 	bl	8000a54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000730:	f000 f970 	bl	8000a14 <MX_DMA_Init>
  MX_TIM4_Init();
 8000734:	f000 f8f8 	bl	8000928 <MX_TIM4_Init>
  MX_CRC_Init();
 8000738:	f000 f8b4 	bl	80008a4 <MX_CRC_Init>
  MX_I2S3_Init();
 800073c:	f000 f8c6 	bl	80008cc <MX_I2S3_Init>
  MX_USART2_UART_Init();
 8000740:	f000 f93e 	bl	80009c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000744:	f008 fe6e 	bl	8009424 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew(4, sizeof(AudioBuffer_t), &myQueue01_attributes);
 8000748:	4a14      	ldr	r2, [pc, #80]	@ (800079c <main+0x7c>)
 800074a:	2108      	movs	r1, #8
 800074c:	2004      	movs	r0, #4
 800074e:	f009 f843 	bl	80097d8 <osMessageQueueNew>
 8000752:	4603      	mov	r3, r0
 8000754:	4a12      	ldr	r2, [pc, #72]	@ (80007a0 <main+0x80>)
 8000756:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of init */
  initHandle = osThreadNew(InitTask, NULL, &init_attributes);
 8000758:	4a12      	ldr	r2, [pc, #72]	@ (80007a4 <main+0x84>)
 800075a:	2100      	movs	r1, #0
 800075c:	4812      	ldr	r0, [pc, #72]	@ (80007a8 <main+0x88>)
 800075e:	f008 feab 	bl	80094b8 <osThreadNew>
 8000762:	4603      	mov	r3, r0
 8000764:	4a11      	ldr	r2, [pc, #68]	@ (80007ac <main+0x8c>)
 8000766:	6013      	str	r3, [r2, #0]

  /* creation of audioprocess */
  audioprocessHandle = osThreadNew(AudioProcessTask, NULL, &audioprocess_attributes);
 8000768:	4a11      	ldr	r2, [pc, #68]	@ (80007b0 <main+0x90>)
 800076a:	2100      	movs	r1, #0
 800076c:	4811      	ldr	r0, [pc, #68]	@ (80007b4 <main+0x94>)
 800076e:	f008 fea3 	bl	80094b8 <osThreadNew>
 8000772:	4603      	mov	r3, r0
 8000774:	4a10      	ldr	r2, [pc, #64]	@ (80007b8 <main+0x98>)
 8000776:	6013      	str	r3, [r2, #0]

  /* creation of usbtransmit */
  usbtransmitHandle = osThreadNew(UsbTransmitTask, NULL, &usbtransmit_attributes);
 8000778:	4a10      	ldr	r2, [pc, #64]	@ (80007bc <main+0x9c>)
 800077a:	2100      	movs	r1, #0
 800077c:	4810      	ldr	r0, [pc, #64]	@ (80007c0 <main+0xa0>)
 800077e:	f008 fe9b 	bl	80094b8 <osThreadNew>
 8000782:	4603      	mov	r3, r0
 8000784:	4a0f      	ldr	r2, [pc, #60]	@ (80007c4 <main+0xa4>)
 8000786:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of usbTransmitEvent */
  usbTransmitEventHandle = osEventFlagsNew(&usbTransmitEvent_attributes);
 8000788:	480f      	ldr	r0, [pc, #60]	@ (80007c8 <main+0xa8>)
 800078a:	f008 ffe6 	bl	800975a <osEventFlagsNew>
 800078e:	4603      	mov	r3, r0
 8000790:	4a0e      	ldr	r2, [pc, #56]	@ (80007cc <main+0xac>)
 8000792:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000794:	f008 fe6a 	bl	800946c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <main+0x78>
 800079c:	0800e6f8 	.word	0x0800e6f8
 80007a0:	200002d0 	.word	0x200002d0
 80007a4:	0800e68c 	.word	0x0800e68c
 80007a8:	08000c21 	.word	0x08000c21
 80007ac:	200002c4 	.word	0x200002c4
 80007b0:	0800e6b0 	.word	0x0800e6b0
 80007b4:	08000cad 	.word	0x08000cad
 80007b8:	200002c8 	.word	0x200002c8
 80007bc:	0800e6d4 	.word	0x0800e6d4
 80007c0:	08000cfd 	.word	0x08000cfd
 80007c4:	200002cc 	.word	0x200002cc
 80007c8:	0800e710 	.word	0x0800e710
 80007cc:	200002d4 	.word	0x200002d4

080007d0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	@ 0x50
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	2230      	movs	r2, #48	@ 0x30
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f00d f8e8 	bl	800d9b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	4b28      	ldr	r3, [pc, #160]	@ (800089c <SystemClock_Config+0xcc>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fc:	4a27      	ldr	r2, [pc, #156]	@ (800089c <SystemClock_Config+0xcc>)
 80007fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000802:	6413      	str	r3, [r2, #64]	@ 0x40
 8000804:	4b25      	ldr	r3, [pc, #148]	@ (800089c <SystemClock_Config+0xcc>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <SystemClock_Config+0xd0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a21      	ldr	r2, [pc, #132]	@ (80008a0 <SystemClock_Config+0xd0>)
 800081a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	4b1f      	ldr	r3, [pc, #124]	@ (80008a0 <SystemClock_Config+0xd0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082c:	2301      	movs	r3, #1
 800082e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000830:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800083e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000840:	2308      	movs	r3, #8
 8000842:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000844:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000848:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800084a:	2302      	movs	r3, #2
 800084c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800084e:	2307      	movs	r3, #7
 8000850:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000852:	f107 0320 	add.w	r3, r7, #32
 8000856:	4618      	mov	r0, r3
 8000858:	f003 fc38 	bl	80040cc <HAL_RCC_OscConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000862:	f000 fa63 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000866:	230f      	movs	r3, #15
 8000868:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086a:	2302      	movs	r3, #2
 800086c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000872:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000876:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000878:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800087c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	2105      	movs	r1, #5
 8000884:	4618      	mov	r0, r3
 8000886:	f003 fe99 	bl	80045bc <HAL_RCC_ClockConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000890:	f000 fa4c 	bl	8000d2c <Error_Handler>
  }
}
 8000894:	bf00      	nop
 8000896:	3750      	adds	r7, #80	@ 0x50
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40007000 	.word	0x40007000

080008a4 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <MX_CRC_Init+0x20>)
 80008aa:	4a07      	ldr	r2, [pc, #28]	@ (80008c8 <MX_CRC_Init+0x24>)
 80008ac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <MX_CRC_Init+0x20>)
 80008b0:	f000 feb0 	bl	8001614 <HAL_CRC_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80008ba:	f000 fa37 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000184 	.word	0x20000184
 80008c8:	40023000 	.word	0x40023000

080008cc <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008d0:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <MX_I2S3_Init+0x54>)
 80008d2:	4a14      	ldr	r2, [pc, #80]	@ (8000924 <MX_I2S3_Init+0x58>)
 80008d4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <MX_I2S3_Init+0x54>)
 80008d8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80008dc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008de:	4b10      	ldr	r3, [pc, #64]	@ (8000920 <MX_I2S3_Init+0x54>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 80008e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <MX_I2S3_Init+0x54>)
 80008e6:	2203      	movs	r2, #3
 80008e8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <MX_I2S3_Init+0x54>)
 80008ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <MX_I2S3_Init+0x54>)
 80008f4:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80008f8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_I2S3_Init+0x54>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000900:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <MX_I2S3_Init+0x54>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_I2S3_Init+0x54>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <MX_I2S3_Init+0x54>)
 800090e:	f001 fbdd 	bl	80020cc <HAL_I2S_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000918:	f000 fa08 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000018c 	.word	0x2000018c
 8000924:	40003c00 	.word	0x40003c00

08000928 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	463b      	mov	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000944:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <MX_TIM4_Init+0x90>)
 8000946:	4a1d      	ldr	r2, [pc, #116]	@ (80009bc <MX_TIM4_Init+0x94>)
 8000948:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6;
 800094a:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <MX_TIM4_Init+0x90>)
 800094c:	2206      	movs	r2, #6
 800094e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <MX_TIM4_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 8000956:	4b18      	ldr	r3, [pc, #96]	@ (80009b8 <MX_TIM4_Init+0x90>)
 8000958:	22f9      	movs	r2, #249	@ 0xf9
 800095a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <MX_TIM4_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <MX_TIM4_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000968:	4813      	ldr	r0, [pc, #76]	@ (80009b8 <MX_TIM4_Init+0x90>)
 800096a:	f004 f9bb 	bl	8004ce4 <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8000974:	f000 f9da 	bl	8000d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	4619      	mov	r1, r3
 8000984:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <MX_TIM4_Init+0x90>)
 8000986:	f004 fb5d 	bl	8005044 <HAL_TIM_ConfigClockSource>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8000990:	f000 f9cc 	bl	8000d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	@ (80009b8 <MX_TIM4_Init+0x90>)
 80009a2:	f004 fd85 	bl	80054b0 <HAL_TIMEx_MasterConfigSynchronization>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80009ac:	f000 f9be 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
}
 80009b0:	bf00      	nop
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000234 	.word	0x20000234
 80009bc:	40000800 	.word	0x40000800

080009c0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	@ (8000a10 <MX_USART2_UART_Init+0x50>)
 80009c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009f8:	f004 fdea 	bl	80055d0 <HAL_UART_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a02:	f000 f993 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000027c 	.word	0x2000027c
 8000a10:	40004400 	.word	0x40004400

08000a14 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <MX_DMA_Init+0x3c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a0b      	ldr	r2, [pc, #44]	@ (8000a50 <MX_DMA_Init+0x3c>)
 8000a24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_DMA_Init+0x3c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2105      	movs	r1, #5
 8000a3a:	200b      	movs	r0, #11
 8000a3c:	f000 fdc0 	bl	80015c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a40:	200b      	movs	r0, #11
 8000a42:	f000 fdd9 	bl	80015f8 <HAL_NVIC_EnableIRQ>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	@ 0x28
 8000a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b45      	ldr	r3, [pc, #276]	@ (8000b84 <MX_GPIO_Init+0x130>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a44      	ldr	r2, [pc, #272]	@ (8000b84 <MX_GPIO_Init+0x130>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b42      	ldr	r3, [pc, #264]	@ (8000b84 <MX_GPIO_Init+0x130>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b84 <MX_GPIO_Init+0x130>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a3d      	ldr	r2, [pc, #244]	@ (8000b84 <MX_GPIO_Init+0x130>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b3b      	ldr	r3, [pc, #236]	@ (8000b84 <MX_GPIO_Init+0x130>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	4b37      	ldr	r3, [pc, #220]	@ (8000b84 <MX_GPIO_Init+0x130>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a36      	ldr	r2, [pc, #216]	@ (8000b84 <MX_GPIO_Init+0x130>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b34      	ldr	r3, [pc, #208]	@ (8000b84 <MX_GPIO_Init+0x130>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b30      	ldr	r3, [pc, #192]	@ (8000b84 <MX_GPIO_Init+0x130>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8000b84 <MX_GPIO_Init+0x130>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b2d      	ldr	r3, [pc, #180]	@ (8000b84 <MX_GPIO_Init+0x130>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b29      	ldr	r3, [pc, #164]	@ (8000b84 <MX_GPIO_Init+0x130>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a28      	ldr	r2, [pc, #160]	@ (8000b84 <MX_GPIO_Init+0x130>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b26      	ldr	r3, [pc, #152]	@ (8000b84 <MX_GPIO_Init+0x130>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS5361_RST_Pin | CS5361_SA_Pin | CS5361_HPF_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000afc:	4822      	ldr	r0, [pc, #136]	@ (8000b88 <MX_GPIO_Init+0x134>)
 8000afe:	f001 fab1 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS5361_MDIV_Pin | CS5361_M1_Pin | CS5361_M0_Pin | CS5361_MS_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8000b08:	4820      	ldr	r0, [pc, #128]	@ (8000b8c <MX_GPIO_Init+0x138>)
 8000b0a:	f001 faab 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b12:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	481b      	ldr	r0, [pc, #108]	@ (8000b90 <MX_GPIO_Init+0x13c>)
 8000b24:	f001 f902 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4813      	ldr	r0, [pc, #76]	@ (8000b88 <MX_GPIO_Init+0x134>)
 8000b3c:	f001 f8f6 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS5361_RST_Pin CS5361_SA_Pin CS5361_HPF_Pin */
  GPIO_InitStruct.Pin = CS5361_RST_Pin | CS5361_SA_Pin | CS5361_HPF_Pin;
 8000b40:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	480b      	ldr	r0, [pc, #44]	@ (8000b88 <MX_GPIO_Init+0x134>)
 8000b5a:	f001 f8e7 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS5361_MDIV_Pin CS5361_M1_Pin CS5361_M0_Pin CS5361_MS_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = CS5361_MDIV_Pin | CS5361_M1_Pin | CS5361_M0_Pin | CS5361_MS_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin;
 8000b5e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <MX_GPIO_Init+0x138>)
 8000b78:	f001 f8d8 	bl	8001d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	@ 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	40020c00 	.word	0x40020c00
 8000b90:	40020000 	.word	0x40020000

08000b94 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 1000);
 8000b9c:	1d39      	adds	r1, r7, #4
 8000b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4803      	ldr	r0, [pc, #12]	@ (8000bb4 <__io_putchar+0x20>)
 8000ba6:	f004 fd63 	bl	8005670 <HAL_UART_Transmit>
  return ch;
 8000baa:	687b      	ldr	r3, [r7, #4]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	2000027c 	.word	0x2000027c

08000bb8 <HAL_I2S_RxHalfCpltCallback>:
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  AudioBuffer_t queueItem;
  queueItem.data = audio_buffer_ping;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <HAL_I2S_RxHalfCpltCallback+0x2c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	60bb      	str	r3, [r7, #8]
  queueItem.size = HALF_BUFFER_SIZE;
 8000bc6:	2360      	movs	r3, #96	@ 0x60
 8000bc8:	81bb      	strh	r3, [r7, #12]
 // printf("HAL_I2S_RxHalfCpltCallback\n");
  osMessageQueuePut(myQueue01Handle, &queueItem, 0, 0);
 8000bca:	4b07      	ldr	r3, [pc, #28]	@ (8000be8 <HAL_I2S_RxHalfCpltCallback+0x30>)
 8000bcc:	6818      	ldr	r0, [r3, #0]
 8000bce:	f107 0108 	add.w	r1, r7, #8
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f008 fe73 	bl	80098c0 <osMessageQueuePut>
}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000004 	.word	0x20000004
 8000be8:	200002d0 	.word	0x200002d0

08000bec <HAL_I2S_RxCpltCallback>:
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  AudioBuffer_t queueItem;
  queueItem.data = audio_buffer_pong;
 8000bf4:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <HAL_I2S_RxCpltCallback+0x2c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	60bb      	str	r3, [r7, #8]
  queueItem.size = HALF_BUFFER_SIZE;
 8000bfa:	2360      	movs	r3, #96	@ 0x60
 8000bfc:	81bb      	strh	r3, [r7, #12]
 // printf("HAL_I2S_RxCpltCallback\n");
  osMessageQueuePut(myQueue01Handle, &queueItem, 0, 0);
 8000bfe:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <HAL_I2S_RxCpltCallback+0x30>)
 8000c00:	6818      	ldr	r0, [r3, #0]
 8000c02:	f107 0108 	add.w	r1, r7, #8
 8000c06:	2300      	movs	r3, #0
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f008 fe59 	bl	80098c0 <osMessageQueuePut>
}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	200002d0 	.word	0x200002d0

08000c20 <InitTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_InitTask */
void InitTask(void *argument)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c28:	f00b ff9e 	bl	800cb68 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;)
  {
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); // èn xanh
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c32:	481a      	ldr	r0, [pc, #104]	@ (8000c9c <InitTask+0x7c>)
 8000c34:	f001 fa16 	bl	8002064 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET); // èn xanh lá
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c3e:	4817      	ldr	r0, [pc, #92]	@ (8000c9c <InitTask+0x7c>)
 8000c40:	f001 fa10 	bl	8002064 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET); // èn đ
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c4a:	4814      	ldr	r0, [pc, #80]	@ (8000c9c <InitTask+0x7c>)
 8000c4c:	f001 fa0a 	bl	8002064 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET); // èn màu xanh dương
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c56:	4811      	ldr	r0, [pc, #68]	@ (8000c9c <InitTask+0x7c>)
 8000c58:	f001 fa04 	bl	8002064 <HAL_GPIO_WritePin>
    osDelay(200);
 8000c5c:	20c8      	movs	r0, #200	@ 0xc8
 8000c5e:	f008 fd61 	bl	8009724 <osDelay>
    cs5361_init();
 8000c62:	f7ff fd47 	bl	80006f4 <cs5361_init>
    osDelay(1);
 8000c66:	2001      	movs	r0, #1
 8000c68:	f008 fd5c 	bl	8009724 <osDelay>
    HAL_I2S_Receive_DMA(&hi2s3, audio_buffer, AUDIO_BUFFER_SIZE * 4);
 8000c6c:	22c0      	movs	r2, #192	@ 0xc0
 8000c6e:	490c      	ldr	r1, [pc, #48]	@ (8000ca0 <InitTask+0x80>)
 8000c70:	480c      	ldr	r0, [pc, #48]	@ (8000ca4 <InitTask+0x84>)
 8000c72:	f001 fb6b 	bl	800234c <HAL_I2S_Receive_DMA>
    osThreadId_t myTaskId = osThreadGetId();
 8000c76:	f008 fcb1 	bl	80095dc <osThreadGetId>
 8000c7a:	60f8      	str	r0, [r7, #12]
    uint32_t stack_free = osThreadGetStackSpace(myTaskId);
 8000c7c:	68f8      	ldr	r0, [r7, #12]
 8000c7e:	f008 fcb8 	bl	80095f2 <osThreadGetStackSpace>
 8000c82:	60b8      	str	r0, [r7, #8]
    printf("Free stack: %lu bytes\r\n", stack_free);
 8000c84:	68b9      	ldr	r1, [r7, #8]
 8000c86:	4808      	ldr	r0, [pc, #32]	@ (8000ca8 <InitTask+0x88>)
 8000c88:	f00c fd4c 	bl	800d724 <iprintf>
    osThreadTerminate(osThreadGetId());
 8000c8c:	f008 fca6 	bl	80095dc <osThreadGetId>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f008 fcca 	bl	800962c <osThreadTerminate>
  {
 8000c98:	bf00      	nop
 8000c9a:	e7c7      	b.n	8000c2c <InitTask+0xc>
 8000c9c:	40020c00 	.word	0x40020c00
 8000ca0:	200002d8 	.word	0x200002d8
 8000ca4:	2000018c 	.word	0x2000018c
 8000ca8:	0800e5e0 	.word	0x0800e5e0

08000cac <AudioProcessTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_AudioProcessTask */
void AudioProcessTask(void *argument)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  osStatus_t status;
  AudioBuffer_t bufferItem;
  /* Infinite loop */
  for (;;)
  {
    status = osMessageQueueGet(myQueue01Handle, &bufferItem, NULL, osWaitForever);
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <AudioProcessTask+0x40>)
 8000cb6:	6818      	ldr	r0, [r3, #0]
 8000cb8:	f107 010c 	add.w	r1, r7, #12
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f008 fe5d 	bl	8009980 <osMessageQueueGet>
 8000cc6:	6178      	str	r0, [r7, #20]
    if (status == osOK)
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d109      	bne.n	8000ce2 <AudioProcessTask+0x36>
    {
      printf("DMMTask\n");
 8000cce:	4808      	ldr	r0, [pc, #32]	@ (8000cf0 <AudioProcessTask+0x44>)
 8000cd0:	f00c fd90 	bl	800d7f4 <puts>
      osThreadFlagsSet(usbTransmitEventHandle, 0x01);
 8000cd4:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <AudioProcessTask+0x48>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2101      	movs	r1, #1
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f008 fcd4 	bl	8009688 <osThreadFlagsSet>
 8000ce0:	e7e8      	b.n	8000cb4 <AudioProcessTask+0x8>
    }
    else
    {
      printf("osMessageQueueGet failed with status: %d\n", status);
 8000ce2:	6979      	ldr	r1, [r7, #20]
 8000ce4:	4804      	ldr	r0, [pc, #16]	@ (8000cf8 <AudioProcessTask+0x4c>)
 8000ce6:	f00c fd1d 	bl	800d724 <iprintf>
    status = osMessageQueueGet(myQueue01Handle, &bufferItem, NULL, osWaitForever);
 8000cea:	e7e3      	b.n	8000cb4 <AudioProcessTask+0x8>
 8000cec:	200002d0 	.word	0x200002d0
 8000cf0:	0800e5f8 	.word	0x0800e5f8
 8000cf4:	200002d4 	.word	0x200002d4
 8000cf8:	0800e600 	.word	0x0800e600

08000cfc <UsbTransmitTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UsbTransmitTask */
void UsbTransmitTask(void *argument)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UsbTransmitTask */
  /* Infinite loop */
  for (;;)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <UsbTransmitTask+0x8>

08000d08 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a04      	ldr	r2, [pc, #16]	@ (8000d28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d101      	bne.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d1a:	f000 fb55 	bl	80013c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40000400 	.word	0x40000400

08000d2c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <Error_Handler+0x8>

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <HAL_MspInit+0x54>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d46:	4a11      	ldr	r2, [pc, #68]	@ (8000d8c <HAL_MspInit+0x54>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <HAL_MspInit+0x54>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <HAL_MspInit+0x54>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d62:	4a0a      	ldr	r2, [pc, #40]	@ (8000d8c <HAL_MspInit+0x54>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6a:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <HAL_MspInit+0x54>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	210f      	movs	r1, #15
 8000d7a:	f06f 0001 	mvn.w	r0, #1
 8000d7e:	f000 fc1f 	bl	80015c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800

08000d90 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dcc <HAL_CRC_MspInit+0x3c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d10d      	bne.n	8000dbe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <HAL_CRC_MspInit+0x40>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a09      	ldr	r2, [pc, #36]	@ (8000dd0 <HAL_CRC_MspInit+0x40>)
 8000dac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <HAL_CRC_MspInit+0x40>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40023000 	.word	0x40023000
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08e      	sub	sp, #56	@ 0x38
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a4e      	ldr	r2, [pc, #312]	@ (8000f38 <HAL_I2S_MspInit+0x164>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	f040 8094 	bne.w	8000f2e <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e06:	2301      	movs	r3, #1
 8000e08:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e0a:	23c0      	movs	r3, #192	@ 0xc0
 8000e0c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4618      	mov	r0, r3
 8000e18:	f003 fe22 	bl	8004a60 <HAL_RCCEx_PeriphCLKConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000e22:	f7ff ff83 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b44      	ldr	r3, [pc, #272]	@ (8000f3c <HAL_I2S_MspInit+0x168>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2e:	4a43      	ldr	r2, [pc, #268]	@ (8000f3c <HAL_I2S_MspInit+0x168>)
 8000e30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e36:	4b41      	ldr	r3, [pc, #260]	@ (8000f3c <HAL_I2S_MspInit+0x168>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b3d      	ldr	r3, [pc, #244]	@ (8000f3c <HAL_I2S_MspInit+0x168>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a3c      	ldr	r2, [pc, #240]	@ (8000f3c <HAL_I2S_MspInit+0x168>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b3a      	ldr	r3, [pc, #232]	@ (8000f3c <HAL_I2S_MspInit+0x168>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	4b36      	ldr	r3, [pc, #216]	@ (8000f3c <HAL_I2S_MspInit+0x168>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a35      	ldr	r2, [pc, #212]	@ (8000f3c <HAL_I2S_MspInit+0x168>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b33      	ldr	r3, [pc, #204]	@ (8000f3c <HAL_I2S_MspInit+0x168>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e7a:	2310      	movs	r3, #16
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e8a:	2306      	movs	r3, #6
 8000e8c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e92:	4619      	mov	r1, r3
 8000e94:	482a      	ldr	r0, [pc, #168]	@ (8000f40 <HAL_I2S_MspInit+0x16c>)
 8000e96:	f000 ff49 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000e9a:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eac:	2306      	movs	r3, #6
 8000eae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4823      	ldr	r0, [pc, #140]	@ (8000f44 <HAL_I2S_MspInit+0x170>)
 8000eb8:	f000 ff38 	bl	8001d2c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8000ebc:	4b22      	ldr	r3, [pc, #136]	@ (8000f48 <HAL_I2S_MspInit+0x174>)
 8000ebe:	4a23      	ldr	r2, [pc, #140]	@ (8000f4c <HAL_I2S_MspInit+0x178>)
 8000ec0:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8000ec2:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <HAL_I2S_MspInit+0x174>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <HAL_I2S_MspInit+0x174>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ece:	4b1e      	ldr	r3, [pc, #120]	@ (8000f48 <HAL_I2S_MspInit+0x174>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <HAL_I2S_MspInit+0x174>)
 8000ed6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eda:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <HAL_I2S_MspInit+0x174>)
 8000ede:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ee2:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ee4:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <HAL_I2S_MspInit+0x174>)
 8000ee6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000eea:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8000eec:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <HAL_I2S_MspInit+0x174>)
 8000eee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ef2:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <HAL_I2S_MspInit+0x174>)
 8000ef6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000efa:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000efc:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <HAL_I2S_MspInit+0x174>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8000f02:	4811      	ldr	r0, [pc, #68]	@ (8000f48 <HAL_I2S_MspInit+0x174>)
 8000f04:	f000 fba2 	bl	800164c <HAL_DMA_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8000f0e:	f7ff ff0d 	bl	8000d2c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a0c      	ldr	r2, [pc, #48]	@ (8000f48 <HAL_I2S_MspInit+0x174>)
 8000f16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f18:	4a0b      	ldr	r2, [pc, #44]	@ (8000f48 <HAL_I2S_MspInit+0x174>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2105      	movs	r1, #5
 8000f22:	2033      	movs	r0, #51	@ 0x33
 8000f24:	f000 fb4c 	bl	80015c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000f28:	2033      	movs	r0, #51	@ 0x33
 8000f2a:	f000 fb65 	bl	80015f8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000f2e:	bf00      	nop
 8000f30:	3738      	adds	r7, #56	@ 0x38
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40003c00 	.word	0x40003c00
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020000 	.word	0x40020000
 8000f44:	40020800 	.word	0x40020800
 8000f48:	200001d4 	.word	0x200001d4
 8000f4c:	40026010 	.word	0x40026010

08000f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0e      	ldr	r2, [pc, #56]	@ (8000f98 <HAL_TIM_Base_MspInit+0x48>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d115      	bne.n	8000f8e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b0d      	ldr	r3, [pc, #52]	@ (8000f9c <HAL_TIM_Base_MspInit+0x4c>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f9c <HAL_TIM_Base_MspInit+0x4c>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f72:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <HAL_TIM_Base_MspInit+0x4c>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2105      	movs	r1, #5
 8000f82:	201e      	movs	r0, #30
 8000f84:	f000 fb1c 	bl	80015c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f88:	201e      	movs	r0, #30
 8000f8a:	f000 fb35 	bl	80015f8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40000800 	.word	0x40000800
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	@ 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a19      	ldr	r2, [pc, #100]	@ (8001024 <HAL_UART_MspInit+0x84>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d12b      	bne.n	800101a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	4b18      	ldr	r3, [pc, #96]	@ (8001028 <HAL_UART_MspInit+0x88>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	4a17      	ldr	r2, [pc, #92]	@ (8001028 <HAL_UART_MspInit+0x88>)
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd2:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <HAL_UART_MspInit+0x88>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <HAL_UART_MspInit+0x88>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	4a10      	ldr	r2, [pc, #64]	@ (8001028 <HAL_UART_MspInit+0x88>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <HAL_UART_MspInit+0x88>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ffa:	230c      	movs	r3, #12
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800100a:	2307      	movs	r3, #7
 800100c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	@ (800102c <HAL_UART_MspInit+0x8c>)
 8001016:	f000 fe89 	bl	8001d2c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800101a:	bf00      	nop
 800101c:	3728      	adds	r7, #40	@ 0x28
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40004400 	.word	0x40004400
 8001028:	40023800 	.word	0x40023800
 800102c:	40020000 	.word	0x40020000

08001030 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08e      	sub	sp, #56	@ 0x38
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	4b33      	ldr	r3, [pc, #204]	@ (8001114 <HAL_InitTick+0xe4>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001048:	4a32      	ldr	r2, [pc, #200]	@ (8001114 <HAL_InitTick+0xe4>)
 800104a:	f043 0302 	orr.w	r3, r3, #2
 800104e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001050:	4b30      	ldr	r3, [pc, #192]	@ (8001114 <HAL_InitTick+0xe4>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800105c:	f107 0210 	add.w	r2, r7, #16
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4611      	mov	r1, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f003 fcc8 	bl	80049fc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001072:	2b00      	cmp	r3, #0
 8001074:	d103      	bne.n	800107e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001076:	f003 fc99 	bl	80049ac <HAL_RCC_GetPCLK1Freq>
 800107a:	6378      	str	r0, [r7, #52]	@ 0x34
 800107c:	e004      	b.n	8001088 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800107e:	f003 fc95 	bl	80049ac <HAL_RCC_GetPCLK1Freq>
 8001082:	4603      	mov	r3, r0
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800108a:	4a23      	ldr	r2, [pc, #140]	@ (8001118 <HAL_InitTick+0xe8>)
 800108c:	fba2 2303 	umull	r2, r3, r2, r3
 8001090:	0c9b      	lsrs	r3, r3, #18
 8001092:	3b01      	subs	r3, #1
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001096:	4b21      	ldr	r3, [pc, #132]	@ (800111c <HAL_InitTick+0xec>)
 8001098:	4a21      	ldr	r2, [pc, #132]	@ (8001120 <HAL_InitTick+0xf0>)
 800109a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800109c:	4b1f      	ldr	r3, [pc, #124]	@ (800111c <HAL_InitTick+0xec>)
 800109e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010a2:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80010a4:	4a1d      	ldr	r2, [pc, #116]	@ (800111c <HAL_InitTick+0xec>)
 80010a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010a8:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <HAL_InitTick+0xec>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <HAL_InitTick+0xec>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b6:	4b19      	ldr	r3, [pc, #100]	@ (800111c <HAL_InitTick+0xec>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80010bc:	4817      	ldr	r0, [pc, #92]	@ (800111c <HAL_InitTick+0xec>)
 80010be:	f003 fe11 	bl	8004ce4 <HAL_TIM_Base_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80010c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d11b      	bne.n	8001108 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80010d0:	4812      	ldr	r0, [pc, #72]	@ (800111c <HAL_InitTick+0xec>)
 80010d2:	f003 fe57 	bl	8004d84 <HAL_TIM_Base_Start_IT>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d111      	bne.n	8001108 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010e4:	201d      	movs	r0, #29
 80010e6:	f000 fa87 	bl	80015f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d808      	bhi.n	8001102 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	201d      	movs	r0, #29
 80010f6:	f000 fa63 	bl	80015c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001124 <HAL_InitTick+0xf4>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	e002      	b.n	8001108 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001108:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800110c:	4618      	mov	r0, r3
 800110e:	3738      	adds	r7, #56	@ 0x38
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40023800 	.word	0x40023800
 8001118:	431bde83 	.word	0x431bde83
 800111c:	20000458 	.word	0x20000458
 8001120:	40000400 	.word	0x40000400
 8001124:	20000010 	.word	0x20000010

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <NMI_Handler+0x4>

08001130 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <HardFault_Handler+0x4>

08001138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <MemManage_Handler+0x4>

08001140 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <UsageFault_Handler+0x4>

08001150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001164:	4802      	ldr	r0, [pc, #8]	@ (8001170 <DMA1_Stream0_IRQHandler+0x10>)
 8001166:	f000 fb77 	bl	8001858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200001d4 	.word	0x200001d4

08001174 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001178:	4802      	ldr	r0, [pc, #8]	@ (8001184 <TIM3_IRQHandler+0x10>)
 800117a:	f003 fe73 	bl	8004e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000458 	.word	0x20000458

08001188 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800118c:	4802      	ldr	r0, [pc, #8]	@ (8001198 <TIM4_IRQHandler+0x10>)
 800118e:	f003 fe69 	bl	8004e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000234 	.word	0x20000234

0800119c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 80011a0:	4802      	ldr	r0, [pc, #8]	@ (80011ac <SPI3_IRQHandler+0x10>)
 80011a2:	f001 f98b 	bl	80024bc <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000018c 	.word	0x2000018c

080011b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011b4:	4802      	ldr	r0, [pc, #8]	@ (80011c0 <OTG_FS_IRQHandler+0x10>)
 80011b6:	f001 fe7b 	bl	8002eb0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20006370 	.word	0x20006370

080011c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	e00a      	b.n	80011ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011d6:	f3af 8000 	nop.w
 80011da:	4601      	mov	r1, r0
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	60ba      	str	r2, [r7, #8]
 80011e2:	b2ca      	uxtb	r2, r1
 80011e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dbf0      	blt.n	80011d6 <_read+0x12>
  }

  return len;
 80011f4:	687b      	ldr	r3, [r7, #4]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	e009      	b.n	8001224 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	60ba      	str	r2, [r7, #8]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fcbb 	bl	8000b94 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3301      	adds	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	429a      	cmp	r2, r3
 800122a:	dbf1      	blt.n	8001210 <_write+0x12>
  }
  return len;
 800122c:	687b      	ldr	r3, [r7, #4]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <_close>:

int _close(int file)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800125e:	605a      	str	r2, [r3, #4]
  return 0;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <_isatty>:

int _isatty(int file)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a8:	4a14      	ldr	r2, [pc, #80]	@ (80012fc <_sbrk+0x5c>)
 80012aa:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <_sbrk+0x60>)
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b4:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012bc:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <_sbrk+0x64>)
 80012be:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <_sbrk+0x68>)
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c2:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d207      	bcs.n	80012e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d0:	f00c fc14 	bl	800dafc <__errno>
 80012d4:	4603      	mov	r3, r0
 80012d6:	220c      	movs	r2, #12
 80012d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	e009      	b.n	80012f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e0:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a05      	ldr	r2, [pc, #20]	@ (8001304 <_sbrk+0x64>)
 80012f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20020000 	.word	0x20020000
 8001300:	00004000 	.word	0x00004000
 8001304:	200004a0 	.word	0x200004a0
 8001308:	20006bc0 	.word	0x20006bc0

0800130c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <SystemInit+0x20>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001316:	4a05      	ldr	r2, [pc, #20]	@ (800132c <SystemInit+0x20>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001368 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001334:	f7ff ffea 	bl	800130c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001338:	480c      	ldr	r0, [pc, #48]	@ (800136c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800133a:	490d      	ldr	r1, [pc, #52]	@ (8001370 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800133c:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001350:	4c0a      	ldr	r4, [pc, #40]	@ (800137c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135e:	f00c fbd3 	bl	800db08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001362:	f7ff f9dd 	bl	8000720 <main>
  bx  lr    
 8001366:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001374:	0800e784 	.word	0x0800e784
  ldr r2, =_sbss
 8001378:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 800137c:	20006bc0 	.word	0x20006bc0

08001380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC_IRQHandler>
	...

08001384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001388:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0d      	ldr	r2, [pc, #52]	@ (80013c4 <HAL_Init+0x40>)
 800138e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001394:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <HAL_Init+0x40>)
 800139a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800139e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a07      	ldr	r2, [pc, #28]	@ (80013c4 <HAL_Init+0x40>)
 80013a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f000 f8fc 	bl	80015aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b2:	200f      	movs	r0, #15
 80013b4:	f7ff fe3c 	bl	8001030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b8:	f7ff fcbe 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023c00 	.word	0x40023c00

080013c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013cc:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <HAL_IncTick+0x20>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <HAL_IncTick+0x24>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a04      	ldr	r2, [pc, #16]	@ (80013ec <HAL_IncTick+0x24>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000014 	.word	0x20000014
 80013ec:	200004a4 	.word	0x200004a4

080013f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b03      	ldr	r3, [pc, #12]	@ (8001404 <HAL_GetTick+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	200004a4 	.word	0x200004a4

08001408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff ffee 	bl	80013f0 <HAL_GetTick>
 8001414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001420:	d005      	beq.n	800142e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001422:	4b0a      	ldr	r3, [pc, #40]	@ (800144c <HAL_Delay+0x44>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800142e:	bf00      	nop
 8001430:	f7ff ffde 	bl	80013f0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	429a      	cmp	r2, r3
 800143e:	d8f7      	bhi.n	8001430 <HAL_Delay+0x28>
  {
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000014 	.word	0x20000014

08001450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800146c:	4013      	ands	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001478:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800147c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001482:	4a04      	ldr	r2, [pc, #16]	@ (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	60d3      	str	r3, [r2, #12]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800149c:	4b04      	ldr	r3, [pc, #16]	@ (80014b0 <__NVIC_GetPriorityGrouping+0x18>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	0a1b      	lsrs	r3, r3, #8
 80014a2:	f003 0307 	and.w	r3, r3, #7
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	db0b      	blt.n	80014de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f003 021f 	and.w	r2, r3, #31
 80014cc:	4907      	ldr	r1, [pc, #28]	@ (80014ec <__NVIC_EnableIRQ+0x38>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	095b      	lsrs	r3, r3, #5
 80014d4:	2001      	movs	r0, #1
 80014d6:	fa00 f202 	lsl.w	r2, r0, r2
 80014da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000e100 	.word	0xe000e100

080014f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	db0a      	blt.n	800151a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	490c      	ldr	r1, [pc, #48]	@ (800153c <__NVIC_SetPriority+0x4c>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	440b      	add	r3, r1
 8001514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001518:	e00a      	b.n	8001530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4908      	ldr	r1, [pc, #32]	@ (8001540 <__NVIC_SetPriority+0x50>)
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	3b04      	subs	r3, #4
 8001528:	0112      	lsls	r2, r2, #4
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	440b      	add	r3, r1
 800152e:	761a      	strb	r2, [r3, #24]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000e100 	.word	0xe000e100
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	@ 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f1c3 0307 	rsb	r3, r3, #7
 800155e:	2b04      	cmp	r3, #4
 8001560:	bf28      	it	cs
 8001562:	2304      	movcs	r3, #4
 8001564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3304      	adds	r3, #4
 800156a:	2b06      	cmp	r3, #6
 800156c:	d902      	bls.n	8001574 <NVIC_EncodePriority+0x30>
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3b03      	subs	r3, #3
 8001572:	e000      	b.n	8001576 <NVIC_EncodePriority+0x32>
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	f04f 32ff 	mov.w	r2, #4294967295
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	401a      	ands	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800158c:	f04f 31ff 	mov.w	r1, #4294967295
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43d9      	mvns	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	4313      	orrs	r3, r2
         );
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3724      	adds	r7, #36	@ 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ff4c 	bl	8001450 <__NVIC_SetPriorityGrouping>
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d2:	f7ff ff61 	bl	8001498 <__NVIC_GetPriorityGrouping>
 80015d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	68b9      	ldr	r1, [r7, #8]
 80015dc:	6978      	ldr	r0, [r7, #20]
 80015de:	f7ff ffb1 	bl	8001544 <NVIC_EncodePriority>
 80015e2:	4602      	mov	r2, r0
 80015e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e8:	4611      	mov	r1, r2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff80 	bl	80014f0 <__NVIC_SetPriority>
}
 80015f0:	bf00      	nop
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff54 	bl	80014b4 <__NVIC_EnableIRQ>
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e00e      	b.n	8001644 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	795b      	ldrb	r3, [r3, #5]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d105      	bne.n	800163c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff fbaa 	bl	8000d90 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001658:	f7ff feca 	bl	80013f0 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e099      	b.n	800179c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2202      	movs	r2, #2
 800166c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0201 	bic.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001688:	e00f      	b.n	80016aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800168a:	f7ff feb1 	bl	80013f0 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b05      	cmp	r3, #5
 8001696:	d908      	bls.n	80016aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2220      	movs	r2, #32
 800169c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2203      	movs	r2, #3
 80016a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e078      	b.n	800179c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1e8      	bne.n	800168a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	4b38      	ldr	r3, [pc, #224]	@ (80017a4 <HAL_DMA_Init+0x158>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001700:	2b04      	cmp	r3, #4
 8001702:	d107      	bne.n	8001714 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170c:	4313      	orrs	r3, r2
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	4313      	orrs	r3, r2
 8001712:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f023 0307 	bic.w	r3, r3, #7
 800172a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	4313      	orrs	r3, r2
 8001734:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173a:	2b04      	cmp	r3, #4
 800173c:	d117      	bne.n	800176e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4313      	orrs	r3, r2
 8001746:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00e      	beq.n	800176e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fa6f 	bl	8001c34 <DMA_CheckFifoParam>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2240      	movs	r2, #64	@ 0x40
 8001760:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800176a:	2301      	movs	r3, #1
 800176c:	e016      	b.n	800179c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 fa26 	bl	8001bc8 <DMA_CalcBaseAndBitshift>
 800177c:	4603      	mov	r3, r0
 800177e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001784:	223f      	movs	r2, #63	@ 0x3f
 8001786:	409a      	lsls	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	f010803f 	.word	0xf010803f

080017a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_DMA_Start_IT+0x26>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e040      	b.n	8001850 <HAL_DMA_Start_IT+0xa8>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d12f      	bne.n	8001842 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2202      	movs	r2, #2
 80017e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 f9b8 	bl	8001b6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001800:	223f      	movs	r2, #63	@ 0x3f
 8001802:	409a      	lsls	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0216 	orr.w	r2, r2, #22
 8001816:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181c:	2b00      	cmp	r3, #0
 800181e:	d007      	beq.n	8001830 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0208 	orr.w	r2, r2, #8
 800182e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	e005      	b.n	800184e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800184a:	2302      	movs	r3, #2
 800184c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800184e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001864:	4b8e      	ldr	r3, [pc, #568]	@ (8001aa0 <HAL_DMA_IRQHandler+0x248>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a8e      	ldr	r2, [pc, #568]	@ (8001aa4 <HAL_DMA_IRQHandler+0x24c>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	0a9b      	lsrs	r3, r3, #10
 8001870:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001876:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001882:	2208      	movs	r2, #8
 8001884:	409a      	lsls	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4013      	ands	r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d01a      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d013      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0204 	bic.w	r2, r2, #4
 80018aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b0:	2208      	movs	r2, #8
 80018b2:	409a      	lsls	r2, r3
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018bc:	f043 0201 	orr.w	r2, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c8:	2201      	movs	r2, #1
 80018ca:	409a      	lsls	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d012      	beq.n	80018fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00b      	beq.n	80018fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e6:	2201      	movs	r2, #1
 80018e8:	409a      	lsls	r2, r3
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f2:	f043 0202 	orr.w	r2, r3, #2
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018fe:	2204      	movs	r2, #4
 8001900:	409a      	lsls	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4013      	ands	r3, r2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d012      	beq.n	8001930 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00b      	beq.n	8001930 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800191c:	2204      	movs	r2, #4
 800191e:	409a      	lsls	r2, r3
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001928:	f043 0204 	orr.w	r2, r3, #4
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001934:	2210      	movs	r2, #16
 8001936:	409a      	lsls	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4013      	ands	r3, r2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d043      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d03c      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001952:	2210      	movs	r2, #16
 8001954:	409a      	lsls	r2, r3
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d018      	beq.n	800199a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d108      	bne.n	8001988 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	2b00      	cmp	r3, #0
 800197c:	d024      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	4798      	blx	r3
 8001986:	e01f      	b.n	80019c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01b      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	4798      	blx	r3
 8001998:	e016      	b.n	80019c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d107      	bne.n	80019b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0208 	bic.w	r2, r2, #8
 80019b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019cc:	2220      	movs	r2, #32
 80019ce:	409a      	lsls	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 808f 	beq.w	8001af8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0310 	and.w	r3, r3, #16
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 8087 	beq.w	8001af8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ee:	2220      	movs	r2, #32
 80019f0:	409a      	lsls	r2, r3
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b05      	cmp	r3, #5
 8001a00:	d136      	bne.n	8001a70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0216 	bic.w	r2, r2, #22
 8001a10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	695a      	ldr	r2, [r3, #20]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d103      	bne.n	8001a32 <HAL_DMA_IRQHandler+0x1da>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d007      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0208 	bic.w	r2, r2, #8
 8001a40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a46:	223f      	movs	r2, #63	@ 0x3f
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d07e      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	4798      	blx	r3
        }
        return;
 8001a6e:	e079      	b.n	8001b64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d01d      	beq.n	8001aba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10d      	bne.n	8001aa8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d031      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	4798      	blx	r3
 8001a9c:	e02c      	b.n	8001af8 <HAL_DMA_IRQHandler+0x2a0>
 8001a9e:	bf00      	nop
 8001aa0:	2000000c 	.word	0x2000000c
 8001aa4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d023      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	4798      	blx	r3
 8001ab8:	e01e      	b.n	8001af8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10f      	bne.n	8001ae8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0210 	bic.w	r2, r2, #16
 8001ad6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d032      	beq.n	8001b66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d022      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2205      	movs	r2, #5
 8001b10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0201 	bic.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	3301      	adds	r3, #1
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d307      	bcc.n	8001b40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f2      	bne.n	8001b24 <HAL_DMA_IRQHandler+0x2cc>
 8001b3e:	e000      	b.n	8001b42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d005      	beq.n	8001b66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	4798      	blx	r3
 8001b62:	e000      	b.n	8001b66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b64:	bf00      	nop
    }
  }
}
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001b88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2b40      	cmp	r3, #64	@ 0x40
 8001b98:	d108      	bne.n	8001bac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001baa:	e007      	b.n	8001bbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	60da      	str	r2, [r3, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	3b10      	subs	r3, #16
 8001bd8:	4a14      	ldr	r2, [pc, #80]	@ (8001c2c <DMA_CalcBaseAndBitshift+0x64>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001be2:	4a13      	ldr	r2, [pc, #76]	@ (8001c30 <DMA_CalcBaseAndBitshift+0x68>)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d909      	bls.n	8001c0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001bfe:	f023 0303 	bic.w	r3, r3, #3
 8001c02:	1d1a      	adds	r2, r3, #4
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c08:	e007      	b.n	8001c1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001c12:	f023 0303 	bic.w	r3, r3, #3
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	aaaaaaab 	.word	0xaaaaaaab
 8001c30:	0800e738 	.word	0x0800e738

08001c34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d11f      	bne.n	8001c8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d856      	bhi.n	8001d02 <DMA_CheckFifoParam+0xce>
 8001c54:	a201      	add	r2, pc, #4	@ (adr r2, 8001c5c <DMA_CheckFifoParam+0x28>)
 8001c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5a:	bf00      	nop
 8001c5c:	08001c6d 	.word	0x08001c6d
 8001c60:	08001c7f 	.word	0x08001c7f
 8001c64:	08001c6d 	.word	0x08001c6d
 8001c68:	08001d03 	.word	0x08001d03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d046      	beq.n	8001d06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c7c:	e043      	b.n	8001d06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c82:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c86:	d140      	bne.n	8001d0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c8c:	e03d      	b.n	8001d0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c96:	d121      	bne.n	8001cdc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d837      	bhi.n	8001d0e <DMA_CheckFifoParam+0xda>
 8001c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001ca4 <DMA_CheckFifoParam+0x70>)
 8001ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca4:	08001cb5 	.word	0x08001cb5
 8001ca8:	08001cbb 	.word	0x08001cbb
 8001cac:	08001cb5 	.word	0x08001cb5
 8001cb0:	08001ccd 	.word	0x08001ccd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8001cb8:	e030      	b.n	8001d1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d025      	beq.n	8001d12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cca:	e022      	b.n	8001d12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001cd4:	d11f      	bne.n	8001d16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cda:	e01c      	b.n	8001d16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d903      	bls.n	8001cea <DMA_CheckFifoParam+0xb6>
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d003      	beq.n	8001cf0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ce8:	e018      	b.n	8001d1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
      break;
 8001cee:	e015      	b.n	8001d1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00e      	beq.n	8001d1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8001d00:	e00b      	b.n	8001d1a <DMA_CheckFifoParam+0xe6>
      break;
 8001d02:	bf00      	nop
 8001d04:	e00a      	b.n	8001d1c <DMA_CheckFifoParam+0xe8>
      break;
 8001d06:	bf00      	nop
 8001d08:	e008      	b.n	8001d1c <DMA_CheckFifoParam+0xe8>
      break;
 8001d0a:	bf00      	nop
 8001d0c:	e006      	b.n	8001d1c <DMA_CheckFifoParam+0xe8>
      break;
 8001d0e:	bf00      	nop
 8001d10:	e004      	b.n	8001d1c <DMA_CheckFifoParam+0xe8>
      break;
 8001d12:	bf00      	nop
 8001d14:	e002      	b.n	8001d1c <DMA_CheckFifoParam+0xe8>
      break;   
 8001d16:	bf00      	nop
 8001d18:	e000      	b.n	8001d1c <DMA_CheckFifoParam+0xe8>
      break;
 8001d1a:	bf00      	nop
    }
  } 
  
  return status; 
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop

08001d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	@ 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
 8001d46:	e16b      	b.n	8002020 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d48:	2201      	movs	r2, #1
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	f040 815a 	bne.w	800201a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d005      	beq.n	8001d7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d130      	bne.n	8001de0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	2203      	movs	r2, #3
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db4:	2201      	movs	r2, #1
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f003 0201 	and.w	r2, r3, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d017      	beq.n	8001e1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d123      	bne.n	8001e70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	08da      	lsrs	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3208      	adds	r2, #8
 8001e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	220f      	movs	r2, #15
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	08da      	lsrs	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3208      	adds	r2, #8
 8001e6a:	69b9      	ldr	r1, [r7, #24]
 8001e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0203 	and.w	r2, r3, #3
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 80b4 	beq.w	800201a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	4b60      	ldr	r3, [pc, #384]	@ (8002038 <HAL_GPIO_Init+0x30c>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eba:	4a5f      	ldr	r2, [pc, #380]	@ (8002038 <HAL_GPIO_Init+0x30c>)
 8001ebc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ec2:	4b5d      	ldr	r3, [pc, #372]	@ (8002038 <HAL_GPIO_Init+0x30c>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ece:	4a5b      	ldr	r2, [pc, #364]	@ (800203c <HAL_GPIO_Init+0x310>)
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	089b      	lsrs	r3, r3, #2
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a52      	ldr	r2, [pc, #328]	@ (8002040 <HAL_GPIO_Init+0x314>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d02b      	beq.n	8001f52 <HAL_GPIO_Init+0x226>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a51      	ldr	r2, [pc, #324]	@ (8002044 <HAL_GPIO_Init+0x318>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d025      	beq.n	8001f4e <HAL_GPIO_Init+0x222>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a50      	ldr	r2, [pc, #320]	@ (8002048 <HAL_GPIO_Init+0x31c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d01f      	beq.n	8001f4a <HAL_GPIO_Init+0x21e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a4f      	ldr	r2, [pc, #316]	@ (800204c <HAL_GPIO_Init+0x320>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d019      	beq.n	8001f46 <HAL_GPIO_Init+0x21a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4e      	ldr	r2, [pc, #312]	@ (8002050 <HAL_GPIO_Init+0x324>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <HAL_GPIO_Init+0x216>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4d      	ldr	r2, [pc, #308]	@ (8002054 <HAL_GPIO_Init+0x328>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00d      	beq.n	8001f3e <HAL_GPIO_Init+0x212>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4c      	ldr	r2, [pc, #304]	@ (8002058 <HAL_GPIO_Init+0x32c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d007      	beq.n	8001f3a <HAL_GPIO_Init+0x20e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4b      	ldr	r2, [pc, #300]	@ (800205c <HAL_GPIO_Init+0x330>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d101      	bne.n	8001f36 <HAL_GPIO_Init+0x20a>
 8001f32:	2307      	movs	r3, #7
 8001f34:	e00e      	b.n	8001f54 <HAL_GPIO_Init+0x228>
 8001f36:	2308      	movs	r3, #8
 8001f38:	e00c      	b.n	8001f54 <HAL_GPIO_Init+0x228>
 8001f3a:	2306      	movs	r3, #6
 8001f3c:	e00a      	b.n	8001f54 <HAL_GPIO_Init+0x228>
 8001f3e:	2305      	movs	r3, #5
 8001f40:	e008      	b.n	8001f54 <HAL_GPIO_Init+0x228>
 8001f42:	2304      	movs	r3, #4
 8001f44:	e006      	b.n	8001f54 <HAL_GPIO_Init+0x228>
 8001f46:	2303      	movs	r3, #3
 8001f48:	e004      	b.n	8001f54 <HAL_GPIO_Init+0x228>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e002      	b.n	8001f54 <HAL_GPIO_Init+0x228>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <HAL_GPIO_Init+0x228>
 8001f52:	2300      	movs	r3, #0
 8001f54:	69fa      	ldr	r2, [r7, #28]
 8001f56:	f002 0203 	and.w	r2, r2, #3
 8001f5a:	0092      	lsls	r2, r2, #2
 8001f5c:	4093      	lsls	r3, r2
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f64:	4935      	ldr	r1, [pc, #212]	@ (800203c <HAL_GPIO_Init+0x310>)
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	089b      	lsrs	r3, r3, #2
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f72:	4b3b      	ldr	r3, [pc, #236]	@ (8002060 <HAL_GPIO_Init+0x334>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f96:	4a32      	ldr	r2, [pc, #200]	@ (8002060 <HAL_GPIO_Init+0x334>)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f9c:	4b30      	ldr	r3, [pc, #192]	@ (8002060 <HAL_GPIO_Init+0x334>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fc0:	4a27      	ldr	r2, [pc, #156]	@ (8002060 <HAL_GPIO_Init+0x334>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fc6:	4b26      	ldr	r3, [pc, #152]	@ (8002060 <HAL_GPIO_Init+0x334>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fea:	4a1d      	ldr	r2, [pc, #116]	@ (8002060 <HAL_GPIO_Init+0x334>)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8002060 <HAL_GPIO_Init+0x334>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002014:	4a12      	ldr	r2, [pc, #72]	@ (8002060 <HAL_GPIO_Init+0x334>)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3301      	adds	r3, #1
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	2b0f      	cmp	r3, #15
 8002024:	f67f ae90 	bls.w	8001d48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	3724      	adds	r7, #36	@ 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800
 800203c:	40013800 	.word	0x40013800
 8002040:	40020000 	.word	0x40020000
 8002044:	40020400 	.word	0x40020400
 8002048:	40020800 	.word	0x40020800
 800204c:	40020c00 	.word	0x40020c00
 8002050:	40021000 	.word	0x40021000
 8002054:	40021400 	.word	0x40021400
 8002058:	40021800 	.word	0x40021800
 800205c:	40021c00 	.word	0x40021c00
 8002060:	40013c00 	.word	0x40013c00

08002064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	807b      	strh	r3, [r7, #2]
 8002070:	4613      	mov	r3, r2
 8002072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002074:	787b      	ldrb	r3, [r7, #1]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800207a:	887a      	ldrh	r2, [r7, #2]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002080:	e003      	b.n	800208a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002082:	887b      	ldrh	r3, [r7, #2]
 8002084:	041a      	lsls	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	619a      	str	r2, [r3, #24]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002096:	b480      	push	{r7}
 8002098:	b085      	sub	sp, #20
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	460b      	mov	r3, r1
 80020a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020a8:	887a      	ldrh	r2, [r7, #2]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4013      	ands	r3, r2
 80020ae:	041a      	lsls	r2, r3, #16
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	43d9      	mvns	r1, r3
 80020b4:	887b      	ldrh	r3, [r7, #2]
 80020b6:	400b      	ands	r3, r1
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	619a      	str	r2, [r3, #24]
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e128      	b.n	8002330 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a90      	ldr	r2, [pc, #576]	@ (8002338 <HAL_I2S_Init+0x26c>)
 80020f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7fe fe6b 	bl	8000dd4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2202      	movs	r2, #2
 8002102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002114:	f023 030f 	bic.w	r3, r3, #15
 8002118:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2202      	movs	r2, #2
 8002120:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d060      	beq.n	80021ec <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d102      	bne.n	8002138 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002132:	2310      	movs	r3, #16
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	e001      	b.n	800213c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002138:	2320      	movs	r3, #32
 800213a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b20      	cmp	r3, #32
 8002142:	d802      	bhi.n	800214a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800214a:	2001      	movs	r0, #1
 800214c:	f002 fd6a 	bl	8004c24 <HAL_RCCEx_GetPeriphCLKFreq>
 8002150:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800215a:	d125      	bne.n	80021a8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d010      	beq.n	8002186 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	fbb2 f2f3 	udiv	r2, r2, r3
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	461a      	mov	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	3305      	adds	r3, #5
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	e01f      	b.n	80021c6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	461a      	mov	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	3305      	adds	r3, #5
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	e00e      	b.n	80021c6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	461a      	mov	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c2:	3305      	adds	r3, #5
 80021c4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4a5c      	ldr	r2, [pc, #368]	@ (800233c <HAL_I2S_Init+0x270>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	08db      	lsrs	r3, r3, #3
 80021d0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	085b      	lsrs	r3, r3, #1
 80021e2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	61bb      	str	r3, [r7, #24]
 80021ea:	e003      	b.n	80021f4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80021ec:	2302      	movs	r3, #2
 80021ee:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d902      	bls.n	8002200 <HAL_I2S_Init+0x134>
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	2bff      	cmp	r3, #255	@ 0xff
 80021fe:	d907      	bls.n	8002210 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002204:	f043 0210 	orr.w	r2, r3, #16
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e08f      	b.n	8002330 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	ea42 0103 	orr.w	r1, r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	430a      	orrs	r2, r1
 8002222:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800222e:	f023 030f 	bic.w	r3, r3, #15
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6851      	ldr	r1, [r2, #4]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6892      	ldr	r2, [r2, #8]
 800223a:	4311      	orrs	r1, r2
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	68d2      	ldr	r2, [r2, #12]
 8002240:	4311      	orrs	r1, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6992      	ldr	r2, [r2, #24]
 8002246:	430a      	orrs	r2, r1
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002252:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d161      	bne.n	8002320 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a38      	ldr	r2, [pc, #224]	@ (8002340 <HAL_I2S_Init+0x274>)
 8002260:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a37      	ldr	r2, [pc, #220]	@ (8002344 <HAL_I2S_Init+0x278>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d101      	bne.n	8002270 <HAL_I2S_Init+0x1a4>
 800226c:	4b36      	ldr	r3, [pc, #216]	@ (8002348 <HAL_I2S_Init+0x27c>)
 800226e:	e001      	b.n	8002274 <HAL_I2S_Init+0x1a8>
 8002270:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	4932      	ldr	r1, [pc, #200]	@ (8002344 <HAL_I2S_Init+0x278>)
 800227c:	428a      	cmp	r2, r1
 800227e:	d101      	bne.n	8002284 <HAL_I2S_Init+0x1b8>
 8002280:	4a31      	ldr	r2, [pc, #196]	@ (8002348 <HAL_I2S_Init+0x27c>)
 8002282:	e001      	b.n	8002288 <HAL_I2S_Init+0x1bc>
 8002284:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002288:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800228c:	f023 030f 	bic.w	r3, r3, #15
 8002290:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a2b      	ldr	r2, [pc, #172]	@ (8002344 <HAL_I2S_Init+0x278>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d101      	bne.n	80022a0 <HAL_I2S_Init+0x1d4>
 800229c:	4b2a      	ldr	r3, [pc, #168]	@ (8002348 <HAL_I2S_Init+0x27c>)
 800229e:	e001      	b.n	80022a4 <HAL_I2S_Init+0x1d8>
 80022a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022a4:	2202      	movs	r2, #2
 80022a6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a25      	ldr	r2, [pc, #148]	@ (8002344 <HAL_I2S_Init+0x278>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d101      	bne.n	80022b6 <HAL_I2S_Init+0x1ea>
 80022b2:	4b25      	ldr	r3, [pc, #148]	@ (8002348 <HAL_I2S_Init+0x27c>)
 80022b4:	e001      	b.n	80022ba <HAL_I2S_Init+0x1ee>
 80022b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022c6:	d003      	beq.n	80022d0 <HAL_I2S_Init+0x204>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d103      	bne.n	80022d8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80022d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	e001      	b.n	80022dc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022e6:	4313      	orrs	r3, r2
 80022e8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022f0:	4313      	orrs	r3, r2
 80022f2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022fa:	4313      	orrs	r3, r2
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	897b      	ldrh	r3, [r7, #10]
 8002300:	4313      	orrs	r3, r2
 8002302:	b29b      	uxth	r3, r3
 8002304:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002308:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a0d      	ldr	r2, [pc, #52]	@ (8002344 <HAL_I2S_Init+0x278>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d101      	bne.n	8002318 <HAL_I2S_Init+0x24c>
 8002314:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <HAL_I2S_Init+0x27c>)
 8002316:	e001      	b.n	800231c <HAL_I2S_Init+0x250>
 8002318:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800231c:	897a      	ldrh	r2, [r7, #10]
 800231e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	08002661 	.word	0x08002661
 800233c:	cccccccd 	.word	0xcccccccd
 8002340:	08002775 	.word	0x08002775
 8002344:	40003800 	.word	0x40003800
 8002348:	40003400 	.word	0x40003400

0800234c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	4613      	mov	r3, r2
 8002358:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <HAL_I2S_Receive_DMA+0x1a>
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e09d      	b.n	80024a6 <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d001      	beq.n	800237a <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 8002376:	2302      	movs	r3, #2
 8002378:	e095      	b.n	80024a6 <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_I2S_Receive_DMA+0x3e>
 8002386:	2302      	movs	r3, #2
 8002388:	e08d      	b.n	80024a6 <HAL_I2S_Receive_DMA+0x15a>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2204      	movs	r2, #4
 8002396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d002      	beq.n	80023be <HAL_I2S_Receive_DMA+0x72>
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2b05      	cmp	r3, #5
 80023bc:	d10a      	bne.n	80023d4 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	865a      	strh	r2, [r3, #50]	@ 0x32
 80023d2:	e005      	b.n	80023e0 <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	88fa      	ldrh	r2, [r7, #6]
 80023d8:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	88fa      	ldrh	r2, [r7, #6]
 80023de:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e4:	4a32      	ldr	r2, [pc, #200]	@ (80024b0 <HAL_I2S_Receive_DMA+0x164>)
 80023e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ec:	4a31      	ldr	r2, [pc, #196]	@ (80024b4 <HAL_I2S_Receive_DMA+0x168>)
 80023ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f4:	4a30      	ldr	r2, [pc, #192]	@ (80024b8 <HAL_I2S_Receive_DMA+0x16c>)
 80023f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002402:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002406:	d10a      	bne.n	800241e <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	330c      	adds	r3, #12
 8002428:	4619      	mov	r1, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002434:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002436:	f7ff f9b7 	bl	80017a8 <HAL_DMA_Start_IT>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00f      	beq.n	8002460 <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002444:	f043 0208 	orr.w	r2, r3, #8
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e022      	b.n	80024a6 <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d107      	bne.n	8002486 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0201 	orr.w	r2, r2, #1
 8002484:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002490:	2b00      	cmp	r3, #0
 8002492:	d107      	bne.n	80024a4 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69da      	ldr	r2, [r3, #28]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80024a2:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	0800253f 	.word	0x0800253f
 80024b4:	080024fd 	.word	0x080024fd
 80024b8:	0800255b 	.word	0x0800255b

080024bc <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	4798      	blx	r3
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002508:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10e      	bne.n	8002530 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0201 	bic.w	r2, r2, #1
 8002520:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f7fe fb5b 	bl	8000bec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b084      	sub	sp, #16
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f7fe fb33 	bl	8000bb8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002566:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0203 	bic.w	r2, r2, #3
 8002576:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002590:	f043 0208 	orr.w	r2, r3, #8
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7ff ffa5 	bl	80024e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b2:	881a      	ldrh	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	1c9a      	adds	r2, r3, #2
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10e      	bne.n	80025fa <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80025ea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ff6d 	bl	80024d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002614:	b292      	uxth	r2, r2
 8002616:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261c:	1c9a      	adds	r2, r3, #2
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10e      	bne.n	8002658 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002648:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe faca 	bl	8000bec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b04      	cmp	r3, #4
 800267a:	d13a      	bne.n	80026f2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b01      	cmp	r3, #1
 8002684:	d109      	bne.n	800269a <I2S_IRQHandler+0x3a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002690:	2b40      	cmp	r3, #64	@ 0x40
 8002692:	d102      	bne.n	800269a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff ffb4 	bl	8002602 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a0:	2b40      	cmp	r3, #64	@ 0x40
 80026a2:	d126      	bne.n	80026f2 <I2S_IRQHandler+0x92>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	d11f      	bne.n	80026f2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80026c0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e4:	f043 0202 	orr.w	r2, r3, #2
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff fefb 	bl	80024e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d136      	bne.n	800276c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b02      	cmp	r3, #2
 8002706:	d109      	bne.n	800271c <I2S_IRQHandler+0xbc>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002712:	2b80      	cmp	r3, #128	@ 0x80
 8002714:	d102      	bne.n	800271c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ff45 	bl	80025a6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b08      	cmp	r3, #8
 8002724:	d122      	bne.n	800276c <I2S_IRQHandler+0x10c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b20      	cmp	r3, #32
 8002732:	d11b      	bne.n	800276c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002742:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275e:	f043 0204 	orr.w	r2, r3, #4
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff febe 	bl	80024e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800276c:	bf00      	nop
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a92      	ldr	r2, [pc, #584]	@ (80029d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d101      	bne.n	8002792 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800278e:	4b92      	ldr	r3, [pc, #584]	@ (80029d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002790:	e001      	b.n	8002796 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002792:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a8b      	ldr	r2, [pc, #556]	@ (80029d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d101      	bne.n	80027b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80027ac:	4b8a      	ldr	r3, [pc, #552]	@ (80029d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027ae:	e001      	b.n	80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80027b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027c0:	d004      	beq.n	80027cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f040 8099 	bne.w	80028fe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d107      	bne.n	80027e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f925 	bl	8002a30 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d107      	bne.n	8002800 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f9c8 	bl	8002b90 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002806:	2b40      	cmp	r3, #64	@ 0x40
 8002808:	d13a      	bne.n	8002880 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b00      	cmp	r3, #0
 8002812:	d035      	beq.n	8002880 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a6e      	ldr	r2, [pc, #440]	@ (80029d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d101      	bne.n	8002822 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800281e:	4b6e      	ldr	r3, [pc, #440]	@ (80029d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002820:	e001      	b.n	8002826 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002822:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4969      	ldr	r1, [pc, #420]	@ (80029d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800282e:	428b      	cmp	r3, r1
 8002830:	d101      	bne.n	8002836 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002832:	4b69      	ldr	r3, [pc, #420]	@ (80029d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002834:	e001      	b.n	800283a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002836:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800283a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800283e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800284e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	f043 0202 	orr.w	r2, r3, #2
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff fe34 	bl	80024e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b08      	cmp	r3, #8
 8002888:	f040 80c3 	bne.w	8002a12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f003 0320 	and.w	r3, r3, #32
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 80bd 	beq.w	8002a12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80028a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a49      	ldr	r2, [pc, #292]	@ (80029d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d101      	bne.n	80028b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80028b2:	4b49      	ldr	r3, [pc, #292]	@ (80029d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80028b4:	e001      	b.n	80028ba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80028b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4944      	ldr	r1, [pc, #272]	@ (80029d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80028c2:	428b      	cmp	r3, r1
 80028c4:	d101      	bne.n	80028ca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80028c6:	4b44      	ldr	r3, [pc, #272]	@ (80029d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80028c8:	e001      	b.n	80028ce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80028ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80028ce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80028d2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	f043 0204 	orr.w	r2, r3, #4
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff fdf6 	bl	80024e8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80028fc:	e089      	b.n	8002a12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b02      	cmp	r3, #2
 8002906:	d107      	bne.n	8002918 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f8be 	bl	8002a94 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b01      	cmp	r3, #1
 8002920:	d107      	bne.n	8002932 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f8fd 	bl	8002b2c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002938:	2b40      	cmp	r3, #64	@ 0x40
 800293a:	d12f      	bne.n	800299c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f003 0320 	and.w	r3, r3, #32
 8002942:	2b00      	cmp	r3, #0
 8002944:	d02a      	beq.n	800299c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002954:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1e      	ldr	r2, [pc, #120]	@ (80029d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d101      	bne.n	8002964 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002960:	4b1d      	ldr	r3, [pc, #116]	@ (80029d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002962:	e001      	b.n	8002968 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002964:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4919      	ldr	r1, [pc, #100]	@ (80029d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002970:	428b      	cmp	r3, r1
 8002972:	d101      	bne.n	8002978 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002974:	4b18      	ldr	r3, [pc, #96]	@ (80029d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002976:	e001      	b.n	800297c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002978:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800297c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002980:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298e:	f043 0202 	orr.w	r2, r3, #2
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff fda6 	bl	80024e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d136      	bne.n	8002a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d031      	beq.n	8002a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a07      	ldr	r2, [pc, #28]	@ (80029d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d101      	bne.n	80029be <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80029ba:	4b07      	ldr	r3, [pc, #28]	@ (80029d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029bc:	e001      	b.n	80029c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80029be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4902      	ldr	r1, [pc, #8]	@ (80029d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80029ca:	428b      	cmp	r3, r1
 80029cc:	d106      	bne.n	80029dc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80029ce:	4b02      	ldr	r3, [pc, #8]	@ (80029d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029d0:	e006      	b.n	80029e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80029d2:	bf00      	nop
 80029d4:	40003800 	.word	0x40003800
 80029d8:	40003400 	.word	0x40003400
 80029dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80029e4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80029f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a02:	f043 0204 	orr.w	r2, r3, #4
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff fd6c 	bl	80024e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a10:	e000      	b.n	8002a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a12:	bf00      	nop
}
 8002a14:	bf00      	nop
 8002a16:	3720      	adds	r7, #32
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	1c99      	adds	r1, r3, #2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6251      	str	r1, [r2, #36]	@ 0x24
 8002a42:	881a      	ldrh	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d113      	bne.n	8002a8a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a70:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d106      	bne.n	8002a8a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff ffc9 	bl	8002a1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	1c99      	adds	r1, r3, #2
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6251      	str	r1, [r2, #36]	@ 0x24
 8002aa6:	8819      	ldrh	r1, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1d      	ldr	r2, [pc, #116]	@ (8002b24 <I2SEx_TxISR_I2SExt+0x90>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <I2SEx_TxISR_I2SExt+0x22>
 8002ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8002b28 <I2SEx_TxISR_I2SExt+0x94>)
 8002ab4:	e001      	b.n	8002aba <I2SEx_TxISR_I2SExt+0x26>
 8002ab6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002aba:	460a      	mov	r2, r1
 8002abc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d121      	bne.n	8002b1a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a12      	ldr	r2, [pc, #72]	@ (8002b24 <I2SEx_TxISR_I2SExt+0x90>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d101      	bne.n	8002ae4 <I2SEx_TxISR_I2SExt+0x50>
 8002ae0:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <I2SEx_TxISR_I2SExt+0x94>)
 8002ae2:	e001      	b.n	8002ae8 <I2SEx_TxISR_I2SExt+0x54>
 8002ae4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	490d      	ldr	r1, [pc, #52]	@ (8002b24 <I2SEx_TxISR_I2SExt+0x90>)
 8002af0:	428b      	cmp	r3, r1
 8002af2:	d101      	bne.n	8002af8 <I2SEx_TxISR_I2SExt+0x64>
 8002af4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b28 <I2SEx_TxISR_I2SExt+0x94>)
 8002af6:	e001      	b.n	8002afc <I2SEx_TxISR_I2SExt+0x68>
 8002af8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002afc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d106      	bne.n	8002b1a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff ff81 	bl	8002a1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40003800 	.word	0x40003800
 8002b28:	40003400 	.word	0x40003400

08002b2c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68d8      	ldr	r0, [r3, #12]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3e:	1c99      	adds	r1, r3, #2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002b44:	b282      	uxth	r2, r0
 8002b46:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d113      	bne.n	8002b88 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b6e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff ff4a 	bl	8002a1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a20      	ldr	r2, [pc, #128]	@ (8002c20 <I2SEx_RxISR_I2SExt+0x90>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d101      	bne.n	8002ba6 <I2SEx_RxISR_I2SExt+0x16>
 8002ba2:	4b20      	ldr	r3, [pc, #128]	@ (8002c24 <I2SEx_RxISR_I2SExt+0x94>)
 8002ba4:	e001      	b.n	8002baa <I2SEx_RxISR_I2SExt+0x1a>
 8002ba6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002baa:	68d8      	ldr	r0, [r3, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb0:	1c99      	adds	r1, r3, #2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002bb6:	b282      	uxth	r2, r0
 8002bb8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d121      	bne.n	8002c16 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a12      	ldr	r2, [pc, #72]	@ (8002c20 <I2SEx_RxISR_I2SExt+0x90>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d101      	bne.n	8002be0 <I2SEx_RxISR_I2SExt+0x50>
 8002bdc:	4b11      	ldr	r3, [pc, #68]	@ (8002c24 <I2SEx_RxISR_I2SExt+0x94>)
 8002bde:	e001      	b.n	8002be4 <I2SEx_RxISR_I2SExt+0x54>
 8002be0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	490d      	ldr	r1, [pc, #52]	@ (8002c20 <I2SEx_RxISR_I2SExt+0x90>)
 8002bec:	428b      	cmp	r3, r1
 8002bee:	d101      	bne.n	8002bf4 <I2SEx_RxISR_I2SExt+0x64>
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c24 <I2SEx_RxISR_I2SExt+0x94>)
 8002bf2:	e001      	b.n	8002bf8 <I2SEx_RxISR_I2SExt+0x68>
 8002bf4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bf8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002bfc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d106      	bne.n	8002c16 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff ff03 	bl	8002a1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40003800 	.word	0x40003800
 8002c24:	40003400 	.word	0x40003400

08002c28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e101      	b.n	8002e3e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d106      	bne.n	8002c5a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f00a f971 	bl	800cf3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c68:	d102      	bne.n	8002c70 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f003 f9ce 	bl	8006016 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	7c1a      	ldrb	r2, [r3, #16]
 8002c82:	f88d 2000 	strb.w	r2, [sp]
 8002c86:	3304      	adds	r3, #4
 8002c88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c8a:	f003 f8ad 	bl	8005de8 <USB_CoreInit>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0ce      	b.n	8002e3e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f003 f9c6 	bl	8006038 <USB_SetCurrentMode>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e0bf      	b.n	8002e3e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	73fb      	strb	r3, [r7, #15]
 8002cc2:	e04a      	b.n	8002d5a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	3315      	adds	r3, #21
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3314      	adds	r3, #20
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	b298      	uxth	r0, r3
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	332e      	adds	r3, #46	@ 0x2e
 8002d00:	4602      	mov	r2, r0
 8002d02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d04:	7bfa      	ldrb	r2, [r7, #15]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	3318      	adds	r3, #24
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	331c      	adds	r3, #28
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	3320      	adds	r3, #32
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d40:	7bfa      	ldrb	r2, [r7, #15]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3324      	adds	r3, #36	@ 0x24
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	3301      	adds	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	791b      	ldrb	r3, [r3, #4]
 8002d5e:	7bfa      	ldrb	r2, [r7, #15]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d3af      	bcc.n	8002cc4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d64:	2300      	movs	r3, #0
 8002d66:	73fb      	strb	r3, [r7, #15]
 8002d68:	e044      	b.n	8002df4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002d92:	7bfa      	ldrb	r2, [r7, #15]
 8002d94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d96:	7bfa      	ldrb	r2, [r7, #15]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4413      	add	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dac:	7bfa      	ldrb	r2, [r7, #15]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dc2:	7bfa      	ldrb	r2, [r7, #15]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002dd8:	7bfa      	ldrb	r2, [r7, #15]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	3301      	adds	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	791b      	ldrb	r3, [r3, #4]
 8002df8:	7bfa      	ldrb	r2, [r7, #15]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d3b5      	bcc.n	8002d6a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	7c1a      	ldrb	r2, [r3, #16]
 8002e06:	f88d 2000 	strb.w	r2, [sp]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e0e:	f003 f95f 	bl	80060d0 <USB_DevInit>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e00c      	b.n	8002e3e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f004 f9a9 	bl	800718e <USB_DevDisconnect>

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_PCD_Start+0x1c>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e022      	b.n	8002ea8 <HAL_PCD_Start+0x62>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d105      	bne.n	8002e8a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e82:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f003 f8b0 	bl	8005ff4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f004 f957 	bl	800714c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b08d      	sub	sp, #52	@ 0x34
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f004 fa15 	bl	80072f6 <USB_GetMode>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f040 848c 	bne.w	80037ec <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f004 f979 	bl	80071d0 <USB_ReadInterrupts>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8482 	beq.w	80037ea <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	0a1b      	lsrs	r3, r3, #8
 8002ef0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f004 f966 	bl	80071d0 <USB_ReadInterrupts>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d107      	bne.n	8002f1e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695a      	ldr	r2, [r3, #20]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f002 0202 	and.w	r2, r2, #2
 8002f1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f004 f954 	bl	80071d0 <USB_ReadInterrupts>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	2b10      	cmp	r3, #16
 8002f30:	d161      	bne.n	8002ff6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699a      	ldr	r2, [r3, #24]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0210 	bic.w	r2, r2, #16
 8002f40:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	f003 020f 	and.w	r2, r3, #15
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3304      	adds	r3, #4
 8002f60:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	0c5b      	lsrs	r3, r3, #17
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d124      	bne.n	8002fb8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d035      	beq.n	8002fe6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	091b      	lsrs	r3, r3, #4
 8002f82:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	6a38      	ldr	r0, [r7, #32]
 8002f8e:	f003 ff8b 	bl	8006ea8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	091b      	lsrs	r3, r3, #4
 8002f9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f9e:	441a      	add	r2, r3
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	695a      	ldr	r2, [r3, #20]
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	091b      	lsrs	r3, r3, #4
 8002fac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fb0:	441a      	add	r2, r3
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	615a      	str	r2, [r3, #20]
 8002fb6:	e016      	b.n	8002fe6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	0c5b      	lsrs	r3, r3, #17
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	2b06      	cmp	r3, #6
 8002fc2:	d110      	bne.n	8002fe6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002fca:	2208      	movs	r2, #8
 8002fcc:	4619      	mov	r1, r3
 8002fce:	6a38      	ldr	r0, [r7, #32]
 8002fd0:	f003 ff6a 	bl	8006ea8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	091b      	lsrs	r3, r3, #4
 8002fdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fe0:	441a      	add	r2, r3
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	699a      	ldr	r2, [r3, #24]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0210 	orr.w	r2, r2, #16
 8002ff4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f004 f8e8 	bl	80071d0 <USB_ReadInterrupts>
 8003000:	4603      	mov	r3, r0
 8003002:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003006:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800300a:	f040 80a7 	bne.w	800315c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f004 f8ed 	bl	80071f6 <USB_ReadDevAllOutEpInterrupt>
 800301c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800301e:	e099      	b.n	8003154 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 808e 	beq.w	8003148 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f004 f911 	bl	800725e <USB_ReadDevOutEPInterrupt>
 800303c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00c      	beq.n	8003062 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	4413      	add	r3, r2
 8003050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003054:	461a      	mov	r2, r3
 8003056:	2301      	movs	r3, #1
 8003058:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800305a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fea3 	bl	8003da8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00c      	beq.n	8003086 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800306c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	4413      	add	r3, r2
 8003074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003078:	461a      	mov	r2, r3
 800307a:	2308      	movs	r3, #8
 800307c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800307e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 ff79 	bl	8003f78 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	4413      	add	r3, r2
 8003098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800309c:	461a      	mov	r2, r3
 800309e:	2310      	movs	r3, #16
 80030a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d030      	beq.n	800310e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b4:	2b80      	cmp	r3, #128	@ 0x80
 80030b6:	d109      	bne.n	80030cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80030cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	4413      	add	r3, r2
 80030de:	3304      	adds	r3, #4
 80030e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	78db      	ldrb	r3, [r3, #3]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d108      	bne.n	80030fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2200      	movs	r2, #0
 80030ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80030f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	4619      	mov	r1, r3
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f00a f844 	bl	800d184 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80030fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	4413      	add	r3, r2
 8003104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003108:	461a      	mov	r2, r3
 800310a:	2302      	movs	r3, #2
 800310c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	4413      	add	r3, r2
 8003120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003124:	461a      	mov	r2, r3
 8003126:	2320      	movs	r3, #32
 8003128:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d009      	beq.n	8003148 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	4413      	add	r3, r2
 800313c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003140:	461a      	mov	r2, r3
 8003142:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003146:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	3301      	adds	r3, #1
 800314c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800314e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003150:	085b      	lsrs	r3, r3, #1
 8003152:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003156:	2b00      	cmp	r3, #0
 8003158:	f47f af62 	bne.w	8003020 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f004 f835 	bl	80071d0 <USB_ReadInterrupts>
 8003166:	4603      	mov	r3, r0
 8003168:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800316c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003170:	f040 80db 	bne.w	800332a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f004 f856 	bl	800722a <USB_ReadDevAllInEpInterrupt>
 800317e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003184:	e0cd      	b.n	8003322 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80c2 	beq.w	8003316 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	4611      	mov	r1, r2
 800319c:	4618      	mov	r0, r3
 800319e:	f004 f87c 	bl	800729a <USB_ReadDevInEPInterrupt>
 80031a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d057      	beq.n	800325e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	2201      	movs	r2, #1
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69f9      	ldr	r1, [r7, #28]
 80031ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031ce:	4013      	ands	r3, r2
 80031d0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031de:	461a      	mov	r2, r3
 80031e0:	2301      	movs	r3, #1
 80031e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	799b      	ldrb	r3, [r3, #6]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d132      	bne.n	8003252 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	3320      	adds	r3, #32
 80031fc:	6819      	ldr	r1, [r3, #0]
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003202:	4613      	mov	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4403      	add	r3, r0
 800320c:	331c      	adds	r3, #28
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4419      	add	r1, r3
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003216:	4613      	mov	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	4413      	add	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4403      	add	r3, r0
 8003220:	3320      	adds	r3, #32
 8003222:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003226:	2b00      	cmp	r3, #0
 8003228:	d113      	bne.n	8003252 <HAL_PCD_IRQHandler+0x3a2>
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	3324      	adds	r3, #36	@ 0x24
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d108      	bne.n	8003252 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800324a:	461a      	mov	r2, r3
 800324c:	2101      	movs	r1, #1
 800324e:	f004 f883 	bl	8007358 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003254:	b2db      	uxtb	r3, r3
 8003256:	4619      	mov	r1, r3
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f009 ff0e 	bl	800d07a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003274:	461a      	mov	r2, r3
 8003276:	2308      	movs	r3, #8
 8003278:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	4413      	add	r3, r2
 800328c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003290:	461a      	mov	r2, r3
 8003292:	2310      	movs	r3, #16
 8003294:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80032a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032ac:	461a      	mov	r2, r3
 80032ae:	2340      	movs	r3, #64	@ 0x40
 80032b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d023      	beq.n	8003304 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80032bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032be:	6a38      	ldr	r0, [r7, #32]
 80032c0:	f003 f86a 	bl	8006398 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80032c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c6:	4613      	mov	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4413      	add	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	3310      	adds	r3, #16
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	4413      	add	r3, r2
 80032d4:	3304      	adds	r3, #4
 80032d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	78db      	ldrb	r3, [r3, #3]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d108      	bne.n	80032f2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2200      	movs	r2, #0
 80032e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	4619      	mov	r1, r3
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f009 ff5b 	bl	800d1a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80032f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032fe:	461a      	mov	r2, r3
 8003300:	2302      	movs	r3, #2
 8003302:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800330e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fcbd 	bl	8003c90 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	3301      	adds	r3, #1
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800331c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331e:	085b      	lsrs	r3, r3, #1
 8003320:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003324:	2b00      	cmp	r3, #0
 8003326:	f47f af2e 	bne.w	8003186 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f003 ff4e 	bl	80071d0 <USB_ReadInterrupts>
 8003334:	4603      	mov	r3, r0
 8003336:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800333a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800333e:	d122      	bne.n	8003386 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800334e:	f023 0301 	bic.w	r3, r3, #1
 8003352:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800335a:	2b01      	cmp	r3, #1
 800335c:	d108      	bne.n	8003370 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003366:	2100      	movs	r1, #0
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 fea3 	bl	80040b4 <HAL_PCDEx_LPM_Callback>
 800336e:	e002      	b.n	8003376 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f009 fef9 	bl	800d168 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003384:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f003 ff20 	bl	80071d0 <USB_ReadInterrupts>
 8003390:	4603      	mov	r3, r0
 8003392:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003396:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800339a:	d112      	bne.n	80033c2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d102      	bne.n	80033b2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f009 feb5 	bl	800d11c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80033c0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f003 ff02 	bl	80071d0 <USB_ReadInterrupts>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033d6:	f040 80b7 	bne.w	8003548 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2110      	movs	r1, #16
 80033f4:	4618      	mov	r0, r3
 80033f6:	f002 ffcf 	bl	8006398 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033fa:	2300      	movs	r3, #0
 80033fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033fe:	e046      	b.n	800348e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	4413      	add	r3, r2
 8003408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800340c:	461a      	mov	r2, r3
 800340e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003412:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003424:	0151      	lsls	r1, r2, #5
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	440a      	add	r2, r1
 800342a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800342e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003432:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003440:	461a      	mov	r2, r3
 8003442:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003446:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	4413      	add	r3, r2
 8003450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003458:	0151      	lsls	r1, r2, #5
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	440a      	add	r2, r1
 800345e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003462:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003466:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003478:	0151      	lsls	r1, r2, #5
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	440a      	add	r2, r1
 800347e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003482:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003486:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800348a:	3301      	adds	r3, #1
 800348c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	791b      	ldrb	r3, [r3, #4]
 8003492:	461a      	mov	r2, r3
 8003494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003496:	4293      	cmp	r3, r2
 8003498:	d3b2      	bcc.n	8003400 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034a8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80034ac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	7bdb      	ldrb	r3, [r3, #15]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d016      	beq.n	80034e4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034c0:	69fa      	ldr	r2, [r7, #28]
 80034c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034c6:	f043 030b 	orr.w	r3, r3, #11
 80034ca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034dc:	f043 030b 	orr.w	r3, r3, #11
 80034e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80034e2:	e015      	b.n	8003510 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80034f6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80034fa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800350a:	f043 030b 	orr.w	r3, r3, #11
 800350e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800351e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003522:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003532:	461a      	mov	r2, r3
 8003534:	f003 ff10 	bl	8007358 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695a      	ldr	r2, [r3, #20]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003546:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f003 fe3f 	bl	80071d0 <USB_ReadInterrupts>
 8003552:	4603      	mov	r3, r0
 8003554:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003558:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800355c:	d123      	bne.n	80035a6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f003 fed5 	bl	8007312 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f002 ff8c 	bl	800648a <USB_GetDevSpeed>
 8003572:	4603      	mov	r3, r0
 8003574:	461a      	mov	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681c      	ldr	r4, [r3, #0]
 800357e:	f001 fa09 	bl	8004994 <HAL_RCC_GetHCLKFreq>
 8003582:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003588:	461a      	mov	r2, r3
 800358a:	4620      	mov	r0, r4
 800358c:	f002 fc90 	bl	8005eb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f009 fd9a 	bl	800d0ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695a      	ldr	r2, [r3, #20]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80035a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f003 fe10 	bl	80071d0 <USB_ReadInterrupts>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d10a      	bne.n	80035d0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f009 fd77 	bl	800d0ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695a      	ldr	r2, [r3, #20]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f002 0208 	and.w	r2, r2, #8
 80035ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f003 fdfb 	bl	80071d0 <USB_ReadInterrupts>
 80035da:	4603      	mov	r3, r0
 80035dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e0:	2b80      	cmp	r3, #128	@ 0x80
 80035e2:	d123      	bne.n	800362c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035f0:	2301      	movs	r3, #1
 80035f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80035f4:	e014      	b.n	8003620 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035fa:	4613      	mov	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d105      	bne.n	800361a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	b2db      	uxtb	r3, r3
 8003612:	4619      	mov	r1, r3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fb0a 	bl	8003c2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	3301      	adds	r3, #1
 800361e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	791b      	ldrb	r3, [r3, #4]
 8003624:	461a      	mov	r2, r3
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	4293      	cmp	r3, r2
 800362a:	d3e4      	bcc.n	80035f6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f003 fdcd 	bl	80071d0 <USB_ReadInterrupts>
 8003636:	4603      	mov	r3, r0
 8003638:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800363c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003640:	d13c      	bne.n	80036bc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003642:	2301      	movs	r3, #1
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
 8003646:	e02b      	b.n	80036a0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	3318      	adds	r3, #24
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d115      	bne.n	800369a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800366e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003670:	2b00      	cmp	r3, #0
 8003672:	da12      	bge.n	800369a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	3317      	adds	r3, #23
 8003684:	2201      	movs	r2, #1
 8003686:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003690:	b2db      	uxtb	r3, r3
 8003692:	4619      	mov	r1, r3
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 faca 	bl	8003c2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	3301      	adds	r3, #1
 800369e:	627b      	str	r3, [r7, #36]	@ 0x24
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	791b      	ldrb	r3, [r3, #4]
 80036a4:	461a      	mov	r2, r3
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d3cd      	bcc.n	8003648 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80036ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f003 fd85 	bl	80071d0 <USB_ReadInterrupts>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036d0:	d156      	bne.n	8003780 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036d2:	2301      	movs	r3, #1
 80036d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036d6:	e045      	b.n	8003764 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80036d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ec:	4613      	mov	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d12e      	bne.n	800375e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003700:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003702:	2b00      	cmp	r3, #0
 8003704:	da2b      	bge.n	800375e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003712:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003716:	429a      	cmp	r2, r3
 8003718:	d121      	bne.n	800375e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800371e:	4613      	mov	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800372c:	2201      	movs	r2, #1
 800372e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10a      	bne.n	800375e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003756:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800375a:	6053      	str	r3, [r2, #4]
            break;
 800375c:	e008      	b.n	8003770 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003760:	3301      	adds	r3, #1
 8003762:	627b      	str	r3, [r7, #36]	@ 0x24
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	791b      	ldrb	r3, [r3, #4]
 8003768:	461a      	mov	r2, r3
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	4293      	cmp	r3, r2
 800376e:	d3b3      	bcc.n	80036d8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695a      	ldr	r2, [r3, #20]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800377e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f003 fd23 	bl	80071d0 <USB_ReadInterrupts>
 800378a:	4603      	mov	r3, r0
 800378c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003794:	d10a      	bne.n	80037ac <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f009 fd18 	bl	800d1cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695a      	ldr	r2, [r3, #20]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80037aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f003 fd0d 	bl	80071d0 <USB_ReadInterrupts>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d115      	bne.n	80037ec <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f009 fd08 	bl	800d1e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6859      	ldr	r1, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	605a      	str	r2, [r3, #4]
 80037e8:	e000      	b.n	80037ec <HAL_PCD_IRQHandler+0x93c>
      return;
 80037ea:	bf00      	nop
    }
  }
}
 80037ec:	3734      	adds	r7, #52	@ 0x34
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd90      	pop	{r4, r7, pc}

080037f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	460b      	mov	r3, r1
 80037fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_PCD_SetAddress+0x1a>
 8003808:	2302      	movs	r3, #2
 800380a:	e012      	b.n	8003832 <HAL_PCD_SetAddress+0x40>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	78fa      	ldrb	r2, [r7, #3]
 8003820:	4611      	mov	r1, r2
 8003822:	4618      	mov	r0, r3
 8003824:	f003 fc6c 	bl	8007100 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b084      	sub	sp, #16
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	4608      	mov	r0, r1
 8003844:	4611      	mov	r1, r2
 8003846:	461a      	mov	r2, r3
 8003848:	4603      	mov	r3, r0
 800384a:	70fb      	strb	r3, [r7, #3]
 800384c:	460b      	mov	r3, r1
 800384e:	803b      	strh	r3, [r7, #0]
 8003850:	4613      	mov	r3, r2
 8003852:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003858:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800385c:	2b00      	cmp	r3, #0
 800385e:	da0f      	bge.n	8003880 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	f003 020f 	and.w	r2, r3, #15
 8003866:	4613      	mov	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	3310      	adds	r3, #16
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	4413      	add	r3, r2
 8003874:	3304      	adds	r3, #4
 8003876:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2201      	movs	r2, #1
 800387c:	705a      	strb	r2, [r3, #1]
 800387e:	e00f      	b.n	80038a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	f003 020f 	and.w	r2, r3, #15
 8003886:	4613      	mov	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	4413      	add	r3, r2
 8003896:	3304      	adds	r3, #4
 8003898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80038ac:	883b      	ldrh	r3, [r7, #0]
 80038ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	78ba      	ldrb	r2, [r7, #2]
 80038ba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	785b      	ldrb	r3, [r3, #1]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d004      	beq.n	80038ce <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	461a      	mov	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038ce:	78bb      	ldrb	r3, [r7, #2]
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d102      	bne.n	80038da <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_PCD_EP_Open+0xae>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e00e      	b.n	8003906 <HAL_PCD_EP_Open+0xcc>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68f9      	ldr	r1, [r7, #12]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f002 fdec 	bl	80064d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003904:	7afb      	ldrb	r3, [r7, #11]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	460b      	mov	r3, r1
 8003918:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800391a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800391e:	2b00      	cmp	r3, #0
 8003920:	da0f      	bge.n	8003942 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003922:	78fb      	ldrb	r3, [r7, #3]
 8003924:	f003 020f 	and.w	r2, r3, #15
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	3310      	adds	r3, #16
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	3304      	adds	r3, #4
 8003938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	705a      	strb	r2, [r3, #1]
 8003940:	e00f      	b.n	8003962 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	f003 020f 	and.w	r2, r3, #15
 8003948:	4613      	mov	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	4413      	add	r3, r2
 8003958:	3304      	adds	r3, #4
 800395a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	f003 030f 	and.w	r3, r3, #15
 8003968:	b2da      	uxtb	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_PCD_EP_Close+0x6e>
 8003978:	2302      	movs	r3, #2
 800397a:	e00e      	b.n	800399a <HAL_PCD_EP_Close+0x8c>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68f9      	ldr	r1, [r7, #12]
 800398a:	4618      	mov	r0, r3
 800398c:	f002 fe2a 	bl	80065e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b086      	sub	sp, #24
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	607a      	str	r2, [r7, #4]
 80039ac:	603b      	str	r3, [r7, #0]
 80039ae:	460b      	mov	r3, r1
 80039b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039b2:	7afb      	ldrb	r3, [r7, #11]
 80039b4:	f003 020f 	and.w	r2, r3, #15
 80039b8:	4613      	mov	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4413      	add	r3, r2
 80039c8:	3304      	adds	r3, #4
 80039ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2200      	movs	r2, #0
 80039dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2200      	movs	r2, #0
 80039e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039e4:	7afb      	ldrb	r3, [r7, #11]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	799b      	ldrb	r3, [r3, #6]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d102      	bne.n	80039fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	799b      	ldrb	r3, [r3, #6]
 8003a06:	461a      	mov	r2, r3
 8003a08:	6979      	ldr	r1, [r7, #20]
 8003a0a:	f002 fec7 	bl	800679c <USB_EPStartXfer>

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	f003 020f 	and.w	r2, r3, #15
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	460b      	mov	r3, r1
 8003a56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a58:	7afb      	ldrb	r3, [r7, #11]
 8003a5a:	f003 020f 	and.w	r2, r3, #15
 8003a5e:	4613      	mov	r3, r2
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	3310      	adds	r3, #16
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2201      	movs	r2, #1
 8003a86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a88:	7afb      	ldrb	r3, [r7, #11]
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	799b      	ldrb	r3, [r3, #6]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d102      	bne.n	8003aa2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	799b      	ldrb	r3, [r3, #6]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	6979      	ldr	r1, [r7, #20]
 8003aae:	f002 fe75 	bl	800679c <USB_EPStartXfer>

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	7912      	ldrb	r2, [r2, #4]
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e04f      	b.n	8003b7a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ada:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	da0f      	bge.n	8003b02 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ae2:	78fb      	ldrb	r3, [r7, #3]
 8003ae4:	f003 020f 	and.w	r2, r3, #15
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	3310      	adds	r3, #16
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	4413      	add	r3, r2
 8003af6:	3304      	adds	r3, #4
 8003af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	705a      	strb	r2, [r3, #1]
 8003b00:	e00d      	b.n	8003b1e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b02:	78fa      	ldrb	r2, [r7, #3]
 8003b04:	4613      	mov	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	4413      	add	r3, r2
 8003b14:	3304      	adds	r3, #4
 8003b16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_PCD_EP_SetStall+0x82>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e01d      	b.n	8003b7a <HAL_PCD_EP_SetStall+0xbe>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68f9      	ldr	r1, [r7, #12]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f003 fa03 	bl	8006f58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d109      	bne.n	8003b70 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	7999      	ldrb	r1, [r3, #6]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f003 fbf4 	bl	8007358 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b084      	sub	sp, #16
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b8e:	78fb      	ldrb	r3, [r7, #3]
 8003b90:	f003 030f 	and.w	r3, r3, #15
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	7912      	ldrb	r2, [r2, #4]
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e042      	b.n	8003c26 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ba0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	da0f      	bge.n	8003bc8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ba8:	78fb      	ldrb	r3, [r7, #3]
 8003baa:	f003 020f 	and.w	r2, r3, #15
 8003bae:	4613      	mov	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	3310      	adds	r3, #16
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	4413      	add	r3, r2
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	705a      	strb	r2, [r3, #1]
 8003bc6:	e00f      	b.n	8003be8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	f003 020f 	and.w	r2, r3, #15
 8003bce:	4613      	mov	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	3304      	adds	r3, #4
 8003be0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bee:	78fb      	ldrb	r3, [r7, #3]
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_PCD_EP_ClrStall+0x86>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e00e      	b.n	8003c26 <HAL_PCD_EP_ClrStall+0xa4>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68f9      	ldr	r1, [r7, #12]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f003 fa0c 	bl	8007034 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b084      	sub	sp, #16
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	460b      	mov	r3, r1
 8003c38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003c3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	da0c      	bge.n	8003c5c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c42:	78fb      	ldrb	r3, [r7, #3]
 8003c44:	f003 020f 	and.w	r2, r3, #15
 8003c48:	4613      	mov	r3, r2
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	3310      	adds	r3, #16
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	4413      	add	r3, r2
 8003c56:	3304      	adds	r3, #4
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	e00c      	b.n	8003c76 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	f003 020f 	and.w	r2, r3, #15
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	4413      	add	r3, r2
 8003c72:	3304      	adds	r3, #4
 8003c74:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68f9      	ldr	r1, [r7, #12]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f003 f82b 	bl	8006cd8 <USB_EPStopXfer>
 8003c82:	4603      	mov	r3, r0
 8003c84:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c86:	7afb      	ldrb	r3, [r7, #11]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	@ 0x28
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	4413      	add	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	3310      	adds	r3, #16
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	695a      	ldr	r2, [r3, #20]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d901      	bls.n	8003cc8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e06b      	b.n	8003da0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d902      	bls.n	8003ce4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	3303      	adds	r3, #3
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cec:	e02a      	b.n	8003d44 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d902      	bls.n	8003d0a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	3303      	adds	r3, #3
 8003d0e:	089b      	lsrs	r3, r3, #2
 8003d10:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	68d9      	ldr	r1, [r3, #12]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	4603      	mov	r3, r0
 8003d26:	6978      	ldr	r0, [r7, #20]
 8003d28:	f003 f880 	bl	8006e2c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	441a      	add	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	441a      	add	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d809      	bhi.n	8003d6e <PCD_WriteEmptyTxFifo+0xde>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	695a      	ldr	r2, [r3, #20]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d203      	bcs.n	8003d6e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1bf      	bne.n	8003cee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	691a      	ldr	r2, [r3, #16]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d811      	bhi.n	8003d9e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	2201      	movs	r2, #1
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	43db      	mvns	r3, r3
 8003d94:	6939      	ldr	r1, [r7, #16]
 8003d96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3720      	adds	r7, #32
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	333c      	adds	r3, #60	@ 0x3c
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	799b      	ldrb	r3, [r3, #6]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d17b      	bne.n	8003ed6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d015      	beq.n	8003e14 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	4a61      	ldr	r2, [pc, #388]	@ (8003f70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	f240 80b9 	bls.w	8003f64 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80b3 	beq.w	8003f64 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e10:	6093      	str	r3, [r2, #8]
 8003e12:	e0a7      	b.n	8003f64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2320      	movs	r3, #32
 8003e2e:	6093      	str	r3, [r2, #8]
 8003e30:	e098      	b.n	8003f64 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f040 8093 	bne.w	8003f64 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	4a4b      	ldr	r2, [pc, #300]	@ (8003f70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d90f      	bls.n	8003e66 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e62:	6093      	str	r3, [r2, #8]
 8003e64:	e07e      	b.n	8003f64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	4413      	add	r3, r2
 8003e78:	3304      	adds	r3, #4
 8003e7a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a1a      	ldr	r2, [r3, #32]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	0159      	lsls	r1, r3, #5
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	440b      	add	r3, r1
 8003e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e92:	1ad2      	subs	r2, r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d114      	bne.n	8003ec8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6818      	ldr	r0, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	f003 fa50 	bl	8007358 <USB_EP0_OutStart>
 8003eb8:	e006      	b.n	8003ec8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	441a      	add	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	4619      	mov	r1, r3
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f009 f8b8 	bl	800d044 <HAL_PCD_DataOutStageCallback>
 8003ed4:	e046      	b.n	8003f64 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	4a26      	ldr	r2, [pc, #152]	@ (8003f74 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d124      	bne.n	8003f28 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003efa:	6093      	str	r3, [r2, #8]
 8003efc:	e032      	b.n	8003f64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f14:	461a      	mov	r2, r3
 8003f16:	2320      	movs	r3, #32
 8003f18:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	4619      	mov	r1, r3
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f009 f88f 	bl	800d044 <HAL_PCD_DataOutStageCallback>
 8003f26:	e01d      	b.n	8003f64 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d114      	bne.n	8003f58 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	4613      	mov	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d108      	bne.n	8003f58 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f50:	461a      	mov	r2, r3
 8003f52:	2100      	movs	r1, #0
 8003f54:	f003 fa00 	bl	8007358 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f009 f870 	bl	800d044 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3720      	adds	r7, #32
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	4f54300a 	.word	0x4f54300a
 8003f74:	4f54310a 	.word	0x4f54310a

08003f78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	333c      	adds	r3, #60	@ 0x3c
 8003f90:	3304      	adds	r3, #4
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4a15      	ldr	r2, [pc, #84]	@ (8004000 <PCD_EP_OutSetupPacket_int+0x88>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d90e      	bls.n	8003fcc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d009      	beq.n	8003fcc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f009 f827 	bl	800d020 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8004000 <PCD_EP_OutSetupPacket_int+0x88>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d90c      	bls.n	8003ff4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	799b      	ldrb	r3, [r3, #6]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d108      	bne.n	8003ff4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003fec:	461a      	mov	r2, r3
 8003fee:	2101      	movs	r1, #1
 8003ff0:	f003 f9b2 	bl	8007358 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	4f54300a 	.word	0x4f54300a

08004004 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	70fb      	strb	r3, [r7, #3]
 8004010:	4613      	mov	r3, r2
 8004012:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d107      	bne.n	8004032 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004022:	883b      	ldrh	r3, [r7, #0]
 8004024:	0419      	lsls	r1, r3, #16
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	430a      	orrs	r2, r1
 800402e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004030:	e028      	b.n	8004084 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004038:	0c1b      	lsrs	r3, r3, #16
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	4413      	add	r3, r2
 800403e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004040:	2300      	movs	r3, #0
 8004042:	73fb      	strb	r3, [r7, #15]
 8004044:	e00d      	b.n	8004062 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	3340      	adds	r3, #64	@ 0x40
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	0c1b      	lsrs	r3, r3, #16
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	4413      	add	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800405c:	7bfb      	ldrb	r3, [r7, #15]
 800405e:	3301      	adds	r3, #1
 8004060:	73fb      	strb	r3, [r7, #15]
 8004062:	7bfa      	ldrb	r2, [r7, #15]
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	3b01      	subs	r3, #1
 8004068:	429a      	cmp	r2, r3
 800406a:	d3ec      	bcc.n	8004046 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800406c:	883b      	ldrh	r3, [r7, #0]
 800406e:	0418      	lsls	r0, r3, #16
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6819      	ldr	r1, [r3, #0]
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	3b01      	subs	r3, #1
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	4302      	orrs	r2, r0
 800407c:	3340      	adds	r3, #64	@ 0x40
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	460b      	mov	r3, r1
 800409c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	887a      	ldrh	r2, [r7, #2]
 80040a4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e267      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d075      	beq.n	80041d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040ea:	4b88      	ldr	r3, [pc, #544]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 030c 	and.w	r3, r3, #12
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d00c      	beq.n	8004110 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040f6:	4b85      	ldr	r3, [pc, #532]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d112      	bne.n	8004128 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004102:	4b82      	ldr	r3, [pc, #520]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800410a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800410e:	d10b      	bne.n	8004128 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004110:	4b7e      	ldr	r3, [pc, #504]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d05b      	beq.n	80041d4 <HAL_RCC_OscConfig+0x108>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d157      	bne.n	80041d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e242      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004130:	d106      	bne.n	8004140 <HAL_RCC_OscConfig+0x74>
 8004132:	4b76      	ldr	r3, [pc, #472]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a75      	ldr	r2, [pc, #468]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e01d      	b.n	800417c <HAL_RCC_OscConfig+0xb0>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004148:	d10c      	bne.n	8004164 <HAL_RCC_OscConfig+0x98>
 800414a:	4b70      	ldr	r3, [pc, #448]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a6f      	ldr	r2, [pc, #444]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	4b6d      	ldr	r3, [pc, #436]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a6c      	ldr	r2, [pc, #432]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	e00b      	b.n	800417c <HAL_RCC_OscConfig+0xb0>
 8004164:	4b69      	ldr	r3, [pc, #420]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a68      	ldr	r2, [pc, #416]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 800416a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	4b66      	ldr	r3, [pc, #408]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a65      	ldr	r2, [pc, #404]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800417a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d013      	beq.n	80041ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fd f934 	bl	80013f0 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800418c:	f7fd f930 	bl	80013f0 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b64      	cmp	r3, #100	@ 0x64
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e207      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419e:	4b5b      	ldr	r3, [pc, #364]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0xc0>
 80041aa:	e014      	b.n	80041d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ac:	f7fd f920 	bl	80013f0 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b4:	f7fd f91c 	bl	80013f0 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b64      	cmp	r3, #100	@ 0x64
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e1f3      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c6:	4b51      	ldr	r3, [pc, #324]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0xe8>
 80041d2:	e000      	b.n	80041d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d063      	beq.n	80042aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041e2:	4b4a      	ldr	r3, [pc, #296]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00b      	beq.n	8004206 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ee:	4b47      	ldr	r3, [pc, #284]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d11c      	bne.n	8004234 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041fa:	4b44      	ldr	r3, [pc, #272]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d116      	bne.n	8004234 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004206:	4b41      	ldr	r3, [pc, #260]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <HAL_RCC_OscConfig+0x152>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d001      	beq.n	800421e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e1c7      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421e:	4b3b      	ldr	r3, [pc, #236]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4937      	ldr	r1, [pc, #220]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 800422e:	4313      	orrs	r3, r2
 8004230:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004232:	e03a      	b.n	80042aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d020      	beq.n	800427e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800423c:	4b34      	ldr	r3, [pc, #208]	@ (8004310 <HAL_RCC_OscConfig+0x244>)
 800423e:	2201      	movs	r2, #1
 8004240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004242:	f7fd f8d5 	bl	80013f0 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800424a:	f7fd f8d1 	bl	80013f0 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e1a8      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425c:	4b2b      	ldr	r3, [pc, #172]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f0      	beq.n	800424a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004268:	4b28      	ldr	r3, [pc, #160]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	4925      	ldr	r1, [pc, #148]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 8004278:	4313      	orrs	r3, r2
 800427a:	600b      	str	r3, [r1, #0]
 800427c:	e015      	b.n	80042aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800427e:	4b24      	ldr	r3, [pc, #144]	@ (8004310 <HAL_RCC_OscConfig+0x244>)
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004284:	f7fd f8b4 	bl	80013f0 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800428c:	f7fd f8b0 	bl	80013f0 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e187      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429e:	4b1b      	ldr	r3, [pc, #108]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f0      	bne.n	800428c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d036      	beq.n	8004324 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d016      	beq.n	80042ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042be:	4b15      	ldr	r3, [pc, #84]	@ (8004314 <HAL_RCC_OscConfig+0x248>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c4:	f7fd f894 	bl	80013f0 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042cc:	f7fd f890 	bl	80013f0 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e167      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042de:	4b0b      	ldr	r3, [pc, #44]	@ (800430c <HAL_RCC_OscConfig+0x240>)
 80042e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0x200>
 80042ea:	e01b      	b.n	8004324 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ec:	4b09      	ldr	r3, [pc, #36]	@ (8004314 <HAL_RCC_OscConfig+0x248>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f2:	f7fd f87d 	bl	80013f0 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f8:	e00e      	b.n	8004318 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042fa:	f7fd f879 	bl	80013f0 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d907      	bls.n	8004318 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e150      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
 800430c:	40023800 	.word	0x40023800
 8004310:	42470000 	.word	0x42470000
 8004314:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004318:	4b88      	ldr	r3, [pc, #544]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 800431a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1ea      	bne.n	80042fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8097 	beq.w	8004460 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004332:	2300      	movs	r3, #0
 8004334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004336:	4b81      	ldr	r3, [pc, #516]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10f      	bne.n	8004362 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004342:	2300      	movs	r3, #0
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	4b7d      	ldr	r3, [pc, #500]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434a:	4a7c      	ldr	r2, [pc, #496]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 800434c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004350:	6413      	str	r3, [r2, #64]	@ 0x40
 8004352:	4b7a      	ldr	r3, [pc, #488]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800435a:	60bb      	str	r3, [r7, #8]
 800435c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800435e:	2301      	movs	r3, #1
 8004360:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004362:	4b77      	ldr	r3, [pc, #476]	@ (8004540 <HAL_RCC_OscConfig+0x474>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436a:	2b00      	cmp	r3, #0
 800436c:	d118      	bne.n	80043a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800436e:	4b74      	ldr	r3, [pc, #464]	@ (8004540 <HAL_RCC_OscConfig+0x474>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a73      	ldr	r2, [pc, #460]	@ (8004540 <HAL_RCC_OscConfig+0x474>)
 8004374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437a:	f7fd f839 	bl	80013f0 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004382:	f7fd f835 	bl	80013f0 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e10c      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004394:	4b6a      	ldr	r3, [pc, #424]	@ (8004540 <HAL_RCC_OscConfig+0x474>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f0      	beq.n	8004382 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d106      	bne.n	80043b6 <HAL_RCC_OscConfig+0x2ea>
 80043a8:	4b64      	ldr	r3, [pc, #400]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80043aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ac:	4a63      	ldr	r2, [pc, #396]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b4:	e01c      	b.n	80043f0 <HAL_RCC_OscConfig+0x324>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b05      	cmp	r3, #5
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCC_OscConfig+0x30c>
 80043be:	4b5f      	ldr	r3, [pc, #380]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c2:	4a5e      	ldr	r2, [pc, #376]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80043c4:	f043 0304 	orr.w	r3, r3, #4
 80043c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ca:	4b5c      	ldr	r3, [pc, #368]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ce:	4a5b      	ldr	r2, [pc, #364]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80043d0:	f043 0301 	orr.w	r3, r3, #1
 80043d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80043d6:	e00b      	b.n	80043f0 <HAL_RCC_OscConfig+0x324>
 80043d8:	4b58      	ldr	r3, [pc, #352]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80043da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043dc:	4a57      	ldr	r2, [pc, #348]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80043de:	f023 0301 	bic.w	r3, r3, #1
 80043e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80043e4:	4b55      	ldr	r3, [pc, #340]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e8:	4a54      	ldr	r2, [pc, #336]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80043ea:	f023 0304 	bic.w	r3, r3, #4
 80043ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d015      	beq.n	8004424 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f8:	f7fc fffa 	bl	80013f0 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fe:	e00a      	b.n	8004416 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004400:	f7fc fff6 	bl	80013f0 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800440e:	4293      	cmp	r3, r2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e0cb      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004416:	4b49      	ldr	r3, [pc, #292]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0ee      	beq.n	8004400 <HAL_RCC_OscConfig+0x334>
 8004422:	e014      	b.n	800444e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004424:	f7fc ffe4 	bl	80013f0 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800442a:	e00a      	b.n	8004442 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442c:	f7fc ffe0 	bl	80013f0 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800443a:	4293      	cmp	r3, r2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e0b5      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004442:	4b3e      	ldr	r3, [pc, #248]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 8004444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1ee      	bne.n	800442c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800444e:	7dfb      	ldrb	r3, [r7, #23]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d105      	bne.n	8004460 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004454:	4b39      	ldr	r3, [pc, #228]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 8004456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004458:	4a38      	ldr	r2, [pc, #224]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 800445a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800445e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80a1 	beq.w	80045ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800446a:	4b34      	ldr	r3, [pc, #208]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 030c 	and.w	r3, r3, #12
 8004472:	2b08      	cmp	r3, #8
 8004474:	d05c      	beq.n	8004530 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d141      	bne.n	8004502 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447e:	4b31      	ldr	r3, [pc, #196]	@ (8004544 <HAL_RCC_OscConfig+0x478>)
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004484:	f7fc ffb4 	bl	80013f0 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800448c:	f7fc ffb0 	bl	80013f0 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e087      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449e:	4b27      	ldr	r3, [pc, #156]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69da      	ldr	r2, [r3, #28]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	019b      	lsls	r3, r3, #6
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c0:	085b      	lsrs	r3, r3, #1
 80044c2:	3b01      	subs	r3, #1
 80044c4:	041b      	lsls	r3, r3, #16
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044cc:	061b      	lsls	r3, r3, #24
 80044ce:	491b      	ldr	r1, [pc, #108]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004544 <HAL_RCC_OscConfig+0x478>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044da:	f7fc ff89 	bl	80013f0 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e2:	f7fc ff85 	bl	80013f0 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e05c      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f4:	4b11      	ldr	r3, [pc, #68]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0f0      	beq.n	80044e2 <HAL_RCC_OscConfig+0x416>
 8004500:	e054      	b.n	80045ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004502:	4b10      	ldr	r3, [pc, #64]	@ (8004544 <HAL_RCC_OscConfig+0x478>)
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004508:	f7fc ff72 	bl	80013f0 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004510:	f7fc ff6e 	bl	80013f0 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e045      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004522:	4b06      	ldr	r3, [pc, #24]	@ (800453c <HAL_RCC_OscConfig+0x470>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f0      	bne.n	8004510 <HAL_RCC_OscConfig+0x444>
 800452e:	e03d      	b.n	80045ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d107      	bne.n	8004548 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e038      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
 800453c:	40023800 	.word	0x40023800
 8004540:	40007000 	.word	0x40007000
 8004544:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004548:	4b1b      	ldr	r3, [pc, #108]	@ (80045b8 <HAL_RCC_OscConfig+0x4ec>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d028      	beq.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004560:	429a      	cmp	r2, r3
 8004562:	d121      	bne.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456e:	429a      	cmp	r2, r3
 8004570:	d11a      	bne.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004578:	4013      	ands	r3, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800457e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004580:	4293      	cmp	r3, r2
 8004582:	d111      	bne.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458e:	085b      	lsrs	r3, r3, #1
 8004590:	3b01      	subs	r3, #1
 8004592:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004594:	429a      	cmp	r2, r3
 8004596:	d107      	bne.n	80045a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e000      	b.n	80045ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800

080045bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0cc      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045d0:	4b68      	ldr	r3, [pc, #416]	@ (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d90c      	bls.n	80045f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045de:	4b65      	ldr	r3, [pc, #404]	@ (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e6:	4b63      	ldr	r3, [pc, #396]	@ (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e0b8      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d020      	beq.n	8004646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004610:	4b59      	ldr	r3, [pc, #356]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	4a58      	ldr	r2, [pc, #352]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800461a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004628:	4b53      	ldr	r3, [pc, #332]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4a52      	ldr	r2, [pc, #328]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004634:	4b50      	ldr	r3, [pc, #320]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	494d      	ldr	r1, [pc, #308]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d044      	beq.n	80046dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d107      	bne.n	800466a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465a:	4b47      	ldr	r3, [pc, #284]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d119      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e07f      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d003      	beq.n	800467a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004676:	2b03      	cmp	r3, #3
 8004678:	d107      	bne.n	800468a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467a:	4b3f      	ldr	r3, [pc, #252]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d109      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e06f      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468a:	4b3b      	ldr	r3, [pc, #236]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e067      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800469a:	4b37      	ldr	r3, [pc, #220]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f023 0203 	bic.w	r2, r3, #3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	4934      	ldr	r1, [pc, #208]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046ac:	f7fc fea0 	bl	80013f0 <HAL_GetTick>
 80046b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b2:	e00a      	b.n	80046ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b4:	f7fc fe9c 	bl	80013f0 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e04f      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 020c 	and.w	r2, r3, #12
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	429a      	cmp	r2, r3
 80046da:	d1eb      	bne.n	80046b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046dc:	4b25      	ldr	r3, [pc, #148]	@ (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d20c      	bcs.n	8004704 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b22      	ldr	r3, [pc, #136]	@ (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b20      	ldr	r3, [pc, #128]	@ (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e032      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004710:	4b19      	ldr	r3, [pc, #100]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4916      	ldr	r1, [pc, #88]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800472e:	4b12      	ldr	r3, [pc, #72]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	490e      	ldr	r1, [pc, #56]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004742:	f000 f821 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8004746:	4602      	mov	r2, r0
 8004748:	4b0b      	ldr	r3, [pc, #44]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	490a      	ldr	r1, [pc, #40]	@ (800477c <HAL_RCC_ClockConfig+0x1c0>)
 8004754:	5ccb      	ldrb	r3, [r1, r3]
 8004756:	fa22 f303 	lsr.w	r3, r2, r3
 800475a:	4a09      	ldr	r2, [pc, #36]	@ (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800475e:	4b09      	ldr	r3, [pc, #36]	@ (8004784 <HAL_RCC_ClockConfig+0x1c8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f7fc fc64 	bl	8001030 <HAL_InitTick>

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40023c00 	.word	0x40023c00
 8004778:	40023800 	.word	0x40023800
 800477c:	0800e720 	.word	0x0800e720
 8004780:	2000000c 	.word	0x2000000c
 8004784:	20000010 	.word	0x20000010

08004788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800478c:	b094      	sub	sp, #80	@ 0x50
 800478e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047a0:	4b79      	ldr	r3, [pc, #484]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x200>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 030c 	and.w	r3, r3, #12
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d00d      	beq.n	80047c8 <HAL_RCC_GetSysClockFreq+0x40>
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	f200 80e1 	bhi.w	8004974 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0x34>
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d003      	beq.n	80047c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80047ba:	e0db      	b.n	8004974 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047bc:	4b73      	ldr	r3, [pc, #460]	@ (800498c <HAL_RCC_GetSysClockFreq+0x204>)
 80047be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047c0:	e0db      	b.n	800497a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047c2:	4b73      	ldr	r3, [pc, #460]	@ (8004990 <HAL_RCC_GetSysClockFreq+0x208>)
 80047c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047c6:	e0d8      	b.n	800497a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047c8:	4b6f      	ldr	r3, [pc, #444]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x200>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x200>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d063      	beq.n	80048a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047de:	4b6a      	ldr	r3, [pc, #424]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x200>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	099b      	lsrs	r3, r3, #6
 80047e4:	2200      	movs	r2, #0
 80047e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80047ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80047f2:	2300      	movs	r3, #0
 80047f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80047f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047fa:	4622      	mov	r2, r4
 80047fc:	462b      	mov	r3, r5
 80047fe:	f04f 0000 	mov.w	r0, #0
 8004802:	f04f 0100 	mov.w	r1, #0
 8004806:	0159      	lsls	r1, r3, #5
 8004808:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800480c:	0150      	lsls	r0, r2, #5
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4621      	mov	r1, r4
 8004814:	1a51      	subs	r1, r2, r1
 8004816:	6139      	str	r1, [r7, #16]
 8004818:	4629      	mov	r1, r5
 800481a:	eb63 0301 	sbc.w	r3, r3, r1
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800482c:	4659      	mov	r1, fp
 800482e:	018b      	lsls	r3, r1, #6
 8004830:	4651      	mov	r1, sl
 8004832:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004836:	4651      	mov	r1, sl
 8004838:	018a      	lsls	r2, r1, #6
 800483a:	4651      	mov	r1, sl
 800483c:	ebb2 0801 	subs.w	r8, r2, r1
 8004840:	4659      	mov	r1, fp
 8004842:	eb63 0901 	sbc.w	r9, r3, r1
 8004846:	f04f 0200 	mov.w	r2, #0
 800484a:	f04f 0300 	mov.w	r3, #0
 800484e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800485a:	4690      	mov	r8, r2
 800485c:	4699      	mov	r9, r3
 800485e:	4623      	mov	r3, r4
 8004860:	eb18 0303 	adds.w	r3, r8, r3
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	462b      	mov	r3, r5
 8004868:	eb49 0303 	adc.w	r3, r9, r3
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800487a:	4629      	mov	r1, r5
 800487c:	024b      	lsls	r3, r1, #9
 800487e:	4621      	mov	r1, r4
 8004880:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004884:	4621      	mov	r1, r4
 8004886:	024a      	lsls	r2, r1, #9
 8004888:	4610      	mov	r0, r2
 800488a:	4619      	mov	r1, r3
 800488c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800488e:	2200      	movs	r2, #0
 8004890:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004892:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004894:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004898:	f7fb fcea 	bl	8000270 <__aeabi_uldivmod>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4613      	mov	r3, r2
 80048a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048a4:	e058      	b.n	8004958 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048a6:	4b38      	ldr	r3, [pc, #224]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	099b      	lsrs	r3, r3, #6
 80048ac:	2200      	movs	r2, #0
 80048ae:	4618      	mov	r0, r3
 80048b0:	4611      	mov	r1, r2
 80048b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048b6:	623b      	str	r3, [r7, #32]
 80048b8:	2300      	movs	r3, #0
 80048ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80048bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048c0:	4642      	mov	r2, r8
 80048c2:	464b      	mov	r3, r9
 80048c4:	f04f 0000 	mov.w	r0, #0
 80048c8:	f04f 0100 	mov.w	r1, #0
 80048cc:	0159      	lsls	r1, r3, #5
 80048ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048d2:	0150      	lsls	r0, r2, #5
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4641      	mov	r1, r8
 80048da:	ebb2 0a01 	subs.w	sl, r2, r1
 80048de:	4649      	mov	r1, r9
 80048e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048f8:	ebb2 040a 	subs.w	r4, r2, sl
 80048fc:	eb63 050b 	sbc.w	r5, r3, fp
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	00eb      	lsls	r3, r5, #3
 800490a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800490e:	00e2      	lsls	r2, r4, #3
 8004910:	4614      	mov	r4, r2
 8004912:	461d      	mov	r5, r3
 8004914:	4643      	mov	r3, r8
 8004916:	18e3      	adds	r3, r4, r3
 8004918:	603b      	str	r3, [r7, #0]
 800491a:	464b      	mov	r3, r9
 800491c:	eb45 0303 	adc.w	r3, r5, r3
 8004920:	607b      	str	r3, [r7, #4]
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800492e:	4629      	mov	r1, r5
 8004930:	028b      	lsls	r3, r1, #10
 8004932:	4621      	mov	r1, r4
 8004934:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004938:	4621      	mov	r1, r4
 800493a:	028a      	lsls	r2, r1, #10
 800493c:	4610      	mov	r0, r2
 800493e:	4619      	mov	r1, r3
 8004940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004942:	2200      	movs	r2, #0
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	61fa      	str	r2, [r7, #28]
 8004948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800494c:	f7fb fc90 	bl	8000270 <__aeabi_uldivmod>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4613      	mov	r3, r2
 8004956:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004958:	4b0b      	ldr	r3, [pc, #44]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x200>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	0c1b      	lsrs	r3, r3, #16
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	3301      	adds	r3, #1
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004968:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800496a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004972:	e002      	b.n	800497a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004974:	4b05      	ldr	r3, [pc, #20]	@ (800498c <HAL_RCC_GetSysClockFreq+0x204>)
 8004976:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800497a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800497c:	4618      	mov	r0, r3
 800497e:	3750      	adds	r7, #80	@ 0x50
 8004980:	46bd      	mov	sp, r7
 8004982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004986:	bf00      	nop
 8004988:	40023800 	.word	0x40023800
 800498c:	00f42400 	.word	0x00f42400
 8004990:	007a1200 	.word	0x007a1200

08004994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004998:	4b03      	ldr	r3, [pc, #12]	@ (80049a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800499a:	681b      	ldr	r3, [r3, #0]
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	2000000c 	.word	0x2000000c

080049ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049b0:	f7ff fff0 	bl	8004994 <HAL_RCC_GetHCLKFreq>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4b05      	ldr	r3, [pc, #20]	@ (80049cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	0a9b      	lsrs	r3, r3, #10
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	4903      	ldr	r1, [pc, #12]	@ (80049d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049c2:	5ccb      	ldrb	r3, [r1, r3]
 80049c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40023800 	.word	0x40023800
 80049d0:	0800e730 	.word	0x0800e730

080049d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049d8:	f7ff ffdc 	bl	8004994 <HAL_RCC_GetHCLKFreq>
 80049dc:	4602      	mov	r2, r0
 80049de:	4b05      	ldr	r3, [pc, #20]	@ (80049f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	0b5b      	lsrs	r3, r3, #13
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	4903      	ldr	r1, [pc, #12]	@ (80049f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049ea:	5ccb      	ldrb	r3, [r1, r3]
 80049ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40023800 	.word	0x40023800
 80049f8:	0800e730 	.word	0x0800e730

080049fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	220f      	movs	r2, #15
 8004a0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a0c:	4b12      	ldr	r3, [pc, #72]	@ (8004a58 <HAL_RCC_GetClockConfig+0x5c>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 0203 	and.w	r2, r3, #3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a18:	4b0f      	ldr	r3, [pc, #60]	@ (8004a58 <HAL_RCC_GetClockConfig+0x5c>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a24:	4b0c      	ldr	r3, [pc, #48]	@ (8004a58 <HAL_RCC_GetClockConfig+0x5c>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a30:	4b09      	ldr	r3, [pc, #36]	@ (8004a58 <HAL_RCC_GetClockConfig+0x5c>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	08db      	lsrs	r3, r3, #3
 8004a36:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a3e:	4b07      	ldr	r3, [pc, #28]	@ (8004a5c <HAL_RCC_GetClockConfig+0x60>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0207 	and.w	r2, r3, #7
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	601a      	str	r2, [r3, #0]
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	40023c00 	.word	0x40023c00

08004a60 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d105      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d035      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a88:	4b62      	ldr	r3, [pc, #392]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a8e:	f7fc fcaf 	bl	80013f0 <HAL_GetTick>
 8004a92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a96:	f7fc fcab 	bl	80013f0 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e0b0      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004aa8:	4b5b      	ldr	r3, [pc, #364]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	019a      	lsls	r2, r3, #6
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	071b      	lsls	r3, r3, #28
 8004ac0:	4955      	ldr	r1, [pc, #340]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ac8:	4b52      	ldr	r3, [pc, #328]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ace:	f7fc fc8f 	bl	80013f0 <HAL_GetTick>
 8004ad2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ad6:	f7fc fc8b 	bl	80013f0 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e090      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ae8:	4b4b      	ldr	r3, [pc, #300]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8083 	beq.w	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	4b44      	ldr	r3, [pc, #272]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	4a43      	ldr	r2, [pc, #268]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b12:	4b41      	ldr	r3, [pc, #260]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a3e      	ldr	r2, [pc, #248]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b28:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b2a:	f7fc fc61 	bl	80013f0 <HAL_GetTick>
 8004b2e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004b30:	e008      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b32:	f7fc fc5d 	bl	80013f0 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e062      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004b44:	4b35      	ldr	r3, [pc, #212]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b50:	4b31      	ldr	r3, [pc, #196]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b58:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d02f      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d028      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b76:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b78:	4b29      	ldr	r3, [pc, #164]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b7e:	4b28      	ldr	r3, [pc, #160]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b84:	4a24      	ldr	r2, [pc, #144]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b8a:	4b23      	ldr	r3, [pc, #140]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d114      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b96:	f7fc fc2b 	bl	80013f0 <HAL_GetTick>
 8004b9a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b9c:	e00a      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b9e:	f7fc fc27 	bl	80013f0 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e02a      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb4:	4b18      	ldr	r3, [pc, #96]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0ee      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bcc:	d10d      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004bce:	4b12      	ldr	r3, [pc, #72]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004bde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004be2:	490d      	ldr	r1, [pc, #52]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	608b      	str	r3, [r1, #8]
 8004be8:	e005      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004bea:	4b0b      	ldr	r3, [pc, #44]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	4a0a      	ldr	r2, [pc, #40]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004bf4:	6093      	str	r3, [r2, #8]
 8004bf6:	4b08      	ldr	r3, [pc, #32]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c02:	4905      	ldr	r1, [pc, #20]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	42470068 	.word	0x42470068
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40007000 	.word	0x40007000
 8004c20:	42470e40 	.word	0x42470e40

08004c24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d13f      	bne.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c42:	4b24      	ldr	r3, [pc, #144]	@ (8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d006      	beq.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c58:	d12f      	bne.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c5c:	617b      	str	r3, [r7, #20]
          break;
 8004c5e:	e02f      	b.n	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c60:	4b1c      	ldr	r3, [pc, #112]	@ (8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c6c:	d108      	bne.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c6e:	4b19      	ldr	r3, [pc, #100]	@ (8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c76:	4a19      	ldr	r2, [pc, #100]	@ (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7c:	613b      	str	r3, [r7, #16]
 8004c7e:	e007      	b.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c80:	4b14      	ldr	r3, [pc, #80]	@ (8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c88:	4a15      	ldr	r2, [pc, #84]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c90:	4b10      	ldr	r3, [pc, #64]	@ (8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c96:	099b      	lsrs	r3, r3, #6
 8004c98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ca2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004caa:	0f1b      	lsrs	r3, r3, #28
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb6:	617b      	str	r3, [r7, #20]
          break;
 8004cb8:	e002      	b.n	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
          break;
 8004cbe:	bf00      	nop
        }
      }
      break;
 8004cc0:	e000      	b.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004cc2:	bf00      	nop
    }
  }
  return frequency;
 8004cc4:	697b      	ldr	r3, [r7, #20]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	00bb8000 	.word	0x00bb8000
 8004cdc:	007a1200 	.word	0x007a1200
 8004ce0:	00f42400 	.word	0x00f42400

08004ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e041      	b.n	8004d7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fc f920 	bl	8000f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	4619      	mov	r1, r3
 8004d22:	4610      	mov	r0, r2
 8004d24:	f000 fa7e 	bl	8005224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d001      	beq.n	8004d9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e04e      	b.n	8004e3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0201 	orr.w	r2, r2, #1
 8004db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a23      	ldr	r2, [pc, #140]	@ (8004e48 <HAL_TIM_Base_Start_IT+0xc4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d022      	beq.n	8004e04 <HAL_TIM_Base_Start_IT+0x80>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc6:	d01d      	beq.n	8004e04 <HAL_TIM_Base_Start_IT+0x80>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8004e4c <HAL_TIM_Base_Start_IT+0xc8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d018      	beq.n	8004e04 <HAL_TIM_Base_Start_IT+0x80>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8004e50 <HAL_TIM_Base_Start_IT+0xcc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d013      	beq.n	8004e04 <HAL_TIM_Base_Start_IT+0x80>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a1c      	ldr	r2, [pc, #112]	@ (8004e54 <HAL_TIM_Base_Start_IT+0xd0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d00e      	beq.n	8004e04 <HAL_TIM_Base_Start_IT+0x80>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a1b      	ldr	r2, [pc, #108]	@ (8004e58 <HAL_TIM_Base_Start_IT+0xd4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d009      	beq.n	8004e04 <HAL_TIM_Base_Start_IT+0x80>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a19      	ldr	r2, [pc, #100]	@ (8004e5c <HAL_TIM_Base_Start_IT+0xd8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d004      	beq.n	8004e04 <HAL_TIM_Base_Start_IT+0x80>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a18      	ldr	r2, [pc, #96]	@ (8004e60 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d111      	bne.n	8004e28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b06      	cmp	r3, #6
 8004e14:	d010      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f042 0201 	orr.w	r2, r2, #1
 8004e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e26:	e007      	b.n	8004e38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40010000 	.word	0x40010000
 8004e4c:	40000400 	.word	0x40000400
 8004e50:	40000800 	.word	0x40000800
 8004e54:	40000c00 	.word	0x40000c00
 8004e58:	40010400 	.word	0x40010400
 8004e5c:	40014000 	.word	0x40014000
 8004e60:	40001800 	.word	0x40001800

08004e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d020      	beq.n	8004ec8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01b      	beq.n	8004ec8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0202 	mvn.w	r2, #2
 8004e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f999 	bl	80051e6 <HAL_TIM_IC_CaptureCallback>
 8004eb4:	e005      	b.n	8004ec2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f98b 	bl	80051d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f99c 	bl	80051fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d020      	beq.n	8004f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01b      	beq.n	8004f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0204 	mvn.w	r2, #4
 8004ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f973 	bl	80051e6 <HAL_TIM_IC_CaptureCallback>
 8004f00:	e005      	b.n	8004f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f965 	bl	80051d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f976 	bl	80051fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d020      	beq.n	8004f60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01b      	beq.n	8004f60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f06f 0208 	mvn.w	r2, #8
 8004f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2204      	movs	r2, #4
 8004f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f94d 	bl	80051e6 <HAL_TIM_IC_CaptureCallback>
 8004f4c:	e005      	b.n	8004f5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f93f 	bl	80051d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f950 	bl	80051fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f003 0310 	and.w	r3, r3, #16
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d020      	beq.n	8004fac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01b      	beq.n	8004fac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0210 	mvn.w	r2, #16
 8004f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2208      	movs	r2, #8
 8004f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f927 	bl	80051e6 <HAL_TIM_IC_CaptureCallback>
 8004f98:	e005      	b.n	8004fa6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f919 	bl	80051d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f92a 	bl	80051fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00c      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d007      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0201 	mvn.w	r2, #1
 8004fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fb fe9c 	bl	8000d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00c      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d007      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fae4 	bl	80055bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00c      	beq.n	8005018 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f8fb 	bl	800520e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00c      	beq.n	800503c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b00      	cmp	r3, #0
 800502a:	d007      	beq.n	800503c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0220 	mvn.w	r2, #32
 8005034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fab6 	bl	80055a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800503c:	bf00      	nop
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_TIM_ConfigClockSource+0x1c>
 800505c:	2302      	movs	r3, #2
 800505e:	e0b4      	b.n	80051ca <HAL_TIM_ConfigClockSource+0x186>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800507e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005086:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005098:	d03e      	beq.n	8005118 <HAL_TIM_ConfigClockSource+0xd4>
 800509a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800509e:	f200 8087 	bhi.w	80051b0 <HAL_TIM_ConfigClockSource+0x16c>
 80050a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050a6:	f000 8086 	beq.w	80051b6 <HAL_TIM_ConfigClockSource+0x172>
 80050aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ae:	d87f      	bhi.n	80051b0 <HAL_TIM_ConfigClockSource+0x16c>
 80050b0:	2b70      	cmp	r3, #112	@ 0x70
 80050b2:	d01a      	beq.n	80050ea <HAL_TIM_ConfigClockSource+0xa6>
 80050b4:	2b70      	cmp	r3, #112	@ 0x70
 80050b6:	d87b      	bhi.n	80051b0 <HAL_TIM_ConfigClockSource+0x16c>
 80050b8:	2b60      	cmp	r3, #96	@ 0x60
 80050ba:	d050      	beq.n	800515e <HAL_TIM_ConfigClockSource+0x11a>
 80050bc:	2b60      	cmp	r3, #96	@ 0x60
 80050be:	d877      	bhi.n	80051b0 <HAL_TIM_ConfigClockSource+0x16c>
 80050c0:	2b50      	cmp	r3, #80	@ 0x50
 80050c2:	d03c      	beq.n	800513e <HAL_TIM_ConfigClockSource+0xfa>
 80050c4:	2b50      	cmp	r3, #80	@ 0x50
 80050c6:	d873      	bhi.n	80051b0 <HAL_TIM_ConfigClockSource+0x16c>
 80050c8:	2b40      	cmp	r3, #64	@ 0x40
 80050ca:	d058      	beq.n	800517e <HAL_TIM_ConfigClockSource+0x13a>
 80050cc:	2b40      	cmp	r3, #64	@ 0x40
 80050ce:	d86f      	bhi.n	80051b0 <HAL_TIM_ConfigClockSource+0x16c>
 80050d0:	2b30      	cmp	r3, #48	@ 0x30
 80050d2:	d064      	beq.n	800519e <HAL_TIM_ConfigClockSource+0x15a>
 80050d4:	2b30      	cmp	r3, #48	@ 0x30
 80050d6:	d86b      	bhi.n	80051b0 <HAL_TIM_ConfigClockSource+0x16c>
 80050d8:	2b20      	cmp	r3, #32
 80050da:	d060      	beq.n	800519e <HAL_TIM_ConfigClockSource+0x15a>
 80050dc:	2b20      	cmp	r3, #32
 80050de:	d867      	bhi.n	80051b0 <HAL_TIM_ConfigClockSource+0x16c>
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d05c      	beq.n	800519e <HAL_TIM_ConfigClockSource+0x15a>
 80050e4:	2b10      	cmp	r3, #16
 80050e6:	d05a      	beq.n	800519e <HAL_TIM_ConfigClockSource+0x15a>
 80050e8:	e062      	b.n	80051b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050fa:	f000 f9b9 	bl	8005470 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800510c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	609a      	str	r2, [r3, #8]
      break;
 8005116:	e04f      	b.n	80051b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005128:	f000 f9a2 	bl	8005470 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800513a:	609a      	str	r2, [r3, #8]
      break;
 800513c:	e03c      	b.n	80051b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800514a:	461a      	mov	r2, r3
 800514c:	f000 f916 	bl	800537c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2150      	movs	r1, #80	@ 0x50
 8005156:	4618      	mov	r0, r3
 8005158:	f000 f96f 	bl	800543a <TIM_ITRx_SetConfig>
      break;
 800515c:	e02c      	b.n	80051b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800516a:	461a      	mov	r2, r3
 800516c:	f000 f935 	bl	80053da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2160      	movs	r1, #96	@ 0x60
 8005176:	4618      	mov	r0, r3
 8005178:	f000 f95f 	bl	800543a <TIM_ITRx_SetConfig>
      break;
 800517c:	e01c      	b.n	80051b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800518a:	461a      	mov	r2, r3
 800518c:	f000 f8f6 	bl	800537c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2140      	movs	r1, #64	@ 0x40
 8005196:	4618      	mov	r0, r3
 8005198:	f000 f94f 	bl	800543a <TIM_ITRx_SetConfig>
      break;
 800519c:	e00c      	b.n	80051b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4619      	mov	r1, r3
 80051a8:	4610      	mov	r0, r2
 80051aa:	f000 f946 	bl	800543a <TIM_ITRx_SetConfig>
      break;
 80051ae:	e003      	b.n	80051b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
      break;
 80051b4:	e000      	b.n	80051b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
	...

08005224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a46      	ldr	r2, [pc, #280]	@ (8005350 <TIM_Base_SetConfig+0x12c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d013      	beq.n	8005264 <TIM_Base_SetConfig+0x40>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005242:	d00f      	beq.n	8005264 <TIM_Base_SetConfig+0x40>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a43      	ldr	r2, [pc, #268]	@ (8005354 <TIM_Base_SetConfig+0x130>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00b      	beq.n	8005264 <TIM_Base_SetConfig+0x40>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a42      	ldr	r2, [pc, #264]	@ (8005358 <TIM_Base_SetConfig+0x134>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d007      	beq.n	8005264 <TIM_Base_SetConfig+0x40>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a41      	ldr	r2, [pc, #260]	@ (800535c <TIM_Base_SetConfig+0x138>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d003      	beq.n	8005264 <TIM_Base_SetConfig+0x40>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a40      	ldr	r2, [pc, #256]	@ (8005360 <TIM_Base_SetConfig+0x13c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d108      	bne.n	8005276 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800526a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a35      	ldr	r2, [pc, #212]	@ (8005350 <TIM_Base_SetConfig+0x12c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d02b      	beq.n	80052d6 <TIM_Base_SetConfig+0xb2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005284:	d027      	beq.n	80052d6 <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a32      	ldr	r2, [pc, #200]	@ (8005354 <TIM_Base_SetConfig+0x130>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d023      	beq.n	80052d6 <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a31      	ldr	r2, [pc, #196]	@ (8005358 <TIM_Base_SetConfig+0x134>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d01f      	beq.n	80052d6 <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a30      	ldr	r2, [pc, #192]	@ (800535c <TIM_Base_SetConfig+0x138>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d01b      	beq.n	80052d6 <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a2f      	ldr	r2, [pc, #188]	@ (8005360 <TIM_Base_SetConfig+0x13c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d017      	beq.n	80052d6 <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a2e      	ldr	r2, [pc, #184]	@ (8005364 <TIM_Base_SetConfig+0x140>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d013      	beq.n	80052d6 <TIM_Base_SetConfig+0xb2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005368 <TIM_Base_SetConfig+0x144>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d00f      	beq.n	80052d6 <TIM_Base_SetConfig+0xb2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a2c      	ldr	r2, [pc, #176]	@ (800536c <TIM_Base_SetConfig+0x148>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00b      	beq.n	80052d6 <TIM_Base_SetConfig+0xb2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a2b      	ldr	r2, [pc, #172]	@ (8005370 <TIM_Base_SetConfig+0x14c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d007      	beq.n	80052d6 <TIM_Base_SetConfig+0xb2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a2a      	ldr	r2, [pc, #168]	@ (8005374 <TIM_Base_SetConfig+0x150>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d003      	beq.n	80052d6 <TIM_Base_SetConfig+0xb2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a29      	ldr	r2, [pc, #164]	@ (8005378 <TIM_Base_SetConfig+0x154>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d108      	bne.n	80052e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a10      	ldr	r2, [pc, #64]	@ (8005350 <TIM_Base_SetConfig+0x12c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d003      	beq.n	800531c <TIM_Base_SetConfig+0xf8>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a12      	ldr	r2, [pc, #72]	@ (8005360 <TIM_Base_SetConfig+0x13c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d103      	bne.n	8005324 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	691a      	ldr	r2, [r3, #16]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b01      	cmp	r3, #1
 8005334:	d105      	bne.n	8005342 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f023 0201 	bic.w	r2, r3, #1
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	611a      	str	r2, [r3, #16]
  }
}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40010000 	.word	0x40010000
 8005354:	40000400 	.word	0x40000400
 8005358:	40000800 	.word	0x40000800
 800535c:	40000c00 	.word	0x40000c00
 8005360:	40010400 	.word	0x40010400
 8005364:	40014000 	.word	0x40014000
 8005368:	40014400 	.word	0x40014400
 800536c:	40014800 	.word	0x40014800
 8005370:	40001800 	.word	0x40001800
 8005374:	40001c00 	.word	0x40001c00
 8005378:	40002000 	.word	0x40002000

0800537c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	f023 0201 	bic.w	r2, r3, #1
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f023 030a 	bic.w	r3, r3, #10
 80053b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	621a      	str	r2, [r3, #32]
}
 80053ce:	bf00      	nop
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053da:	b480      	push	{r7}
 80053dc:	b087      	sub	sp, #28
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	f023 0210 	bic.w	r2, r3, #16
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005404:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	031b      	lsls	r3, r3, #12
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005416:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800543a:	b480      	push	{r7}
 800543c:	b085      	sub	sp, #20
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005450:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4313      	orrs	r3, r2
 8005458:	f043 0307 	orr.w	r3, r3, #7
 800545c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	609a      	str	r2, [r3, #8]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800548a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	021a      	lsls	r2, r3, #8
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	431a      	orrs	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4313      	orrs	r3, r2
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	609a      	str	r2, [r3, #8]
}
 80054a4:	bf00      	nop
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e05a      	b.n	800557e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a21      	ldr	r2, [pc, #132]	@ (800558c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d022      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005514:	d01d      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a1d      	ldr	r2, [pc, #116]	@ (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d018      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1b      	ldr	r2, [pc, #108]	@ (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d013      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1a      	ldr	r2, [pc, #104]	@ (8005598 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00e      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a18      	ldr	r2, [pc, #96]	@ (800559c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d009      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a17      	ldr	r2, [pc, #92]	@ (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d004      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a15      	ldr	r2, [pc, #84]	@ (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d10c      	bne.n	800556c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005558:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	4313      	orrs	r3, r2
 8005562:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	40010000 	.word	0x40010000
 8005590:	40000400 	.word	0x40000400
 8005594:	40000800 	.word	0x40000800
 8005598:	40000c00 	.word	0x40000c00
 800559c:	40010400 	.word	0x40010400
 80055a0:	40014000 	.word	0x40014000
 80055a4:	40001800 	.word	0x40001800

080055a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e042      	b.n	8005668 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7fb fcd2 	bl	8000fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2224      	movs	r2, #36	@ 0x24
 8005600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005612:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f973 	bl	8005900 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	691a      	ldr	r2, [r3, #16]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005628:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695a      	ldr	r2, [r3, #20]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005638:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005648:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08a      	sub	sp, #40	@ 0x28
 8005674:	af02      	add	r7, sp, #8
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	603b      	str	r3, [r7, #0]
 800567c:	4613      	mov	r3, r2
 800567e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b20      	cmp	r3, #32
 800568e:	d175      	bne.n	800577c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <HAL_UART_Transmit+0x2c>
 8005696:	88fb      	ldrh	r3, [r7, #6]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e06e      	b.n	800577e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2221      	movs	r2, #33	@ 0x21
 80056aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ae:	f7fb fe9f 	bl	80013f0 <HAL_GetTick>
 80056b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	88fa      	ldrh	r2, [r7, #6]
 80056b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	88fa      	ldrh	r2, [r7, #6]
 80056be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056c8:	d108      	bne.n	80056dc <HAL_UART_Transmit+0x6c>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d104      	bne.n	80056dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	e003      	b.n	80056e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056e0:	2300      	movs	r3, #0
 80056e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056e4:	e02e      	b.n	8005744 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2200      	movs	r2, #0
 80056ee:	2180      	movs	r1, #128	@ 0x80
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 f848 	bl	8005786 <UART_WaitOnFlagUntilTimeout>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d005      	beq.n	8005708 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e03a      	b.n	800577e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10b      	bne.n	8005726 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800571c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	3302      	adds	r3, #2
 8005722:	61bb      	str	r3, [r7, #24]
 8005724:	e007      	b.n	8005736 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	781a      	ldrb	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	3301      	adds	r3, #1
 8005734:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1cb      	bne.n	80056e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2200      	movs	r2, #0
 8005756:	2140      	movs	r1, #64	@ 0x40
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f814 	bl	8005786 <UART_WaitOnFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d005      	beq.n	8005770 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e006      	b.n	800577e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005778:	2300      	movs	r3, #0
 800577a:	e000      	b.n	800577e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800577c:	2302      	movs	r3, #2
  }
}
 800577e:	4618      	mov	r0, r3
 8005780:	3720      	adds	r7, #32
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b086      	sub	sp, #24
 800578a:	af00      	add	r7, sp, #0
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	603b      	str	r3, [r7, #0]
 8005792:	4613      	mov	r3, r2
 8005794:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005796:	e03b      	b.n	8005810 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579e:	d037      	beq.n	8005810 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057a0:	f7fb fe26 	bl	80013f0 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	6a3a      	ldr	r2, [r7, #32]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d302      	bcc.n	80057b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e03a      	b.n	8005830 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d023      	beq.n	8005810 <UART_WaitOnFlagUntilTimeout+0x8a>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b80      	cmp	r3, #128	@ 0x80
 80057cc:	d020      	beq.n	8005810 <UART_WaitOnFlagUntilTimeout+0x8a>
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b40      	cmp	r3, #64	@ 0x40
 80057d2:	d01d      	beq.n	8005810 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0308 	and.w	r3, r3, #8
 80057de:	2b08      	cmp	r3, #8
 80057e0:	d116      	bne.n	8005810 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80057e2:	2300      	movs	r3, #0
 80057e4:	617b      	str	r3, [r7, #20]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	617b      	str	r3, [r7, #20]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 f81d 	bl	8005838 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2208      	movs	r2, #8
 8005802:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e00f      	b.n	8005830 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	4013      	ands	r3, r2
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	429a      	cmp	r2, r3
 800581e:	bf0c      	ite	eq
 8005820:	2301      	moveq	r3, #1
 8005822:	2300      	movne	r3, #0
 8005824:	b2db      	uxtb	r3, r3
 8005826:	461a      	mov	r2, r3
 8005828:	79fb      	ldrb	r3, [r7, #7]
 800582a:	429a      	cmp	r2, r3
 800582c:	d0b4      	beq.n	8005798 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3718      	adds	r7, #24
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005838:	b480      	push	{r7}
 800583a:	b095      	sub	sp, #84	@ 0x54
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	330c      	adds	r3, #12
 8005846:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800584a:	e853 3f00 	ldrex	r3, [r3]
 800584e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005852:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	330c      	adds	r3, #12
 800585e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005860:	643a      	str	r2, [r7, #64]	@ 0x40
 8005862:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005864:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005866:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005868:	e841 2300 	strex	r3, r2, [r1]
 800586c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800586e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e5      	bne.n	8005840 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3314      	adds	r3, #20
 800587a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	e853 3f00 	ldrex	r3, [r3]
 8005882:	61fb      	str	r3, [r7, #28]
   return(result);
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	f023 0301 	bic.w	r3, r3, #1
 800588a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3314      	adds	r3, #20
 8005892:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005894:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005896:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005898:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800589a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800589c:	e841 2300 	strex	r3, r2, [r1]
 80058a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1e5      	bne.n	8005874 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d119      	bne.n	80058e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	330c      	adds	r3, #12
 80058b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	e853 3f00 	ldrex	r3, [r3]
 80058be:	60bb      	str	r3, [r7, #8]
   return(result);
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f023 0310 	bic.w	r3, r3, #16
 80058c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	330c      	adds	r3, #12
 80058ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058d0:	61ba      	str	r2, [r7, #24]
 80058d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d4:	6979      	ldr	r1, [r7, #20]
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	e841 2300 	strex	r3, r2, [r1]
 80058dc:	613b      	str	r3, [r7, #16]
   return(result);
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e5      	bne.n	80058b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2220      	movs	r2, #32
 80058e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058f2:	bf00      	nop
 80058f4:	3754      	adds	r7, #84	@ 0x54
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
	...

08005900 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005904:	b0c0      	sub	sp, #256	@ 0x100
 8005906:	af00      	add	r7, sp, #0
 8005908:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800591c:	68d9      	ldr	r1, [r3, #12]
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	ea40 0301 	orr.w	r3, r0, r1
 8005928:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	431a      	orrs	r2, r3
 8005938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	431a      	orrs	r2, r3
 8005940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800594c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005958:	f021 010c 	bic.w	r1, r1, #12
 800595c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005966:	430b      	orrs	r3, r1
 8005968:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800596a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800597a:	6999      	ldr	r1, [r3, #24]
 800597c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	ea40 0301 	orr.w	r3, r0, r1
 8005986:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	4b8f      	ldr	r3, [pc, #572]	@ (8005bcc <UART_SetConfig+0x2cc>)
 8005990:	429a      	cmp	r2, r3
 8005992:	d005      	beq.n	80059a0 <UART_SetConfig+0xa0>
 8005994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	4b8d      	ldr	r3, [pc, #564]	@ (8005bd0 <UART_SetConfig+0x2d0>)
 800599c:	429a      	cmp	r2, r3
 800599e:	d104      	bne.n	80059aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059a0:	f7ff f818 	bl	80049d4 <HAL_RCC_GetPCLK2Freq>
 80059a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80059a8:	e003      	b.n	80059b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059aa:	f7fe ffff 	bl	80049ac <HAL_RCC_GetPCLK1Freq>
 80059ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059bc:	f040 810c 	bne.w	8005bd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80059ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80059d2:	4622      	mov	r2, r4
 80059d4:	462b      	mov	r3, r5
 80059d6:	1891      	adds	r1, r2, r2
 80059d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059da:	415b      	adcs	r3, r3
 80059dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80059e2:	4621      	mov	r1, r4
 80059e4:	eb12 0801 	adds.w	r8, r2, r1
 80059e8:	4629      	mov	r1, r5
 80059ea:	eb43 0901 	adc.w	r9, r3, r1
 80059ee:	f04f 0200 	mov.w	r2, #0
 80059f2:	f04f 0300 	mov.w	r3, #0
 80059f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a02:	4690      	mov	r8, r2
 8005a04:	4699      	mov	r9, r3
 8005a06:	4623      	mov	r3, r4
 8005a08:	eb18 0303 	adds.w	r3, r8, r3
 8005a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a10:	462b      	mov	r3, r5
 8005a12:	eb49 0303 	adc.w	r3, r9, r3
 8005a16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a2e:	460b      	mov	r3, r1
 8005a30:	18db      	adds	r3, r3, r3
 8005a32:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a34:	4613      	mov	r3, r2
 8005a36:	eb42 0303 	adc.w	r3, r2, r3
 8005a3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a44:	f7fa fc14 	bl	8000270 <__aeabi_uldivmod>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4b61      	ldr	r3, [pc, #388]	@ (8005bd4 <UART_SetConfig+0x2d4>)
 8005a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	011c      	lsls	r4, r3, #4
 8005a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a68:	4642      	mov	r2, r8
 8005a6a:	464b      	mov	r3, r9
 8005a6c:	1891      	adds	r1, r2, r2
 8005a6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a70:	415b      	adcs	r3, r3
 8005a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a78:	4641      	mov	r1, r8
 8005a7a:	eb12 0a01 	adds.w	sl, r2, r1
 8005a7e:	4649      	mov	r1, r9
 8005a80:	eb43 0b01 	adc.w	fp, r3, r1
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a98:	4692      	mov	sl, r2
 8005a9a:	469b      	mov	fp, r3
 8005a9c:	4643      	mov	r3, r8
 8005a9e:	eb1a 0303 	adds.w	r3, sl, r3
 8005aa2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	eb4b 0303 	adc.w	r3, fp, r3
 8005aac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005abc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ac0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	18db      	adds	r3, r3, r3
 8005ac8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aca:	4613      	mov	r3, r2
 8005acc:	eb42 0303 	adc.w	r3, r2, r3
 8005ad0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ad2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005ad6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005ada:	f7fa fbc9 	bl	8000270 <__aeabi_uldivmod>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8005bd4 <UART_SetConfig+0x2d4>)
 8005ae6:	fba3 2301 	umull	r2, r3, r3, r1
 8005aea:	095b      	lsrs	r3, r3, #5
 8005aec:	2264      	movs	r2, #100	@ 0x64
 8005aee:	fb02 f303 	mul.w	r3, r2, r3
 8005af2:	1acb      	subs	r3, r1, r3
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005afa:	4b36      	ldr	r3, [pc, #216]	@ (8005bd4 <UART_SetConfig+0x2d4>)
 8005afc:	fba3 2302 	umull	r2, r3, r3, r2
 8005b00:	095b      	lsrs	r3, r3, #5
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b08:	441c      	add	r4, r3
 8005b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b14:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b1c:	4642      	mov	r2, r8
 8005b1e:	464b      	mov	r3, r9
 8005b20:	1891      	adds	r1, r2, r2
 8005b22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b24:	415b      	adcs	r3, r3
 8005b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b2c:	4641      	mov	r1, r8
 8005b2e:	1851      	adds	r1, r2, r1
 8005b30:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b32:	4649      	mov	r1, r9
 8005b34:	414b      	adcs	r3, r1
 8005b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	f04f 0300 	mov.w	r3, #0
 8005b40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b44:	4659      	mov	r1, fp
 8005b46:	00cb      	lsls	r3, r1, #3
 8005b48:	4651      	mov	r1, sl
 8005b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b4e:	4651      	mov	r1, sl
 8005b50:	00ca      	lsls	r2, r1, #3
 8005b52:	4610      	mov	r0, r2
 8005b54:	4619      	mov	r1, r3
 8005b56:	4603      	mov	r3, r0
 8005b58:	4642      	mov	r2, r8
 8005b5a:	189b      	adds	r3, r3, r2
 8005b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b60:	464b      	mov	r3, r9
 8005b62:	460a      	mov	r2, r1
 8005b64:	eb42 0303 	adc.w	r3, r2, r3
 8005b68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b78:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b80:	460b      	mov	r3, r1
 8005b82:	18db      	adds	r3, r3, r3
 8005b84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b86:	4613      	mov	r3, r2
 8005b88:	eb42 0303 	adc.w	r3, r2, r3
 8005b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b96:	f7fa fb6b 	bl	8000270 <__aeabi_uldivmod>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd4 <UART_SetConfig+0x2d4>)
 8005ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ba4:	095b      	lsrs	r3, r3, #5
 8005ba6:	2164      	movs	r1, #100	@ 0x64
 8005ba8:	fb01 f303 	mul.w	r3, r1, r3
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	3332      	adds	r3, #50	@ 0x32
 8005bb2:	4a08      	ldr	r2, [pc, #32]	@ (8005bd4 <UART_SetConfig+0x2d4>)
 8005bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	f003 0207 	and.w	r2, r3, #7
 8005bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4422      	add	r2, r4
 8005bc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bc8:	e106      	b.n	8005dd8 <UART_SetConfig+0x4d8>
 8005bca:	bf00      	nop
 8005bcc:	40011000 	.word	0x40011000
 8005bd0:	40011400 	.word	0x40011400
 8005bd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005be2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005be6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005bea:	4642      	mov	r2, r8
 8005bec:	464b      	mov	r3, r9
 8005bee:	1891      	adds	r1, r2, r2
 8005bf0:	6239      	str	r1, [r7, #32]
 8005bf2:	415b      	adcs	r3, r3
 8005bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bfa:	4641      	mov	r1, r8
 8005bfc:	1854      	adds	r4, r2, r1
 8005bfe:	4649      	mov	r1, r9
 8005c00:	eb43 0501 	adc.w	r5, r3, r1
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	00eb      	lsls	r3, r5, #3
 8005c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c12:	00e2      	lsls	r2, r4, #3
 8005c14:	4614      	mov	r4, r2
 8005c16:	461d      	mov	r5, r3
 8005c18:	4643      	mov	r3, r8
 8005c1a:	18e3      	adds	r3, r4, r3
 8005c1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c20:	464b      	mov	r3, r9
 8005c22:	eb45 0303 	adc.w	r3, r5, r3
 8005c26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c46:	4629      	mov	r1, r5
 8005c48:	008b      	lsls	r3, r1, #2
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c50:	4621      	mov	r1, r4
 8005c52:	008a      	lsls	r2, r1, #2
 8005c54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c58:	f7fa fb0a 	bl	8000270 <__aeabi_uldivmod>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4b60      	ldr	r3, [pc, #384]	@ (8005de4 <UART_SetConfig+0x4e4>)
 8005c62:	fba3 2302 	umull	r2, r3, r3, r2
 8005c66:	095b      	lsrs	r3, r3, #5
 8005c68:	011c      	lsls	r4, r3, #4
 8005c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c7c:	4642      	mov	r2, r8
 8005c7e:	464b      	mov	r3, r9
 8005c80:	1891      	adds	r1, r2, r2
 8005c82:	61b9      	str	r1, [r7, #24]
 8005c84:	415b      	adcs	r3, r3
 8005c86:	61fb      	str	r3, [r7, #28]
 8005c88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c8c:	4641      	mov	r1, r8
 8005c8e:	1851      	adds	r1, r2, r1
 8005c90:	6139      	str	r1, [r7, #16]
 8005c92:	4649      	mov	r1, r9
 8005c94:	414b      	adcs	r3, r1
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ca4:	4659      	mov	r1, fp
 8005ca6:	00cb      	lsls	r3, r1, #3
 8005ca8:	4651      	mov	r1, sl
 8005caa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cae:	4651      	mov	r1, sl
 8005cb0:	00ca      	lsls	r2, r1, #3
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	4642      	mov	r2, r8
 8005cba:	189b      	adds	r3, r3, r2
 8005cbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005cc0:	464b      	mov	r3, r9
 8005cc2:	460a      	mov	r2, r1
 8005cc4:	eb42 0303 	adc.w	r3, r2, r3
 8005cc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cd6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	f04f 0300 	mov.w	r3, #0
 8005ce0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ce4:	4649      	mov	r1, r9
 8005ce6:	008b      	lsls	r3, r1, #2
 8005ce8:	4641      	mov	r1, r8
 8005cea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cee:	4641      	mov	r1, r8
 8005cf0:	008a      	lsls	r2, r1, #2
 8005cf2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005cf6:	f7fa fabb 	bl	8000270 <__aeabi_uldivmod>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4b38      	ldr	r3, [pc, #224]	@ (8005de4 <UART_SetConfig+0x4e4>)
 8005d02:	fba3 2301 	umull	r2, r3, r3, r1
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	2264      	movs	r2, #100	@ 0x64
 8005d0a:	fb02 f303 	mul.w	r3, r2, r3
 8005d0e:	1acb      	subs	r3, r1, r3
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	3332      	adds	r3, #50	@ 0x32
 8005d14:	4a33      	ldr	r2, [pc, #204]	@ (8005de4 <UART_SetConfig+0x4e4>)
 8005d16:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1a:	095b      	lsrs	r3, r3, #5
 8005d1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d20:	441c      	add	r4, r3
 8005d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d26:	2200      	movs	r2, #0
 8005d28:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d30:	4642      	mov	r2, r8
 8005d32:	464b      	mov	r3, r9
 8005d34:	1891      	adds	r1, r2, r2
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	415b      	adcs	r3, r3
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d40:	4641      	mov	r1, r8
 8005d42:	1851      	adds	r1, r2, r1
 8005d44:	6039      	str	r1, [r7, #0]
 8005d46:	4649      	mov	r1, r9
 8005d48:	414b      	adcs	r3, r1
 8005d4a:	607b      	str	r3, [r7, #4]
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	f04f 0300 	mov.w	r3, #0
 8005d54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d58:	4659      	mov	r1, fp
 8005d5a:	00cb      	lsls	r3, r1, #3
 8005d5c:	4651      	mov	r1, sl
 8005d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d62:	4651      	mov	r1, sl
 8005d64:	00ca      	lsls	r2, r1, #3
 8005d66:	4610      	mov	r0, r2
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	4642      	mov	r2, r8
 8005d6e:	189b      	adds	r3, r3, r2
 8005d70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d72:	464b      	mov	r3, r9
 8005d74:	460a      	mov	r2, r1
 8005d76:	eb42 0303 	adc.w	r3, r2, r3
 8005d7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d86:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	f04f 0300 	mov.w	r3, #0
 8005d90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d94:	4649      	mov	r1, r9
 8005d96:	008b      	lsls	r3, r1, #2
 8005d98:	4641      	mov	r1, r8
 8005d9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d9e:	4641      	mov	r1, r8
 8005da0:	008a      	lsls	r2, r1, #2
 8005da2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005da6:	f7fa fa63 	bl	8000270 <__aeabi_uldivmod>
 8005daa:	4602      	mov	r2, r0
 8005dac:	460b      	mov	r3, r1
 8005dae:	4b0d      	ldr	r3, [pc, #52]	@ (8005de4 <UART_SetConfig+0x4e4>)
 8005db0:	fba3 1302 	umull	r1, r3, r3, r2
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	2164      	movs	r1, #100	@ 0x64
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	3332      	adds	r3, #50	@ 0x32
 8005dc2:	4a08      	ldr	r2, [pc, #32]	@ (8005de4 <UART_SetConfig+0x4e4>)
 8005dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc8:	095b      	lsrs	r3, r3, #5
 8005dca:	f003 020f 	and.w	r2, r3, #15
 8005dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4422      	add	r2, r4
 8005dd6:	609a      	str	r2, [r3, #8]
}
 8005dd8:	bf00      	nop
 8005dda:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005dde:	46bd      	mov	sp, r7
 8005de0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005de4:	51eb851f 	.word	0x51eb851f

08005de8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005de8:	b084      	sub	sp, #16
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	f107 001c 	add.w	r0, r7, #28
 8005df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dfa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d123      	bne.n	8005e4a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e06:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005e16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d105      	bne.n	8005e3e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f001 fae8 	bl	8007414 <USB_CoreReset>
 8005e44:	4603      	mov	r3, r0
 8005e46:	73fb      	strb	r3, [r7, #15]
 8005e48:	e01b      	b.n	8005e82 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f001 fadc 	bl	8007414 <USB_CoreReset>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e60:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d106      	bne.n	8005e76 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e6c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e74:	e005      	b.n	8005e82 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e82:	7fbb      	ldrb	r3, [r7, #30]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d10b      	bne.n	8005ea0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f043 0206 	orr.w	r2, r3, #6
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f043 0220 	orr.w	r2, r3, #32
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005eac:	b004      	add	sp, #16
 8005eae:	4770      	bx	lr

08005eb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d165      	bne.n	8005f90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	4a41      	ldr	r2, [pc, #260]	@ (8005fcc <USB_SetTurnaroundTime+0x11c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d906      	bls.n	8005eda <USB_SetTurnaroundTime+0x2a>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4a40      	ldr	r2, [pc, #256]	@ (8005fd0 <USB_SetTurnaroundTime+0x120>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d202      	bcs.n	8005eda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005ed4:	230f      	movs	r3, #15
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	e062      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	4a3c      	ldr	r2, [pc, #240]	@ (8005fd0 <USB_SetTurnaroundTime+0x120>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d306      	bcc.n	8005ef0 <USB_SetTurnaroundTime+0x40>
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	4a3b      	ldr	r2, [pc, #236]	@ (8005fd4 <USB_SetTurnaroundTime+0x124>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d202      	bcs.n	8005ef0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005eea:	230e      	movs	r3, #14
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	e057      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4a38      	ldr	r2, [pc, #224]	@ (8005fd4 <USB_SetTurnaroundTime+0x124>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d306      	bcc.n	8005f06 <USB_SetTurnaroundTime+0x56>
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4a37      	ldr	r2, [pc, #220]	@ (8005fd8 <USB_SetTurnaroundTime+0x128>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d202      	bcs.n	8005f06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005f00:	230d      	movs	r3, #13
 8005f02:	617b      	str	r3, [r7, #20]
 8005f04:	e04c      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	4a33      	ldr	r2, [pc, #204]	@ (8005fd8 <USB_SetTurnaroundTime+0x128>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d306      	bcc.n	8005f1c <USB_SetTurnaroundTime+0x6c>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4a32      	ldr	r2, [pc, #200]	@ (8005fdc <USB_SetTurnaroundTime+0x12c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d802      	bhi.n	8005f1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005f16:	230c      	movs	r3, #12
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	e041      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8005fdc <USB_SetTurnaroundTime+0x12c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d906      	bls.n	8005f32 <USB_SetTurnaroundTime+0x82>
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4a2e      	ldr	r2, [pc, #184]	@ (8005fe0 <USB_SetTurnaroundTime+0x130>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d802      	bhi.n	8005f32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005f2c:	230b      	movs	r3, #11
 8005f2e:	617b      	str	r3, [r7, #20]
 8005f30:	e036      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	4a2a      	ldr	r2, [pc, #168]	@ (8005fe0 <USB_SetTurnaroundTime+0x130>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d906      	bls.n	8005f48 <USB_SetTurnaroundTime+0x98>
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	4a29      	ldr	r2, [pc, #164]	@ (8005fe4 <USB_SetTurnaroundTime+0x134>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d802      	bhi.n	8005f48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005f42:	230a      	movs	r3, #10
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	e02b      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	4a26      	ldr	r2, [pc, #152]	@ (8005fe4 <USB_SetTurnaroundTime+0x134>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d906      	bls.n	8005f5e <USB_SetTurnaroundTime+0xae>
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	4a25      	ldr	r2, [pc, #148]	@ (8005fe8 <USB_SetTurnaroundTime+0x138>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d202      	bcs.n	8005f5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005f58:	2309      	movs	r3, #9
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	e020      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	4a21      	ldr	r2, [pc, #132]	@ (8005fe8 <USB_SetTurnaroundTime+0x138>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d306      	bcc.n	8005f74 <USB_SetTurnaroundTime+0xc4>
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	4a20      	ldr	r2, [pc, #128]	@ (8005fec <USB_SetTurnaroundTime+0x13c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d802      	bhi.n	8005f74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f6e:	2308      	movs	r3, #8
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	e015      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4a1d      	ldr	r2, [pc, #116]	@ (8005fec <USB_SetTurnaroundTime+0x13c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d906      	bls.n	8005f8a <USB_SetTurnaroundTime+0xda>
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ff0 <USB_SetTurnaroundTime+0x140>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d202      	bcs.n	8005f8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f84:	2307      	movs	r3, #7
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	e00a      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f8a:	2306      	movs	r3, #6
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	e007      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f90:	79fb      	ldrb	r3, [r7, #7]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d102      	bne.n	8005f9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f96:	2309      	movs	r3, #9
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	e001      	b.n	8005fa0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f9c:	2309      	movs	r3, #9
 8005f9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	029b      	lsls	r3, r3, #10
 8005fb4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	371c      	adds	r7, #28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	00d8acbf 	.word	0x00d8acbf
 8005fd0:	00e4e1c0 	.word	0x00e4e1c0
 8005fd4:	00f42400 	.word	0x00f42400
 8005fd8:	01067380 	.word	0x01067380
 8005fdc:	011a499f 	.word	0x011a499f
 8005fe0:	01312cff 	.word	0x01312cff
 8005fe4:	014ca43f 	.word	0x014ca43f
 8005fe8:	016e3600 	.word	0x016e3600
 8005fec:	01a6ab1f 	.word	0x01a6ab1f
 8005ff0:	01e84800 	.word	0x01e84800

08005ff4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f043 0201 	orr.w	r2, r3, #1
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f023 0201 	bic.w	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d115      	bne.n	8006086 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006066:	200a      	movs	r0, #10
 8006068:	f7fb f9ce 	bl	8001408 <HAL_Delay>
      ms += 10U;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	330a      	adds	r3, #10
 8006070:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f001 f93f 	bl	80072f6 <USB_GetMode>
 8006078:	4603      	mov	r3, r0
 800607a:	2b01      	cmp	r3, #1
 800607c:	d01e      	beq.n	80060bc <USB_SetCurrentMode+0x84>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2bc7      	cmp	r3, #199	@ 0xc7
 8006082:	d9f0      	bls.n	8006066 <USB_SetCurrentMode+0x2e>
 8006084:	e01a      	b.n	80060bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006086:	78fb      	ldrb	r3, [r7, #3]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d115      	bne.n	80060b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006098:	200a      	movs	r0, #10
 800609a:	f7fb f9b5 	bl	8001408 <HAL_Delay>
      ms += 10U;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	330a      	adds	r3, #10
 80060a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f001 f926 	bl	80072f6 <USB_GetMode>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <USB_SetCurrentMode+0x84>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80060b4:	d9f0      	bls.n	8006098 <USB_SetCurrentMode+0x60>
 80060b6:	e001      	b.n	80060bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e005      	b.n	80060c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2bc8      	cmp	r3, #200	@ 0xc8
 80060c0:	d101      	bne.n	80060c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060d0:	b084      	sub	sp, #16
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b086      	sub	sp, #24
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80060de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80060ea:	2300      	movs	r3, #0
 80060ec:	613b      	str	r3, [r7, #16]
 80060ee:	e009      	b.n	8006104 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	3340      	adds	r3, #64	@ 0x40
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	2200      	movs	r2, #0
 80060fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	3301      	adds	r3, #1
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	2b0e      	cmp	r3, #14
 8006108:	d9f2      	bls.n	80060f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800610a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800610e:	2b00      	cmp	r3, #0
 8006110:	d11c      	bne.n	800614c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006120:	f043 0302 	orr.w	r3, r3, #2
 8006124:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006136:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006142:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	639a      	str	r2, [r3, #56]	@ 0x38
 800614a:	e00b      	b.n	8006164 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006150:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800616a:	461a      	mov	r2, r3
 800616c:	2300      	movs	r3, #0
 800616e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006170:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006174:	2b01      	cmp	r3, #1
 8006176:	d10d      	bne.n	8006194 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006178:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800617c:	2b00      	cmp	r3, #0
 800617e:	d104      	bne.n	800618a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006180:	2100      	movs	r1, #0
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f968 	bl	8006458 <USB_SetDevSpeed>
 8006188:	e008      	b.n	800619c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800618a:	2101      	movs	r1, #1
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f963 	bl	8006458 <USB_SetDevSpeed>
 8006192:	e003      	b.n	800619c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006194:	2103      	movs	r1, #3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f95e 	bl	8006458 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800619c:	2110      	movs	r1, #16
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f8fa 	bl	8006398 <USB_FlushTxFifo>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f924 	bl	80063fc <USB_FlushRxFifo>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061c4:	461a      	mov	r2, r3
 80061c6:	2300      	movs	r3, #0
 80061c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061d0:	461a      	mov	r2, r3
 80061d2:	2300      	movs	r3, #0
 80061d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061dc:	461a      	mov	r2, r3
 80061de:	2300      	movs	r3, #0
 80061e0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061e2:	2300      	movs	r3, #0
 80061e4:	613b      	str	r3, [r7, #16]
 80061e6:	e043      	b.n	8006270 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061fe:	d118      	bne.n	8006232 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10a      	bne.n	800621c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006212:	461a      	mov	r2, r3
 8006214:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	e013      	b.n	8006244 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006228:	461a      	mov	r2, r3
 800622a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	e008      	b.n	8006244 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800623e:	461a      	mov	r2, r3
 8006240:	2300      	movs	r3, #0
 8006242:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006250:	461a      	mov	r2, r3
 8006252:	2300      	movs	r3, #0
 8006254:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006262:	461a      	mov	r2, r3
 8006264:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006268:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	3301      	adds	r3, #1
 800626e:	613b      	str	r3, [r7, #16]
 8006270:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006274:	461a      	mov	r2, r3
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	4293      	cmp	r3, r2
 800627a:	d3b5      	bcc.n	80061e8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800627c:	2300      	movs	r3, #0
 800627e:	613b      	str	r3, [r7, #16]
 8006280:	e043      	b.n	800630a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006294:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006298:	d118      	bne.n	80062cc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ac:	461a      	mov	r2, r3
 80062ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062b2:	6013      	str	r3, [r2, #0]
 80062b4:	e013      	b.n	80062de <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062c2:	461a      	mov	r2, r3
 80062c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80062c8:	6013      	str	r3, [r2, #0]
 80062ca:	e008      	b.n	80062de <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062d8:	461a      	mov	r2, r3
 80062da:	2300      	movs	r3, #0
 80062dc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ea:	461a      	mov	r2, r3
 80062ec:	2300      	movs	r3, #0
 80062ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062fc:	461a      	mov	r2, r3
 80062fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006302:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	3301      	adds	r3, #1
 8006308:	613b      	str	r3, [r7, #16]
 800630a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800630e:	461a      	mov	r2, r3
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	4293      	cmp	r3, r2
 8006314:	d3b5      	bcc.n	8006282 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006328:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006336:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006338:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800633c:	2b00      	cmp	r3, #0
 800633e:	d105      	bne.n	800634c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	f043 0210 	orr.w	r2, r3, #16
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699a      	ldr	r2, [r3, #24]
 8006350:	4b10      	ldr	r3, [pc, #64]	@ (8006394 <USB_DevInit+0x2c4>)
 8006352:	4313      	orrs	r3, r2
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006358:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800635c:	2b00      	cmp	r3, #0
 800635e:	d005      	beq.n	800636c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	f043 0208 	orr.w	r2, r3, #8
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800636c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006370:	2b01      	cmp	r3, #1
 8006372:	d107      	bne.n	8006384 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800637c:	f043 0304 	orr.w	r3, r3, #4
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006384:	7dfb      	ldrb	r3, [r7, #23]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006390:	b004      	add	sp, #16
 8006392:	4770      	bx	lr
 8006394:	803c3800 	.word	0x803c3800

08006398 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	3301      	adds	r3, #1
 80063aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063b2:	d901      	bls.n	80063b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e01b      	b.n	80063f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	daf2      	bge.n	80063a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	019b      	lsls	r3, r3, #6
 80063c8:	f043 0220 	orr.w	r2, r3, #32
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	3301      	adds	r3, #1
 80063d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063dc:	d901      	bls.n	80063e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e006      	b.n	80063f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b20      	cmp	r3, #32
 80063ec:	d0f0      	beq.n	80063d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	3301      	adds	r3, #1
 800640c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006414:	d901      	bls.n	800641a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e018      	b.n	800644c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	daf2      	bge.n	8006408 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2210      	movs	r2, #16
 800642a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	3301      	adds	r3, #1
 8006430:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006438:	d901      	bls.n	800643e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e006      	b.n	800644c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	f003 0310 	and.w	r3, r3, #16
 8006446:	2b10      	cmp	r3, #16
 8006448:	d0f0      	beq.n	800642c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	78fb      	ldrb	r3, [r7, #3]
 8006472:	68f9      	ldr	r1, [r7, #12]
 8006474:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006478:	4313      	orrs	r3, r2
 800647a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800648a:	b480      	push	{r7}
 800648c:	b087      	sub	sp, #28
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 0306 	and.w	r3, r3, #6
 80064a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d102      	bne.n	80064b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80064aa:	2300      	movs	r3, #0
 80064ac:	75fb      	strb	r3, [r7, #23]
 80064ae:	e00a      	b.n	80064c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d002      	beq.n	80064bc <USB_GetDevSpeed+0x32>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2b06      	cmp	r3, #6
 80064ba:	d102      	bne.n	80064c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80064bc:	2302      	movs	r3, #2
 80064be:	75fb      	strb	r3, [r7, #23]
 80064c0:	e001      	b.n	80064c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80064c2:	230f      	movs	r3, #15
 80064c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80064c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	371c      	adds	r7, #28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	785b      	ldrb	r3, [r3, #1]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d13a      	bne.n	8006566 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064f6:	69da      	ldr	r2, [r3, #28]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	f003 030f 	and.w	r3, r3, #15
 8006500:	2101      	movs	r1, #1
 8006502:	fa01 f303 	lsl.w	r3, r1, r3
 8006506:	b29b      	uxth	r3, r3
 8006508:	68f9      	ldr	r1, [r7, #12]
 800650a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800650e:	4313      	orrs	r3, r2
 8006510:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d155      	bne.n	80065d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	791b      	ldrb	r3, [r3, #4]
 8006542:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006544:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	059b      	lsls	r3, r3, #22
 800654a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800654c:	4313      	orrs	r3, r2
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	440a      	add	r2, r1
 8006556:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800655a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800655e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006562:	6013      	str	r3, [r2, #0]
 8006564:	e036      	b.n	80065d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800656c:	69da      	ldr	r2, [r3, #28]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	2101      	movs	r1, #1
 8006578:	fa01 f303 	lsl.w	r3, r1, r3
 800657c:	041b      	lsls	r3, r3, #16
 800657e:	68f9      	ldr	r1, [r7, #12]
 8006580:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006584:	4313      	orrs	r3, r2
 8006586:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d11a      	bne.n	80065d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	791b      	ldrb	r3, [r3, #4]
 80065b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80065ba:	430b      	orrs	r3, r1
 80065bc:	4313      	orrs	r3, r2
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	0151      	lsls	r1, r2, #5
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	440a      	add	r2, r1
 80065c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
	...

080065e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	785b      	ldrb	r3, [r3, #1]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d161      	bne.n	80066c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006612:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006616:	d11f      	bne.n	8006658 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	0151      	lsls	r1, r2, #5
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	440a      	add	r2, r1
 800662e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006632:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006636:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	0151      	lsls	r1, r2, #5
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	440a      	add	r2, r1
 800664e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006652:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006656:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800665e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	2101      	movs	r1, #1
 800666a:	fa01 f303 	lsl.w	r3, r1, r3
 800666e:	b29b      	uxth	r3, r3
 8006670:	43db      	mvns	r3, r3
 8006672:	68f9      	ldr	r1, [r7, #12]
 8006674:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006678:	4013      	ands	r3, r2
 800667a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006682:	69da      	ldr	r2, [r3, #28]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	f003 030f 	and.w	r3, r3, #15
 800668c:	2101      	movs	r1, #1
 800668e:	fa01 f303 	lsl.w	r3, r1, r3
 8006692:	b29b      	uxth	r3, r3
 8006694:	43db      	mvns	r3, r3
 8006696:	68f9      	ldr	r1, [r7, #12]
 8006698:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800669c:	4013      	ands	r3, r2
 800669e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	0159      	lsls	r1, r3, #5
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	440b      	add	r3, r1
 80066b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ba:	4619      	mov	r1, r3
 80066bc:	4b35      	ldr	r3, [pc, #212]	@ (8006794 <USB_DeactivateEndpoint+0x1b0>)
 80066be:	4013      	ands	r3, r2
 80066c0:	600b      	str	r3, [r1, #0]
 80066c2:	e060      	b.n	8006786 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066da:	d11f      	bne.n	800671c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	0151      	lsls	r1, r2, #5
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	440a      	add	r2, r1
 80066f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	0151      	lsls	r1, r2, #5
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	440a      	add	r2, r1
 8006712:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006716:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800671a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006722:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	f003 030f 	and.w	r3, r3, #15
 800672c:	2101      	movs	r1, #1
 800672e:	fa01 f303 	lsl.w	r3, r1, r3
 8006732:	041b      	lsls	r3, r3, #16
 8006734:	43db      	mvns	r3, r3
 8006736:	68f9      	ldr	r1, [r7, #12]
 8006738:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800673c:	4013      	ands	r3, r2
 800673e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006746:	69da      	ldr	r2, [r3, #28]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	f003 030f 	and.w	r3, r3, #15
 8006750:	2101      	movs	r1, #1
 8006752:	fa01 f303 	lsl.w	r3, r1, r3
 8006756:	041b      	lsls	r3, r3, #16
 8006758:	43db      	mvns	r3, r3
 800675a:	68f9      	ldr	r1, [r7, #12]
 800675c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006760:	4013      	ands	r3, r2
 8006762:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	0159      	lsls	r1, r3, #5
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	440b      	add	r3, r1
 800677a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800677e:	4619      	mov	r1, r3
 8006780:	4b05      	ldr	r3, [pc, #20]	@ (8006798 <USB_DeactivateEndpoint+0x1b4>)
 8006782:	4013      	ands	r3, r2
 8006784:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	ec337800 	.word	0xec337800
 8006798:	eff37800 	.word	0xeff37800

0800679c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b08a      	sub	sp, #40	@ 0x28
 80067a0:	af02      	add	r7, sp, #8
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	4613      	mov	r3, r2
 80067a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	785b      	ldrb	r3, [r3, #1]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	f040 817f 	bne.w	8006abc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d132      	bne.n	800682c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	0151      	lsls	r1, r2, #5
 80067d8:	69fa      	ldr	r2, [r7, #28]
 80067da:	440a      	add	r2, r1
 80067dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067e0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80067e4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80067e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	69fa      	ldr	r2, [r7, #28]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006804:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006808:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	0151      	lsls	r1, r2, #5
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	440a      	add	r2, r1
 8006820:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006824:	0cdb      	lsrs	r3, r3, #19
 8006826:	04db      	lsls	r3, r3, #19
 8006828:	6113      	str	r3, [r2, #16]
 800682a:	e097      	b.n	800695c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	0151      	lsls	r1, r2, #5
 800683e:	69fa      	ldr	r2, [r7, #28]
 8006840:	440a      	add	r2, r1
 8006842:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006846:	0cdb      	lsrs	r3, r3, #19
 8006848:	04db      	lsls	r3, r3, #19
 800684a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	0151      	lsls	r1, r2, #5
 800685e:	69fa      	ldr	r2, [r7, #28]
 8006860:	440a      	add	r2, r1
 8006862:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006866:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800686a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800686e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d11a      	bne.n	80068ac <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	691a      	ldr	r2, [r3, #16]
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	429a      	cmp	r2, r3
 8006880:	d903      	bls.n	800688a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	0151      	lsls	r1, r2, #5
 800689c:	69fa      	ldr	r2, [r7, #28]
 800689e:	440a      	add	r2, r1
 80068a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068a8:	6113      	str	r3, [r2, #16]
 80068aa:	e044      	b.n	8006936 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	691a      	ldr	r2, [r3, #16]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	4413      	add	r3, r2
 80068b6:	1e5a      	subs	r2, r3, #1
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ce:	691a      	ldr	r2, [r3, #16]
 80068d0:	8afb      	ldrh	r3, [r7, #22]
 80068d2:	04d9      	lsls	r1, r3, #19
 80068d4:	4ba4      	ldr	r3, [pc, #656]	@ (8006b68 <USB_EPStartXfer+0x3cc>)
 80068d6:	400b      	ands	r3, r1
 80068d8:	69b9      	ldr	r1, [r7, #24]
 80068da:	0148      	lsls	r0, r1, #5
 80068dc:	69f9      	ldr	r1, [r7, #28]
 80068de:	4401      	add	r1, r0
 80068e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80068e4:	4313      	orrs	r3, r2
 80068e6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	791b      	ldrb	r3, [r3, #4]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d122      	bne.n	8006936 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	0151      	lsls	r1, r2, #5
 8006902:	69fa      	ldr	r2, [r7, #28]
 8006904:	440a      	add	r2, r1
 8006906:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800690a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800690e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800691c:	691a      	ldr	r2, [r3, #16]
 800691e:	8afb      	ldrh	r3, [r7, #22]
 8006920:	075b      	lsls	r3, r3, #29
 8006922:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006926:	69b9      	ldr	r1, [r7, #24]
 8006928:	0148      	lsls	r0, r1, #5
 800692a:	69f9      	ldr	r1, [r7, #28]
 800692c:	4401      	add	r1, r0
 800692e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006932:	4313      	orrs	r3, r2
 8006934:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800694c:	69b9      	ldr	r1, [r7, #24]
 800694e:	0148      	lsls	r0, r1, #5
 8006950:	69f9      	ldr	r1, [r7, #28]
 8006952:	4401      	add	r1, r0
 8006954:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006958:	4313      	orrs	r3, r2
 800695a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800695c:	79fb      	ldrb	r3, [r7, #7]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d14b      	bne.n	80069fa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d009      	beq.n	800697e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	4413      	add	r3, r2
 8006972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006976:	461a      	mov	r2, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	791b      	ldrb	r3, [r3, #4]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d128      	bne.n	80069d8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006992:	2b00      	cmp	r3, #0
 8006994:	d110      	bne.n	80069b8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	0151      	lsls	r1, r2, #5
 80069a8:	69fa      	ldr	r2, [r7, #28]
 80069aa:	440a      	add	r2, r1
 80069ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80069b4:	6013      	str	r3, [r2, #0]
 80069b6:	e00f      	b.n	80069d8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	0151      	lsls	r1, r2, #5
 80069ca:	69fa      	ldr	r2, [r7, #28]
 80069cc:	440a      	add	r2, r1
 80069ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069d6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	0151      	lsls	r1, r2, #5
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	440a      	add	r2, r1
 80069ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	e166      	b.n	8006cc8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	0151      	lsls	r1, r2, #5
 8006a0c:	69fa      	ldr	r2, [r7, #28]
 8006a0e:	440a      	add	r2, r1
 8006a10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a14:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006a18:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	791b      	ldrb	r3, [r3, #4]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d015      	beq.n	8006a4e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 814e 	beq.w	8006cc8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	f003 030f 	and.w	r3, r3, #15
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a42:	69f9      	ldr	r1, [r7, #28]
 8006a44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	634b      	str	r3, [r1, #52]	@ 0x34
 8006a4c:	e13c      	b.n	8006cc8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d110      	bne.n	8006a80 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	0151      	lsls	r1, r2, #5
 8006a70:	69fa      	ldr	r2, [r7, #28]
 8006a72:	440a      	add	r2, r1
 8006a74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	e00f      	b.n	8006aa0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	0151      	lsls	r1, r2, #5
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	440a      	add	r2, r1
 8006a96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a9e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	68d9      	ldr	r1, [r3, #12]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	781a      	ldrb	r2, [r3, #0]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	b298      	uxth	r0, r3
 8006aae:	79fb      	ldrb	r3, [r7, #7]
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 f9b9 	bl	8006e2c <USB_WritePacket>
 8006aba:	e105      	b.n	8006cc8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	0151      	lsls	r1, r2, #5
 8006ace:	69fa      	ldr	r2, [r7, #28]
 8006ad0:	440a      	add	r2, r1
 8006ad2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ad6:	0cdb      	lsrs	r3, r3, #19
 8006ad8:	04db      	lsls	r3, r3, #19
 8006ada:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	0151      	lsls	r1, r2, #5
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	440a      	add	r2, r1
 8006af2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006af6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006afa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006afe:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d132      	bne.n	8006b6c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	689a      	ldr	r2, [r3, #8]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	689a      	ldr	r2, [r3, #8]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b2a:	691a      	ldr	r2, [r3, #16]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b34:	69b9      	ldr	r1, [r7, #24]
 8006b36:	0148      	lsls	r0, r1, #5
 8006b38:	69f9      	ldr	r1, [r7, #28]
 8006b3a:	4401      	add	r1, r0
 8006b3c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b40:	4313      	orrs	r3, r2
 8006b42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	0151      	lsls	r1, r2, #5
 8006b56:	69fa      	ldr	r2, [r7, #28]
 8006b58:	440a      	add	r2, r1
 8006b5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b62:	6113      	str	r3, [r2, #16]
 8006b64:	e062      	b.n	8006c2c <USB_EPStartXfer+0x490>
 8006b66:	bf00      	nop
 8006b68:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d123      	bne.n	8006bbc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b80:	691a      	ldr	r2, [r3, #16]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b8a:	69b9      	ldr	r1, [r7, #24]
 8006b8c:	0148      	lsls	r0, r1, #5
 8006b8e:	69f9      	ldr	r1, [r7, #28]
 8006b90:	4401      	add	r1, r0
 8006b92:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b96:	4313      	orrs	r3, r2
 8006b98:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	0151      	lsls	r1, r2, #5
 8006bac:	69fa      	ldr	r2, [r7, #28]
 8006bae:	440a      	add	r2, r1
 8006bb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006bb8:	6113      	str	r3, [r2, #16]
 8006bba:	e037      	b.n	8006c2c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	691a      	ldr	r2, [r3, #16]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	1e5a      	subs	r2, r3, #1
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	8afa      	ldrh	r2, [r7, #22]
 8006bd8:	fb03 f202 	mul.w	r2, r3, r2
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bec:	691a      	ldr	r2, [r3, #16]
 8006bee:	8afb      	ldrh	r3, [r7, #22]
 8006bf0:	04d9      	lsls	r1, r3, #19
 8006bf2:	4b38      	ldr	r3, [pc, #224]	@ (8006cd4 <USB_EPStartXfer+0x538>)
 8006bf4:	400b      	ands	r3, r1
 8006bf6:	69b9      	ldr	r1, [r7, #24]
 8006bf8:	0148      	lsls	r0, r1, #5
 8006bfa:	69f9      	ldr	r1, [r7, #28]
 8006bfc:	4401      	add	r1, r0
 8006bfe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c02:	4313      	orrs	r3, r2
 8006c04:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c12:	691a      	ldr	r2, [r3, #16]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c1c:	69b9      	ldr	r1, [r7, #24]
 8006c1e:	0148      	lsls	r0, r1, #5
 8006c20:	69f9      	ldr	r1, [r7, #28]
 8006c22:	4401      	add	r1, r0
 8006c24:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d10d      	bne.n	8006c4e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d009      	beq.n	8006c4e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	68d9      	ldr	r1, [r3, #12]
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c4a:	460a      	mov	r2, r1
 8006c4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	791b      	ldrb	r3, [r3, #4]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d128      	bne.n	8006ca8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d110      	bne.n	8006c88 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	0151      	lsls	r1, r2, #5
 8006c78:	69fa      	ldr	r2, [r7, #28]
 8006c7a:	440a      	add	r2, r1
 8006c7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	e00f      	b.n	8006ca8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	0151      	lsls	r1, r2, #5
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ca6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	0151      	lsls	r1, r2, #5
 8006cba:	69fa      	ldr	r2, [r7, #28]
 8006cbc:	440a      	add	r2, r1
 8006cbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cc2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006cc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3720      	adds	r7, #32
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	1ff80000 	.word	0x1ff80000

08006cd8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	785b      	ldrb	r3, [r3, #1]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d14a      	bne.n	8006d8c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d0e:	f040 8086 	bne.w	8006e1e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	7812      	ldrb	r2, [r2, #0]
 8006d26:	0151      	lsls	r1, r2, #5
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	440a      	add	r2, r1
 8006d2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d34:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	7812      	ldrb	r2, [r2, #0]
 8006d4a:	0151      	lsls	r1, r2, #5
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	440a      	add	r2, r1
 8006d50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d902      	bls.n	8006d70 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d6e:	e056      	b.n	8006e1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d88:	d0e7      	beq.n	8006d5a <USB_EPStopXfer+0x82>
 8006d8a:	e048      	b.n	8006e1e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006da0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006da4:	d13b      	bne.n	8006e1e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	7812      	ldrb	r2, [r2, #0]
 8006dba:	0151      	lsls	r1, r2, #5
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	440a      	add	r2, r1
 8006dc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dc4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006dc8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	7812      	ldrb	r2, [r2, #0]
 8006dde:	0151      	lsls	r1, r2, #5
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	440a      	add	r2, r1
 8006de4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006de8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006dec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3301      	adds	r3, #1
 8006df2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d902      	bls.n	8006e04 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	75fb      	strb	r3, [r7, #23]
          break;
 8006e02:	e00c      	b.n	8006e1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e1c:	d0e7      	beq.n	8006dee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	371c      	adds	r7, #28
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b089      	sub	sp, #36	@ 0x24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	4611      	mov	r1, r2
 8006e38:	461a      	mov	r2, r3
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	71fb      	strb	r3, [r7, #7]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006e4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d123      	bne.n	8006e9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e52:	88bb      	ldrh	r3, [r7, #4]
 8006e54:	3303      	adds	r3, #3
 8006e56:	089b      	lsrs	r3, r3, #2
 8006e58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	61bb      	str	r3, [r7, #24]
 8006e5e:	e018      	b.n	8006e92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	031a      	lsls	r2, r3, #12
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	3301      	adds	r3, #1
 8006e78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	3301      	adds	r3, #1
 8006e84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	61bb      	str	r3, [r7, #24]
 8006e92:	69ba      	ldr	r2, [r7, #24]
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d3e2      	bcc.n	8006e60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3724      	adds	r7, #36	@ 0x24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b08b      	sub	sp, #44	@ 0x2c
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006ebe:	88fb      	ldrh	r3, [r7, #6]
 8006ec0:	089b      	lsrs	r3, r3, #2
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006ec6:	88fb      	ldrh	r3, [r7, #6]
 8006ec8:	f003 0303 	and.w	r3, r3, #3
 8006ecc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ece:	2300      	movs	r3, #0
 8006ed0:	623b      	str	r3, [r7, #32]
 8006ed2:	e014      	b.n	8006efe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ede:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee8:	3301      	adds	r3, #1
 8006eea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eee:	3301      	adds	r3, #1
 8006ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	3301      	adds	r3, #1
 8006efc:	623b      	str	r3, [r7, #32]
 8006efe:	6a3a      	ldr	r2, [r7, #32]
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d3e6      	bcc.n	8006ed4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006f06:	8bfb      	ldrh	r3, [r7, #30]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d01e      	beq.n	8006f4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f16:	461a      	mov	r2, r3
 8006f18:	f107 0310 	add.w	r3, r7, #16
 8006f1c:	6812      	ldr	r2, [r2, #0]
 8006f1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	00db      	lsls	r3, r3, #3
 8006f28:	fa22 f303 	lsr.w	r3, r2, r3
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	701a      	strb	r2, [r3, #0]
      i++;
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	3301      	adds	r3, #1
 8006f36:	623b      	str	r3, [r7, #32]
      pDest++;
 8006f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006f3e:	8bfb      	ldrh	r3, [r7, #30]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006f44:	8bfb      	ldrh	r3, [r7, #30]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1ea      	bne.n	8006f20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	372c      	adds	r7, #44	@ 0x2c
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	785b      	ldrb	r3, [r3, #1]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d12c      	bne.n	8006fce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	db12      	blt.n	8006fac <USB_EPSetStall+0x54>
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00f      	beq.n	8006fac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	0151      	lsls	r1, r2, #5
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	440a      	add	r2, r1
 8006fa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fa6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006faa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	0151      	lsls	r1, r2, #5
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	440a      	add	r2, r1
 8006fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006fca:	6013      	str	r3, [r2, #0]
 8006fcc:	e02b      	b.n	8007026 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	db12      	blt.n	8007006 <USB_EPSetStall+0xae>
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00f      	beq.n	8007006 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	0151      	lsls	r1, r2, #5
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	440a      	add	r2, r1
 8006ffc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007000:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007004:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	0151      	lsls	r1, r2, #5
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	440a      	add	r2, r1
 800701c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007020:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007024:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	785b      	ldrb	r3, [r3, #1]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d128      	bne.n	80070a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	0151      	lsls	r1, r2, #5
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	440a      	add	r2, r1
 8007066:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800706a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800706e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	791b      	ldrb	r3, [r3, #4]
 8007074:	2b03      	cmp	r3, #3
 8007076:	d003      	beq.n	8007080 <USB_EPClearStall+0x4c>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	791b      	ldrb	r3, [r3, #4]
 800707c:	2b02      	cmp	r3, #2
 800707e:	d138      	bne.n	80070f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	0151      	lsls	r1, r2, #5
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	440a      	add	r2, r1
 8007096:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800709a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	e027      	b.n	80070f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	0151      	lsls	r1, r2, #5
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	440a      	add	r2, r1
 80070b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80070c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	791b      	ldrb	r3, [r3, #4]
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d003      	beq.n	80070d2 <USB_EPClearStall+0x9e>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	791b      	ldrb	r3, [r3, #4]
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d10f      	bne.n	80070f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	0151      	lsls	r1, r2, #5
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	440a      	add	r2, r1
 80070e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800711e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007122:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	78fb      	ldrb	r3, [r7, #3]
 800712e:	011b      	lsls	r3, r3, #4
 8007130:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007134:	68f9      	ldr	r1, [r7, #12]
 8007136:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800713a:	4313      	orrs	r3, r2
 800713c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007166:	f023 0303 	bic.w	r3, r3, #3
 800716a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800717a:	f023 0302 	bic.w	r3, r3, #2
 800717e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80071a8:	f023 0303 	bic.w	r3, r3, #3
 80071ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071bc:	f043 0302 	orr.w	r3, r3, #2
 80071c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4013      	ands	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80071e8:	68fb      	ldr	r3, [r7, #12]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b085      	sub	sp, #20
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	4013      	ands	r3, r2
 8007218:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	0c1b      	lsrs	r3, r3, #16
}
 800721e:	4618      	mov	r0, r3
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800722a:	b480      	push	{r7}
 800722c:	b085      	sub	sp, #20
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	4013      	ands	r3, r2
 800724c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	b29b      	uxth	r3, r3
}
 8007252:	4618      	mov	r0, r3
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800725e:	b480      	push	{r7}
 8007260:	b085      	sub	sp, #20
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	460b      	mov	r3, r1
 8007268:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800726e:	78fb      	ldrb	r3, [r7, #3]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	4013      	ands	r3, r2
 800728a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800728c:	68bb      	ldr	r3, [r7, #8]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800729a:	b480      	push	{r7}
 800729c:	b087      	sub	sp, #28
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	460b      	mov	r3, r1
 80072a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80072be:	78fb      	ldrb	r3, [r7, #3]
 80072c0:	f003 030f 	and.w	r3, r3, #15
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	fa22 f303 	lsr.w	r3, r2, r3
 80072ca:	01db      	lsls	r3, r3, #7
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80072d4:	78fb      	ldrb	r3, [r7, #3]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	4013      	ands	r3, r2
 80072e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072e8:	68bb      	ldr	r3, [r7, #8]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	371c      	adds	r7, #28
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b083      	sub	sp, #12
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	f003 0301 	and.w	r3, r3, #1
}
 8007306:	4618      	mov	r0, r3
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007312:	b480      	push	{r7}
 8007314:	b085      	sub	sp, #20
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800732c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007330:	f023 0307 	bic.w	r3, r3, #7
 8007334:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007348:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	460b      	mov	r3, r1
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	333c      	adds	r3, #60	@ 0x3c
 800736e:	3304      	adds	r3, #4
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	4a26      	ldr	r2, [pc, #152]	@ (8007410 <USB_EP0_OutStart+0xb8>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d90a      	bls.n	8007392 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007388:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800738c:	d101      	bne.n	8007392 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	e037      	b.n	8007402 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007398:	461a      	mov	r2, r3
 800739a:	2300      	movs	r3, #0
 800739c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80073b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073c0:	f043 0318 	orr.w	r3, r3, #24
 80073c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073d4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80073d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80073da:	7afb      	ldrb	r3, [r7, #11]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d10f      	bne.n	8007400 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073e6:	461a      	mov	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073fa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80073fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	4f54300a 	.word	0x4f54300a

08007414 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	3301      	adds	r3, #1
 8007424:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800742c:	d901      	bls.n	8007432 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e01b      	b.n	800746a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	daf2      	bge.n	8007420 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	f043 0201 	orr.w	r2, r3, #1
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3301      	adds	r3, #1
 800744e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007456:	d901      	bls.n	800745c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e006      	b.n	800746a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	f003 0301 	and.w	r3, r3, #1
 8007464:	2b01      	cmp	r3, #1
 8007466:	d0f0      	beq.n	800744a <USB_CoreReset+0x36>

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
	...

08007478 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007484:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007488:	f006 f846 	bl	800d518 <USBD_static_malloc>
 800748c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d109      	bne.n	80074a8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	32b0      	adds	r2, #176	@ 0xb0
 800749e:	2100      	movs	r1, #0
 80074a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80074a4:	2302      	movs	r3, #2
 80074a6:	e0d4      	b.n	8007652 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80074a8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80074ac:	2100      	movs	r1, #0
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f006 fa80 	bl	800d9b4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	32b0      	adds	r2, #176	@ 0xb0
 80074be:	68f9      	ldr	r1, [r7, #12]
 80074c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	32b0      	adds	r2, #176	@ 0xb0
 80074ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	7c1b      	ldrb	r3, [r3, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d138      	bne.n	8007552 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80074e0:	4b5e      	ldr	r3, [pc, #376]	@ (800765c <USBD_CDC_Init+0x1e4>)
 80074e2:	7819      	ldrb	r1, [r3, #0]
 80074e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074e8:	2202      	movs	r2, #2
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f005 fef1 	bl	800d2d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80074f0:	4b5a      	ldr	r3, [pc, #360]	@ (800765c <USBD_CDC_Init+0x1e4>)
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	f003 020f 	and.w	r2, r3, #15
 80074f8:	6879      	ldr	r1, [r7, #4]
 80074fa:	4613      	mov	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	440b      	add	r3, r1
 8007504:	3324      	adds	r3, #36	@ 0x24
 8007506:	2201      	movs	r2, #1
 8007508:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800750a:	4b55      	ldr	r3, [pc, #340]	@ (8007660 <USBD_CDC_Init+0x1e8>)
 800750c:	7819      	ldrb	r1, [r3, #0]
 800750e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007512:	2202      	movs	r2, #2
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f005 fedc 	bl	800d2d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800751a:	4b51      	ldr	r3, [pc, #324]	@ (8007660 <USBD_CDC_Init+0x1e8>)
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	f003 020f 	and.w	r2, r3, #15
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	4613      	mov	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	440b      	add	r3, r1
 800752e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007532:	2201      	movs	r2, #1
 8007534:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007536:	4b4b      	ldr	r3, [pc, #300]	@ (8007664 <USBD_CDC_Init+0x1ec>)
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	f003 020f 	and.w	r2, r3, #15
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	4613      	mov	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	440b      	add	r3, r1
 800754a:	3326      	adds	r3, #38	@ 0x26
 800754c:	2210      	movs	r2, #16
 800754e:	801a      	strh	r2, [r3, #0]
 8007550:	e035      	b.n	80075be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007552:	4b42      	ldr	r3, [pc, #264]	@ (800765c <USBD_CDC_Init+0x1e4>)
 8007554:	7819      	ldrb	r1, [r3, #0]
 8007556:	2340      	movs	r3, #64	@ 0x40
 8007558:	2202      	movs	r2, #2
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f005 feb9 	bl	800d2d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007560:	4b3e      	ldr	r3, [pc, #248]	@ (800765c <USBD_CDC_Init+0x1e4>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	f003 020f 	and.w	r2, r3, #15
 8007568:	6879      	ldr	r1, [r7, #4]
 800756a:	4613      	mov	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	440b      	add	r3, r1
 8007574:	3324      	adds	r3, #36	@ 0x24
 8007576:	2201      	movs	r2, #1
 8007578:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800757a:	4b39      	ldr	r3, [pc, #228]	@ (8007660 <USBD_CDC_Init+0x1e8>)
 800757c:	7819      	ldrb	r1, [r3, #0]
 800757e:	2340      	movs	r3, #64	@ 0x40
 8007580:	2202      	movs	r2, #2
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f005 fea5 	bl	800d2d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007588:	4b35      	ldr	r3, [pc, #212]	@ (8007660 <USBD_CDC_Init+0x1e8>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	f003 020f 	and.w	r2, r3, #15
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	4613      	mov	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	440b      	add	r3, r1
 800759c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80075a0:	2201      	movs	r2, #1
 80075a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80075a4:	4b2f      	ldr	r3, [pc, #188]	@ (8007664 <USBD_CDC_Init+0x1ec>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	f003 020f 	and.w	r2, r3, #15
 80075ac:	6879      	ldr	r1, [r7, #4]
 80075ae:	4613      	mov	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	440b      	add	r3, r1
 80075b8:	3326      	adds	r3, #38	@ 0x26
 80075ba:	2210      	movs	r2, #16
 80075bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80075be:	4b29      	ldr	r3, [pc, #164]	@ (8007664 <USBD_CDC_Init+0x1ec>)
 80075c0:	7819      	ldrb	r1, [r3, #0]
 80075c2:	2308      	movs	r3, #8
 80075c4:	2203      	movs	r2, #3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f005 fe83 	bl	800d2d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80075cc:	4b25      	ldr	r3, [pc, #148]	@ (8007664 <USBD_CDC_Init+0x1ec>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	f003 020f 	and.w	r2, r3, #15
 80075d4:	6879      	ldr	r1, [r7, #4]
 80075d6:	4613      	mov	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4413      	add	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	440b      	add	r3, r1
 80075e0:	3324      	adds	r3, #36	@ 0x24
 80075e2:	2201      	movs	r2, #1
 80075e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	33b0      	adds	r3, #176	@ 0xb0
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007618:	2b00      	cmp	r3, #0
 800761a:	d101      	bne.n	8007620 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800761c:	2302      	movs	r3, #2
 800761e:	e018      	b.n	8007652 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	7c1b      	ldrb	r3, [r3, #16]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10a      	bne.n	800763e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007628:	4b0d      	ldr	r3, [pc, #52]	@ (8007660 <USBD_CDC_Init+0x1e8>)
 800762a:	7819      	ldrb	r1, [r3, #0]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007632:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f005 ff3a 	bl	800d4b0 <USBD_LL_PrepareReceive>
 800763c:	e008      	b.n	8007650 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800763e:	4b08      	ldr	r3, [pc, #32]	@ (8007660 <USBD_CDC_Init+0x1e8>)
 8007640:	7819      	ldrb	r1, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007648:	2340      	movs	r3, #64	@ 0x40
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f005 ff30 	bl	800d4b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	2000009f 	.word	0x2000009f
 8007660:	200000a0 	.word	0x200000a0
 8007664:	200000a1 	.word	0x200000a1

08007668 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007674:	4b3a      	ldr	r3, [pc, #232]	@ (8007760 <USBD_CDC_DeInit+0xf8>)
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f005 fe4f 	bl	800d31e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007680:	4b37      	ldr	r3, [pc, #220]	@ (8007760 <USBD_CDC_DeInit+0xf8>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	f003 020f 	and.w	r2, r3, #15
 8007688:	6879      	ldr	r1, [r7, #4]
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	440b      	add	r3, r1
 8007694:	3324      	adds	r3, #36	@ 0x24
 8007696:	2200      	movs	r2, #0
 8007698:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800769a:	4b32      	ldr	r3, [pc, #200]	@ (8007764 <USBD_CDC_DeInit+0xfc>)
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f005 fe3c 	bl	800d31e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80076a6:	4b2f      	ldr	r3, [pc, #188]	@ (8007764 <USBD_CDC_DeInit+0xfc>)
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	f003 020f 	and.w	r2, r3, #15
 80076ae:	6879      	ldr	r1, [r7, #4]
 80076b0:	4613      	mov	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	440b      	add	r3, r1
 80076ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80076be:	2200      	movs	r2, #0
 80076c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80076c2:	4b29      	ldr	r3, [pc, #164]	@ (8007768 <USBD_CDC_DeInit+0x100>)
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f005 fe28 	bl	800d31e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80076ce:	4b26      	ldr	r3, [pc, #152]	@ (8007768 <USBD_CDC_DeInit+0x100>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	f003 020f 	and.w	r2, r3, #15
 80076d6:	6879      	ldr	r1, [r7, #4]
 80076d8:	4613      	mov	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	440b      	add	r3, r1
 80076e2:	3324      	adds	r3, #36	@ 0x24
 80076e4:	2200      	movs	r2, #0
 80076e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80076e8:	4b1f      	ldr	r3, [pc, #124]	@ (8007768 <USBD_CDC_DeInit+0x100>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	f003 020f 	and.w	r2, r3, #15
 80076f0:	6879      	ldr	r1, [r7, #4]
 80076f2:	4613      	mov	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	440b      	add	r3, r1
 80076fc:	3326      	adds	r3, #38	@ 0x26
 80076fe:	2200      	movs	r2, #0
 8007700:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	32b0      	adds	r2, #176	@ 0xb0
 800770c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d01f      	beq.n	8007754 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	33b0      	adds	r3, #176	@ 0xb0
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	32b0      	adds	r2, #176	@ 0xb0
 8007732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007736:	4618      	mov	r0, r3
 8007738:	f005 fefc 	bl	800d534 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	32b0      	adds	r2, #176	@ 0xb0
 8007746:	2100      	movs	r1, #0
 8007748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	2000009f 	.word	0x2000009f
 8007764:	200000a0 	.word	0x200000a0
 8007768:	200000a1 	.word	0x200000a1

0800776c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	32b0      	adds	r2, #176	@ 0xb0
 8007780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007784:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800778a:	2300      	movs	r3, #0
 800778c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007798:	2303      	movs	r3, #3
 800779a:	e0bf      	b.n	800791c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d050      	beq.n	800784a <USBD_CDC_Setup+0xde>
 80077a8:	2b20      	cmp	r3, #32
 80077aa:	f040 80af 	bne.w	800790c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	88db      	ldrh	r3, [r3, #6]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d03a      	beq.n	800782c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	b25b      	sxtb	r3, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	da1b      	bge.n	80077f8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	33b0      	adds	r3, #176	@ 0xb0
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80077d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	88d2      	ldrh	r2, [r2, #6]
 80077dc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	88db      	ldrh	r3, [r3, #6]
 80077e2:	2b07      	cmp	r3, #7
 80077e4:	bf28      	it	cs
 80077e6:	2307      	movcs	r3, #7
 80077e8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	89fa      	ldrh	r2, [r7, #14]
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 fd53 	bl	800929c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80077f6:	e090      	b.n	800791a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	785a      	ldrb	r2, [r3, #1]
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	88db      	ldrh	r3, [r3, #6]
 8007806:	2b3f      	cmp	r3, #63	@ 0x3f
 8007808:	d803      	bhi.n	8007812 <USBD_CDC_Setup+0xa6>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	88db      	ldrh	r3, [r3, #6]
 800780e:	b2da      	uxtb	r2, r3
 8007810:	e000      	b.n	8007814 <USBD_CDC_Setup+0xa8>
 8007812:	2240      	movs	r2, #64	@ 0x40
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800781a:	6939      	ldr	r1, [r7, #16]
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007822:	461a      	mov	r2, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f001 fd65 	bl	80092f4 <USBD_CtlPrepareRx>
      break;
 800782a:	e076      	b.n	800791a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	33b0      	adds	r3, #176	@ 0xb0
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	7850      	ldrb	r0, [r2, #1]
 8007842:	2200      	movs	r2, #0
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	4798      	blx	r3
      break;
 8007848:	e067      	b.n	800791a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	785b      	ldrb	r3, [r3, #1]
 800784e:	2b0b      	cmp	r3, #11
 8007850:	d851      	bhi.n	80078f6 <USBD_CDC_Setup+0x18a>
 8007852:	a201      	add	r2, pc, #4	@ (adr r2, 8007858 <USBD_CDC_Setup+0xec>)
 8007854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007858:	08007889 	.word	0x08007889
 800785c:	08007905 	.word	0x08007905
 8007860:	080078f7 	.word	0x080078f7
 8007864:	080078f7 	.word	0x080078f7
 8007868:	080078f7 	.word	0x080078f7
 800786c:	080078f7 	.word	0x080078f7
 8007870:	080078f7 	.word	0x080078f7
 8007874:	080078f7 	.word	0x080078f7
 8007878:	080078f7 	.word	0x080078f7
 800787c:	080078f7 	.word	0x080078f7
 8007880:	080078b3 	.word	0x080078b3
 8007884:	080078dd 	.word	0x080078dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b03      	cmp	r3, #3
 8007892:	d107      	bne.n	80078a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007894:	f107 030a 	add.w	r3, r7, #10
 8007898:	2202      	movs	r2, #2
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f001 fcfd 	bl	800929c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078a2:	e032      	b.n	800790a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f001 fc7b 	bl	80091a2 <USBD_CtlError>
            ret = USBD_FAIL;
 80078ac:	2303      	movs	r3, #3
 80078ae:	75fb      	strb	r3, [r7, #23]
          break;
 80078b0:	e02b      	b.n	800790a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d107      	bne.n	80078ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80078be:	f107 030d 	add.w	r3, r7, #13
 80078c2:	2201      	movs	r2, #1
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 fce8 	bl	800929c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078cc:	e01d      	b.n	800790a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f001 fc66 	bl	80091a2 <USBD_CtlError>
            ret = USBD_FAIL;
 80078d6:	2303      	movs	r3, #3
 80078d8:	75fb      	strb	r3, [r7, #23]
          break;
 80078da:	e016      	b.n	800790a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b03      	cmp	r3, #3
 80078e6:	d00f      	beq.n	8007908 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f001 fc59 	bl	80091a2 <USBD_CtlError>
            ret = USBD_FAIL;
 80078f0:	2303      	movs	r3, #3
 80078f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80078f4:	e008      	b.n	8007908 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 fc52 	bl	80091a2 <USBD_CtlError>
          ret = USBD_FAIL;
 80078fe:	2303      	movs	r3, #3
 8007900:	75fb      	strb	r3, [r7, #23]
          break;
 8007902:	e002      	b.n	800790a <USBD_CDC_Setup+0x19e>
          break;
 8007904:	bf00      	nop
 8007906:	e008      	b.n	800791a <USBD_CDC_Setup+0x1ae>
          break;
 8007908:	bf00      	nop
      }
      break;
 800790a:	e006      	b.n	800791a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f001 fc47 	bl	80091a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007914:	2303      	movs	r3, #3
 8007916:	75fb      	strb	r3, [r7, #23]
      break;
 8007918:	bf00      	nop
  }

  return (uint8_t)ret;
 800791a:	7dfb      	ldrb	r3, [r7, #23]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3718      	adds	r7, #24
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007936:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	32b0      	adds	r2, #176	@ 0xb0
 8007942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800794a:	2303      	movs	r3, #3
 800794c:	e065      	b.n	8007a1a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	32b0      	adds	r2, #176	@ 0xb0
 8007958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800795c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800795e:	78fb      	ldrb	r3, [r7, #3]
 8007960:	f003 020f 	and.w	r2, r3, #15
 8007964:	6879      	ldr	r1, [r7, #4]
 8007966:	4613      	mov	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	440b      	add	r3, r1
 8007970:	3318      	adds	r3, #24
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d02f      	beq.n	80079d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007978:	78fb      	ldrb	r3, [r7, #3]
 800797a:	f003 020f 	and.w	r2, r3, #15
 800797e:	6879      	ldr	r1, [r7, #4]
 8007980:	4613      	mov	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	440b      	add	r3, r1
 800798a:	3318      	adds	r3, #24
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	78fb      	ldrb	r3, [r7, #3]
 8007990:	f003 010f 	and.w	r1, r3, #15
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	460b      	mov	r3, r1
 8007998:	00db      	lsls	r3, r3, #3
 800799a:	440b      	add	r3, r1
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4403      	add	r3, r0
 80079a0:	331c      	adds	r3, #28
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80079a8:	fb01 f303 	mul.w	r3, r1, r3
 80079ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d112      	bne.n	80079d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80079b2:	78fb      	ldrb	r3, [r7, #3]
 80079b4:	f003 020f 	and.w	r2, r3, #15
 80079b8:	6879      	ldr	r1, [r7, #4]
 80079ba:	4613      	mov	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	440b      	add	r3, r1
 80079c4:	3318      	adds	r3, #24
 80079c6:	2200      	movs	r2, #0
 80079c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80079ca:	78f9      	ldrb	r1, [r7, #3]
 80079cc:	2300      	movs	r3, #0
 80079ce:	2200      	movs	r2, #0
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f005 fd4c 	bl	800d46e <USBD_LL_Transmit>
 80079d6:	e01f      	b.n	8007a18 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	2200      	movs	r2, #0
 80079dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	33b0      	adds	r3, #176	@ 0xb0
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d010      	beq.n	8007a18 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	33b0      	adds	r3, #176	@ 0xb0
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007a14:	78fa      	ldrb	r2, [r7, #3]
 8007a16:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b084      	sub	sp, #16
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	32b0      	adds	r2, #176	@ 0xb0
 8007a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	32b0      	adds	r2, #176	@ 0xb0
 8007a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e01a      	b.n	8007a8a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007a54:	78fb      	ldrb	r3, [r7, #3]
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f005 fd4a 	bl	800d4f2 <USBD_LL_GetRxDataSize>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	33b0      	adds	r3, #176	@ 0xb0
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007a84:	4611      	mov	r1, r2
 8007a86:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b084      	sub	sp, #16
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	32b0      	adds	r2, #176	@ 0xb0
 8007aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e024      	b.n	8007afe <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	33b0      	adds	r3, #176	@ 0xb0
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d019      	beq.n	8007afc <USBD_CDC_EP0_RxReady+0x6a>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007ace:	2bff      	cmp	r3, #255	@ 0xff
 8007ad0:	d014      	beq.n	8007afc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	33b0      	adds	r3, #176	@ 0xb0
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007aea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007af2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	22ff      	movs	r2, #255	@ 0xff
 8007af8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
	...

08007b08 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b10:	2182      	movs	r1, #130	@ 0x82
 8007b12:	4818      	ldr	r0, [pc, #96]	@ (8007b74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007b14:	f000 fd0f 	bl	8008536 <USBD_GetEpDesc>
 8007b18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	4815      	ldr	r0, [pc, #84]	@ (8007b74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007b1e:	f000 fd0a 	bl	8008536 <USBD_GetEpDesc>
 8007b22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007b24:	2181      	movs	r1, #129	@ 0x81
 8007b26:	4813      	ldr	r0, [pc, #76]	@ (8007b74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007b28:	f000 fd05 	bl	8008536 <USBD_GetEpDesc>
 8007b2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	2210      	movs	r2, #16
 8007b38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d006      	beq.n	8007b4e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b48:	711a      	strb	r2, [r3, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d006      	beq.n	8007b62 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b5c:	711a      	strb	r2, [r3, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2243      	movs	r2, #67	@ 0x43
 8007b66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b68:	4b02      	ldr	r3, [pc, #8]	@ (8007b74 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3718      	adds	r7, #24
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	2000005c 	.word	0x2000005c

08007b78 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b80:	2182      	movs	r1, #130	@ 0x82
 8007b82:	4818      	ldr	r0, [pc, #96]	@ (8007be4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b84:	f000 fcd7 	bl	8008536 <USBD_GetEpDesc>
 8007b88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	4815      	ldr	r0, [pc, #84]	@ (8007be4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b8e:	f000 fcd2 	bl	8008536 <USBD_GetEpDesc>
 8007b92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007b94:	2181      	movs	r1, #129	@ 0x81
 8007b96:	4813      	ldr	r0, [pc, #76]	@ (8007be4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b98:	f000 fccd 	bl	8008536 <USBD_GetEpDesc>
 8007b9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2210      	movs	r2, #16
 8007ba8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d006      	beq.n	8007bbe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	711a      	strb	r2, [r3, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f042 0202 	orr.w	r2, r2, #2
 8007bbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d006      	beq.n	8007bd2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	711a      	strb	r2, [r3, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f042 0202 	orr.w	r2, r2, #2
 8007bd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2243      	movs	r2, #67	@ 0x43
 8007bd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007bd8:	4b02      	ldr	r3, [pc, #8]	@ (8007be4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	2000005c 	.word	0x2000005c

08007be8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007bf0:	2182      	movs	r1, #130	@ 0x82
 8007bf2:	4818      	ldr	r0, [pc, #96]	@ (8007c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007bf4:	f000 fc9f 	bl	8008536 <USBD_GetEpDesc>
 8007bf8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	4815      	ldr	r0, [pc, #84]	@ (8007c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007bfe:	f000 fc9a 	bl	8008536 <USBD_GetEpDesc>
 8007c02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007c04:	2181      	movs	r1, #129	@ 0x81
 8007c06:	4813      	ldr	r0, [pc, #76]	@ (8007c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007c08:	f000 fc95 	bl	8008536 <USBD_GetEpDesc>
 8007c0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	2210      	movs	r2, #16
 8007c18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d006      	beq.n	8007c2e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c28:	711a      	strb	r2, [r3, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d006      	beq.n	8007c42 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c3c:	711a      	strb	r2, [r3, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2243      	movs	r2, #67	@ 0x43
 8007c46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007c48:	4b02      	ldr	r3, [pc, #8]	@ (8007c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3718      	adds	r7, #24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	2000005c 	.word	0x2000005c

08007c58 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	220a      	movs	r2, #10
 8007c64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007c66:	4b03      	ldr	r3, [pc, #12]	@ (8007c74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	20000018 	.word	0x20000018

08007c78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e009      	b.n	8007ca0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	33b0      	adds	r3, #176	@ 0xb0
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	32b0      	adds	r2, #176	@ 0xb0
 8007cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e008      	b.n	8007ce4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	371c      	adds	r7, #28
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	32b0      	adds	r2, #176	@ 0xb0
 8007d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e004      	b.n	8007d1e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3714      	adds	r7, #20
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
	...

08007d2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	32b0      	adds	r2, #176	@ 0xb0
 8007d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d42:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	32b0      	adds	r2, #176	@ 0xb0
 8007d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e018      	b.n	8007d8c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	7c1b      	ldrb	r3, [r3, #16]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10a      	bne.n	8007d78 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d62:	4b0c      	ldr	r3, [pc, #48]	@ (8007d94 <USBD_CDC_ReceivePacket+0x68>)
 8007d64:	7819      	ldrb	r1, [r3, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f005 fb9d 	bl	800d4b0 <USBD_LL_PrepareReceive>
 8007d76:	e008      	b.n	8007d8a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d78:	4b06      	ldr	r3, [pc, #24]	@ (8007d94 <USBD_CDC_ReceivePacket+0x68>)
 8007d7a:	7819      	ldrb	r1, [r3, #0]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d82:	2340      	movs	r3, #64	@ 0x40
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f005 fb93 	bl	800d4b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	200000a0 	.word	0x200000a0

08007d98 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	4613      	mov	r3, r2
 8007da4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e01f      	b.n	8007df0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d003      	beq.n	8007dd6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	79fa      	ldrb	r2, [r7, #7]
 8007de2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f005 fa0d 	bl	800d204 <USBD_LL_Init>
 8007dea:	4603      	mov	r3, r0
 8007dec:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3718      	adds	r7, #24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e025      	b.n	8007e5c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	32ae      	adds	r2, #174	@ 0xae
 8007e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00f      	beq.n	8007e4c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	32ae      	adds	r2, #174	@ 0xae
 8007e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e3c:	f107 020e 	add.w	r2, r7, #14
 8007e40:	4610      	mov	r0, r2
 8007e42:	4798      	blx	r3
 8007e44:	4602      	mov	r2, r0
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007e52:	1c5a      	adds	r2, r3, #1
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f005 fa15 	bl	800d29c <USBD_LL_Start>
 8007e72:	4603      	mov	r3, r0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e84:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b084      	sub	sp, #16
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d009      	beq.n	8007ec0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	78fa      	ldrb	r2, [r7, #3]
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	4798      	blx	r3
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	78fa      	ldrb	r2, [r7, #3]
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	4798      	blx	r3
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b084      	sub	sp, #16
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f001 f90c 	bl	800912e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007f24:	461a      	mov	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007f32:	f003 031f 	and.w	r3, r3, #31
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d01a      	beq.n	8007f70 <USBD_LL_SetupStage+0x72>
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d822      	bhi.n	8007f84 <USBD_LL_SetupStage+0x86>
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d002      	beq.n	8007f48 <USBD_LL_SetupStage+0x4a>
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d00a      	beq.n	8007f5c <USBD_LL_SetupStage+0x5e>
 8007f46:	e01d      	b.n	8007f84 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fb63 	bl	800861c <USBD_StdDevReq>
 8007f56:	4603      	mov	r3, r0
 8007f58:	73fb      	strb	r3, [r7, #15]
      break;
 8007f5a:	e020      	b.n	8007f9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fbcb 	bl	8008700 <USBD_StdItfReq>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f6e:	e016      	b.n	8007f9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f76:	4619      	mov	r1, r3
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fc2d 	bl	80087d8 <USBD_StdEPReq>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	73fb      	strb	r3, [r7, #15]
      break;
 8007f82:	e00c      	b.n	8007f9e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007f8a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f005 f9e2 	bl	800d35c <USBD_LL_StallEP>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f9c:	bf00      	nop
  }

  return ret;
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	607a      	str	r2, [r7, #4]
 8007fb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007fba:	7afb      	ldrb	r3, [r7, #11]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d16e      	bne.n	800809e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007fc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	f040 8098 	bne.w	8008104 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	689a      	ldr	r2, [r3, #8]
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d913      	bls.n	8008008 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	689a      	ldr	r2, [r3, #8]
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	1ad2      	subs	r2, r2, r3
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	68da      	ldr	r2, [r3, #12]
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	bf28      	it	cs
 8007ffa:	4613      	movcs	r3, r2
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	6879      	ldr	r1, [r7, #4]
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f001 f994 	bl	800932e <USBD_CtlContinueRx>
 8008006:	e07d      	b.n	8008104 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800800e:	f003 031f 	and.w	r3, r3, #31
 8008012:	2b02      	cmp	r3, #2
 8008014:	d014      	beq.n	8008040 <USBD_LL_DataOutStage+0x98>
 8008016:	2b02      	cmp	r3, #2
 8008018:	d81d      	bhi.n	8008056 <USBD_LL_DataOutStage+0xae>
 800801a:	2b00      	cmp	r3, #0
 800801c:	d002      	beq.n	8008024 <USBD_LL_DataOutStage+0x7c>
 800801e:	2b01      	cmp	r3, #1
 8008020:	d003      	beq.n	800802a <USBD_LL_DataOutStage+0x82>
 8008022:	e018      	b.n	8008056 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008024:	2300      	movs	r3, #0
 8008026:	75bb      	strb	r3, [r7, #22]
            break;
 8008028:	e018      	b.n	800805c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008030:	b2db      	uxtb	r3, r3
 8008032:	4619      	mov	r1, r3
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 fa64 	bl	8008502 <USBD_CoreFindIF>
 800803a:	4603      	mov	r3, r0
 800803c:	75bb      	strb	r3, [r7, #22]
            break;
 800803e:	e00d      	b.n	800805c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008046:	b2db      	uxtb	r3, r3
 8008048:	4619      	mov	r1, r3
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f000 fa66 	bl	800851c <USBD_CoreFindEP>
 8008050:	4603      	mov	r3, r0
 8008052:	75bb      	strb	r3, [r7, #22]
            break;
 8008054:	e002      	b.n	800805c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008056:	2300      	movs	r3, #0
 8008058:	75bb      	strb	r3, [r7, #22]
            break;
 800805a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800805c:	7dbb      	ldrb	r3, [r7, #22]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d119      	bne.n	8008096 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b03      	cmp	r3, #3
 800806c:	d113      	bne.n	8008096 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800806e:	7dba      	ldrb	r2, [r7, #22]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	32ae      	adds	r2, #174	@ 0xae
 8008074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00b      	beq.n	8008096 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800807e:	7dba      	ldrb	r2, [r7, #22]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008086:	7dba      	ldrb	r2, [r7, #22]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	32ae      	adds	r2, #174	@ 0xae
 800808c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f001 f95a 	bl	8009350 <USBD_CtlSendStatus>
 800809c:	e032      	b.n	8008104 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800809e:	7afb      	ldrb	r3, [r7, #11]
 80080a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	4619      	mov	r1, r3
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f000 fa37 	bl	800851c <USBD_CoreFindEP>
 80080ae:	4603      	mov	r3, r0
 80080b0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080b2:	7dbb      	ldrb	r3, [r7, #22]
 80080b4:	2bff      	cmp	r3, #255	@ 0xff
 80080b6:	d025      	beq.n	8008104 <USBD_LL_DataOutStage+0x15c>
 80080b8:	7dbb      	ldrb	r3, [r7, #22]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d122      	bne.n	8008104 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d117      	bne.n	80080fa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80080ca:	7dba      	ldrb	r2, [r7, #22]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	32ae      	adds	r2, #174	@ 0xae
 80080d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00f      	beq.n	80080fa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80080da:	7dba      	ldrb	r2, [r7, #22]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80080e2:	7dba      	ldrb	r2, [r7, #22]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	32ae      	adds	r2, #174	@ 0xae
 80080e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	7afa      	ldrb	r2, [r7, #11]
 80080f0:	4611      	mov	r1, r2
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	4798      	blx	r3
 80080f6:	4603      	mov	r3, r0
 80080f8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80080fa:	7dfb      	ldrb	r3, [r7, #23]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d001      	beq.n	8008104 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008100:	7dfb      	ldrb	r3, [r7, #23]
 8008102:	e000      	b.n	8008106 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b086      	sub	sp, #24
 8008112:	af00      	add	r7, sp, #0
 8008114:	60f8      	str	r0, [r7, #12]
 8008116:	460b      	mov	r3, r1
 8008118:	607a      	str	r2, [r7, #4]
 800811a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800811c:	7afb      	ldrb	r3, [r7, #11]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d16f      	bne.n	8008202 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3314      	adds	r3, #20
 8008126:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800812e:	2b02      	cmp	r3, #2
 8008130:	d15a      	bne.n	80081e8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	689a      	ldr	r2, [r3, #8]
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	429a      	cmp	r2, r3
 800813c:	d914      	bls.n	8008168 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	689a      	ldr	r2, [r3, #8]
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	1ad2      	subs	r2, r2, r3
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	461a      	mov	r2, r3
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f001 f8bc 	bl	80092d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800815a:	2300      	movs	r3, #0
 800815c:	2200      	movs	r2, #0
 800815e:	2100      	movs	r1, #0
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f005 f9a5 	bl	800d4b0 <USBD_LL_PrepareReceive>
 8008166:	e03f      	b.n	80081e8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	68da      	ldr	r2, [r3, #12]
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	429a      	cmp	r2, r3
 8008172:	d11c      	bne.n	80081ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	685a      	ldr	r2, [r3, #4]
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800817c:	429a      	cmp	r2, r3
 800817e:	d316      	bcc.n	80081ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800818a:	429a      	cmp	r2, r3
 800818c:	d20f      	bcs.n	80081ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800818e:	2200      	movs	r2, #0
 8008190:	2100      	movs	r1, #0
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f001 f89d 	bl	80092d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081a0:	2300      	movs	r3, #0
 80081a2:	2200      	movs	r2, #0
 80081a4:	2100      	movs	r1, #0
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f005 f982 	bl	800d4b0 <USBD_LL_PrepareReceive>
 80081ac:	e01c      	b.n	80081e8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	2b03      	cmp	r3, #3
 80081b8:	d10f      	bne.n	80081da <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d009      	beq.n	80081da <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80081da:	2180      	movs	r1, #128	@ 0x80
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f005 f8bd 	bl	800d35c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f001 f8c7 	bl	8009376 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d03a      	beq.n	8008268 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f7ff fe42 	bl	8007e7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008200:	e032      	b.n	8008268 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008202:	7afb      	ldrb	r3, [r7, #11]
 8008204:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008208:	b2db      	uxtb	r3, r3
 800820a:	4619      	mov	r1, r3
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 f985 	bl	800851c <USBD_CoreFindEP>
 8008212:	4603      	mov	r3, r0
 8008214:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008216:	7dfb      	ldrb	r3, [r7, #23]
 8008218:	2bff      	cmp	r3, #255	@ 0xff
 800821a:	d025      	beq.n	8008268 <USBD_LL_DataInStage+0x15a>
 800821c:	7dfb      	ldrb	r3, [r7, #23]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d122      	bne.n	8008268 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b03      	cmp	r3, #3
 800822c:	d11c      	bne.n	8008268 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800822e:	7dfa      	ldrb	r2, [r7, #23]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	32ae      	adds	r2, #174	@ 0xae
 8008234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d014      	beq.n	8008268 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800823e:	7dfa      	ldrb	r2, [r7, #23]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008246:	7dfa      	ldrb	r2, [r7, #23]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	32ae      	adds	r2, #174	@ 0xae
 800824c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	7afa      	ldrb	r2, [r7, #11]
 8008254:	4611      	mov	r1, r2
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	4798      	blx	r3
 800825a:	4603      	mov	r3, r0
 800825c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800825e:	7dbb      	ldrb	r3, [r7, #22]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008264:	7dbb      	ldrb	r3, [r7, #22]
 8008266:	e000      	b.n	800826a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3718      	adds	r7, #24
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d014      	beq.n	80082d8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00e      	beq.n	80082d8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	6852      	ldr	r2, [r2, #4]
 80082c6:	b2d2      	uxtb	r2, r2
 80082c8:	4611      	mov	r1, r2
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	4798      	blx	r3
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d001      	beq.n	80082d8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80082d4:	2303      	movs	r3, #3
 80082d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082d8:	2340      	movs	r3, #64	@ 0x40
 80082da:	2200      	movs	r2, #0
 80082dc:	2100      	movs	r1, #0
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f004 fff7 	bl	800d2d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2240      	movs	r2, #64	@ 0x40
 80082f0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082f4:	2340      	movs	r3, #64	@ 0x40
 80082f6:	2200      	movs	r2, #0
 80082f8:	2180      	movs	r1, #128	@ 0x80
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f004 ffe9 	bl	800d2d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2240      	movs	r2, #64	@ 0x40
 800830a:	621a      	str	r2, [r3, #32]

  return ret;
 800830c:	7bfb      	ldrb	r3, [r7, #15]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	460b      	mov	r3, r1
 8008320:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	78fa      	ldrb	r2, [r7, #3]
 8008326:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008336:	b480      	push	{r7}
 8008338:	b083      	sub	sp, #12
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b04      	cmp	r3, #4
 8008348:	d006      	beq.n	8008358 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008350:	b2da      	uxtb	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2204      	movs	r2, #4
 800835c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b04      	cmp	r3, #4
 8008380:	d106      	bne.n	8008390 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008388:	b2da      	uxtb	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	d110      	bne.n	80083d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00b      	beq.n	80083d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d005      	beq.n	80083d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b082      	sub	sp, #8
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	460b      	mov	r3, r1
 80083e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	32ae      	adds	r2, #174	@ 0xae
 80083f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d101      	bne.n	8008400 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e01c      	b.n	800843a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b03      	cmp	r3, #3
 800840a:	d115      	bne.n	8008438 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	32ae      	adds	r2, #174	@ 0xae
 8008416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00b      	beq.n	8008438 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	32ae      	adds	r2, #174	@ 0xae
 800842a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800842e:	6a1b      	ldr	r3, [r3, #32]
 8008430:	78fa      	ldrb	r2, [r7, #3]
 8008432:	4611      	mov	r1, r2
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b082      	sub	sp, #8
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	460b      	mov	r3, r1
 800844c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	32ae      	adds	r2, #174	@ 0xae
 8008458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d101      	bne.n	8008464 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008460:	2303      	movs	r3, #3
 8008462:	e01c      	b.n	800849e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800846a:	b2db      	uxtb	r3, r3
 800846c:	2b03      	cmp	r3, #3
 800846e:	d115      	bne.n	800849c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	32ae      	adds	r2, #174	@ 0xae
 800847a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800847e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00b      	beq.n	800849c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	32ae      	adds	r2, #174	@ 0xae
 800848e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008494:	78fa      	ldrb	r2, [r7, #3]
 8008496:	4611      	mov	r1, r2
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00e      	beq.n	80084f8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	6852      	ldr	r2, [r2, #4]
 80084e6:	b2d2      	uxtb	r2, r2
 80084e8:	4611      	mov	r1, r2
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	4798      	blx	r3
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d001      	beq.n	80084f8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80084f4:	2303      	movs	r3, #3
 80084f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008502:	b480      	push	{r7}
 8008504:	b083      	sub	sp, #12
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
 800850a:	460b      	mov	r3, r1
 800850c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800850e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	460b      	mov	r3, r1
 8008526:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008528:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800852a:	4618      	mov	r0, r3
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b086      	sub	sp, #24
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
 800853e:	460b      	mov	r3, r1
 8008540:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800854a:	2300      	movs	r3, #0
 800854c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	885b      	ldrh	r3, [r3, #2]
 8008552:	b29b      	uxth	r3, r3
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	7812      	ldrb	r2, [r2, #0]
 8008558:	4293      	cmp	r3, r2
 800855a:	d91f      	bls.n	800859c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008562:	e013      	b.n	800858c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008564:	f107 030a 	add.w	r3, r7, #10
 8008568:	4619      	mov	r1, r3
 800856a:	6978      	ldr	r0, [r7, #20]
 800856c:	f000 f81b 	bl	80085a6 <USBD_GetNextDesc>
 8008570:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	785b      	ldrb	r3, [r3, #1]
 8008576:	2b05      	cmp	r3, #5
 8008578:	d108      	bne.n	800858c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	789b      	ldrb	r3, [r3, #2]
 8008582:	78fa      	ldrb	r2, [r7, #3]
 8008584:	429a      	cmp	r2, r3
 8008586:	d008      	beq.n	800859a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008588:	2300      	movs	r3, #0
 800858a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	885b      	ldrh	r3, [r3, #2]
 8008590:	b29a      	uxth	r2, r3
 8008592:	897b      	ldrh	r3, [r7, #10]
 8008594:	429a      	cmp	r2, r3
 8008596:	d8e5      	bhi.n	8008564 <USBD_GetEpDesc+0x2e>
 8008598:	e000      	b.n	800859c <USBD_GetEpDesc+0x66>
          break;
 800859a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800859c:	693b      	ldr	r3, [r7, #16]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3718      	adds	r7, #24
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b085      	sub	sp, #20
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	881b      	ldrh	r3, [r3, #0]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	7812      	ldrb	r2, [r2, #0]
 80085bc:	4413      	add	r3, r2
 80085be:	b29a      	uxth	r2, r3
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4413      	add	r3, r2
 80085ce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80085d0:	68fb      	ldr	r3, [r7, #12]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80085de:	b480      	push	{r7}
 80085e0:	b087      	sub	sp, #28
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	3301      	adds	r3, #1
 80085f4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80085fc:	8a3b      	ldrh	r3, [r7, #16]
 80085fe:	021b      	lsls	r3, r3, #8
 8008600:	b21a      	sxth	r2, r3
 8008602:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008606:	4313      	orrs	r3, r2
 8008608:	b21b      	sxth	r3, r3
 800860a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800860c:	89fb      	ldrh	r3, [r7, #14]
}
 800860e:	4618      	mov	r0, r3
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
	...

0800861c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008632:	2b40      	cmp	r3, #64	@ 0x40
 8008634:	d005      	beq.n	8008642 <USBD_StdDevReq+0x26>
 8008636:	2b40      	cmp	r3, #64	@ 0x40
 8008638:	d857      	bhi.n	80086ea <USBD_StdDevReq+0xce>
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00f      	beq.n	800865e <USBD_StdDevReq+0x42>
 800863e:	2b20      	cmp	r3, #32
 8008640:	d153      	bne.n	80086ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	32ae      	adds	r2, #174	@ 0xae
 800864c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	4798      	blx	r3
 8008658:	4603      	mov	r3, r0
 800865a:	73fb      	strb	r3, [r7, #15]
      break;
 800865c:	e04a      	b.n	80086f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	785b      	ldrb	r3, [r3, #1]
 8008662:	2b09      	cmp	r3, #9
 8008664:	d83b      	bhi.n	80086de <USBD_StdDevReq+0xc2>
 8008666:	a201      	add	r2, pc, #4	@ (adr r2, 800866c <USBD_StdDevReq+0x50>)
 8008668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866c:	080086c1 	.word	0x080086c1
 8008670:	080086d5 	.word	0x080086d5
 8008674:	080086df 	.word	0x080086df
 8008678:	080086cb 	.word	0x080086cb
 800867c:	080086df 	.word	0x080086df
 8008680:	0800869f 	.word	0x0800869f
 8008684:	08008695 	.word	0x08008695
 8008688:	080086df 	.word	0x080086df
 800868c:	080086b7 	.word	0x080086b7
 8008690:	080086a9 	.word	0x080086a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fa3c 	bl	8008b14 <USBD_GetDescriptor>
          break;
 800869c:	e024      	b.n	80086e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fba1 	bl	8008de8 <USBD_SetAddress>
          break;
 80086a6:	e01f      	b.n	80086e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fbe0 	bl	8008e70 <USBD_SetConfig>
 80086b0:	4603      	mov	r3, r0
 80086b2:	73fb      	strb	r3, [r7, #15]
          break;
 80086b4:	e018      	b.n	80086e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fc83 	bl	8008fc4 <USBD_GetConfig>
          break;
 80086be:	e013      	b.n	80086e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fcb4 	bl	8009030 <USBD_GetStatus>
          break;
 80086c8:	e00e      	b.n	80086e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80086ca:	6839      	ldr	r1, [r7, #0]
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fce3 	bl	8009098 <USBD_SetFeature>
          break;
 80086d2:	e009      	b.n	80086e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fd07 	bl	80090ea <USBD_ClrFeature>
          break;
 80086dc:	e004      	b.n	80086e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fd5e 	bl	80091a2 <USBD_CtlError>
          break;
 80086e6:	bf00      	nop
      }
      break;
 80086e8:	e004      	b.n	80086f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fd58 	bl	80091a2 <USBD_CtlError>
      break;
 80086f2:	bf00      	nop
  }

  return ret;
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop

08008700 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008716:	2b40      	cmp	r3, #64	@ 0x40
 8008718:	d005      	beq.n	8008726 <USBD_StdItfReq+0x26>
 800871a:	2b40      	cmp	r3, #64	@ 0x40
 800871c:	d852      	bhi.n	80087c4 <USBD_StdItfReq+0xc4>
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <USBD_StdItfReq+0x26>
 8008722:	2b20      	cmp	r3, #32
 8008724:	d14e      	bne.n	80087c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800872c:	b2db      	uxtb	r3, r3
 800872e:	3b01      	subs	r3, #1
 8008730:	2b02      	cmp	r3, #2
 8008732:	d840      	bhi.n	80087b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	889b      	ldrh	r3, [r3, #4]
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b01      	cmp	r3, #1
 800873c:	d836      	bhi.n	80087ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	889b      	ldrh	r3, [r3, #4]
 8008742:	b2db      	uxtb	r3, r3
 8008744:	4619      	mov	r1, r3
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f7ff fedb 	bl	8008502 <USBD_CoreFindIF>
 800874c:	4603      	mov	r3, r0
 800874e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008750:	7bbb      	ldrb	r3, [r7, #14]
 8008752:	2bff      	cmp	r3, #255	@ 0xff
 8008754:	d01d      	beq.n	8008792 <USBD_StdItfReq+0x92>
 8008756:	7bbb      	ldrb	r3, [r7, #14]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d11a      	bne.n	8008792 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800875c:	7bba      	ldrb	r2, [r7, #14]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	32ae      	adds	r2, #174	@ 0xae
 8008762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00f      	beq.n	800878c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800876c:	7bba      	ldrb	r2, [r7, #14]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008774:	7bba      	ldrb	r2, [r7, #14]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	32ae      	adds	r2, #174	@ 0xae
 800877a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	4798      	blx	r3
 8008786:	4603      	mov	r3, r0
 8008788:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800878a:	e004      	b.n	8008796 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800878c:	2303      	movs	r3, #3
 800878e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008790:	e001      	b.n	8008796 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008792:	2303      	movs	r3, #3
 8008794:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	88db      	ldrh	r3, [r3, #6]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d110      	bne.n	80087c0 <USBD_StdItfReq+0xc0>
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10d      	bne.n	80087c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fdd3 	bl	8009350 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80087aa:	e009      	b.n	80087c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fcf7 	bl	80091a2 <USBD_CtlError>
          break;
 80087b4:	e004      	b.n	80087c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fcf2 	bl	80091a2 <USBD_CtlError>
          break;
 80087be:	e000      	b.n	80087c2 <USBD_StdItfReq+0xc2>
          break;
 80087c0:	bf00      	nop
      }
      break;
 80087c2:	e004      	b.n	80087ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fceb 	bl	80091a2 <USBD_CtlError>
      break;
 80087cc:	bf00      	nop
  }

  return ret;
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	889b      	ldrh	r3, [r3, #4]
 80087ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80087f4:	2b40      	cmp	r3, #64	@ 0x40
 80087f6:	d007      	beq.n	8008808 <USBD_StdEPReq+0x30>
 80087f8:	2b40      	cmp	r3, #64	@ 0x40
 80087fa:	f200 817f 	bhi.w	8008afc <USBD_StdEPReq+0x324>
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d02a      	beq.n	8008858 <USBD_StdEPReq+0x80>
 8008802:	2b20      	cmp	r3, #32
 8008804:	f040 817a 	bne.w	8008afc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008808:	7bbb      	ldrb	r3, [r7, #14]
 800880a:	4619      	mov	r1, r3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f7ff fe85 	bl	800851c <USBD_CoreFindEP>
 8008812:	4603      	mov	r3, r0
 8008814:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008816:	7b7b      	ldrb	r3, [r7, #13]
 8008818:	2bff      	cmp	r3, #255	@ 0xff
 800881a:	f000 8174 	beq.w	8008b06 <USBD_StdEPReq+0x32e>
 800881e:	7b7b      	ldrb	r3, [r7, #13]
 8008820:	2b00      	cmp	r3, #0
 8008822:	f040 8170 	bne.w	8008b06 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008826:	7b7a      	ldrb	r2, [r7, #13]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800882e:	7b7a      	ldrb	r2, [r7, #13]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	32ae      	adds	r2, #174	@ 0xae
 8008834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 8163 	beq.w	8008b06 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008840:	7b7a      	ldrb	r2, [r7, #13]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	32ae      	adds	r2, #174	@ 0xae
 8008846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	4798      	blx	r3
 8008852:	4603      	mov	r3, r0
 8008854:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008856:	e156      	b.n	8008b06 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	785b      	ldrb	r3, [r3, #1]
 800885c:	2b03      	cmp	r3, #3
 800885e:	d008      	beq.n	8008872 <USBD_StdEPReq+0x9a>
 8008860:	2b03      	cmp	r3, #3
 8008862:	f300 8145 	bgt.w	8008af0 <USBD_StdEPReq+0x318>
 8008866:	2b00      	cmp	r3, #0
 8008868:	f000 809b 	beq.w	80089a2 <USBD_StdEPReq+0x1ca>
 800886c:	2b01      	cmp	r3, #1
 800886e:	d03c      	beq.n	80088ea <USBD_StdEPReq+0x112>
 8008870:	e13e      	b.n	8008af0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b02      	cmp	r3, #2
 800887c:	d002      	beq.n	8008884 <USBD_StdEPReq+0xac>
 800887e:	2b03      	cmp	r3, #3
 8008880:	d016      	beq.n	80088b0 <USBD_StdEPReq+0xd8>
 8008882:	e02c      	b.n	80088de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008884:	7bbb      	ldrb	r3, [r7, #14]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00d      	beq.n	80088a6 <USBD_StdEPReq+0xce>
 800888a:	7bbb      	ldrb	r3, [r7, #14]
 800888c:	2b80      	cmp	r3, #128	@ 0x80
 800888e:	d00a      	beq.n	80088a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008890:	7bbb      	ldrb	r3, [r7, #14]
 8008892:	4619      	mov	r1, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f004 fd61 	bl	800d35c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800889a:	2180      	movs	r1, #128	@ 0x80
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f004 fd5d 	bl	800d35c <USBD_LL_StallEP>
 80088a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088a4:	e020      	b.n	80088e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fc7a 	bl	80091a2 <USBD_CtlError>
              break;
 80088ae:	e01b      	b.n	80088e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	885b      	ldrh	r3, [r3, #2]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10e      	bne.n	80088d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80088b8:	7bbb      	ldrb	r3, [r7, #14]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00b      	beq.n	80088d6 <USBD_StdEPReq+0xfe>
 80088be:	7bbb      	ldrb	r3, [r7, #14]
 80088c0:	2b80      	cmp	r3, #128	@ 0x80
 80088c2:	d008      	beq.n	80088d6 <USBD_StdEPReq+0xfe>
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	88db      	ldrh	r3, [r3, #6]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d104      	bne.n	80088d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80088cc:	7bbb      	ldrb	r3, [r7, #14]
 80088ce:	4619      	mov	r1, r3
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f004 fd43 	bl	800d35c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fd3a 	bl	8009350 <USBD_CtlSendStatus>

              break;
 80088dc:	e004      	b.n	80088e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fc5e 	bl	80091a2 <USBD_CtlError>
              break;
 80088e6:	bf00      	nop
          }
          break;
 80088e8:	e107      	b.n	8008afa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d002      	beq.n	80088fc <USBD_StdEPReq+0x124>
 80088f6:	2b03      	cmp	r3, #3
 80088f8:	d016      	beq.n	8008928 <USBD_StdEPReq+0x150>
 80088fa:	e04b      	b.n	8008994 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088fc:	7bbb      	ldrb	r3, [r7, #14]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00d      	beq.n	800891e <USBD_StdEPReq+0x146>
 8008902:	7bbb      	ldrb	r3, [r7, #14]
 8008904:	2b80      	cmp	r3, #128	@ 0x80
 8008906:	d00a      	beq.n	800891e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008908:	7bbb      	ldrb	r3, [r7, #14]
 800890a:	4619      	mov	r1, r3
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f004 fd25 	bl	800d35c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008912:	2180      	movs	r1, #128	@ 0x80
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f004 fd21 	bl	800d35c <USBD_LL_StallEP>
 800891a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800891c:	e040      	b.n	80089a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fc3e 	bl	80091a2 <USBD_CtlError>
              break;
 8008926:	e03b      	b.n	80089a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	885b      	ldrh	r3, [r3, #2]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d136      	bne.n	800899e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008936:	2b00      	cmp	r3, #0
 8008938:	d004      	beq.n	8008944 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f004 fd2b 	bl	800d39a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fd03 	bl	8009350 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7ff fde4 	bl	800851c <USBD_CoreFindEP>
 8008954:	4603      	mov	r3, r0
 8008956:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008958:	7b7b      	ldrb	r3, [r7, #13]
 800895a:	2bff      	cmp	r3, #255	@ 0xff
 800895c:	d01f      	beq.n	800899e <USBD_StdEPReq+0x1c6>
 800895e:	7b7b      	ldrb	r3, [r7, #13]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d11c      	bne.n	800899e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008964:	7b7a      	ldrb	r2, [r7, #13]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800896c:	7b7a      	ldrb	r2, [r7, #13]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	32ae      	adds	r2, #174	@ 0xae
 8008972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d010      	beq.n	800899e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800897c:	7b7a      	ldrb	r2, [r7, #13]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	32ae      	adds	r2, #174	@ 0xae
 8008982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	4798      	blx	r3
 800898e:	4603      	mov	r3, r0
 8008990:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008992:	e004      	b.n	800899e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fc03 	bl	80091a2 <USBD_CtlError>
              break;
 800899c:	e000      	b.n	80089a0 <USBD_StdEPReq+0x1c8>
              break;
 800899e:	bf00      	nop
          }
          break;
 80089a0:	e0ab      	b.n	8008afa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d002      	beq.n	80089b4 <USBD_StdEPReq+0x1dc>
 80089ae:	2b03      	cmp	r3, #3
 80089b0:	d032      	beq.n	8008a18 <USBD_StdEPReq+0x240>
 80089b2:	e097      	b.n	8008ae4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089b4:	7bbb      	ldrb	r3, [r7, #14]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d007      	beq.n	80089ca <USBD_StdEPReq+0x1f2>
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
 80089bc:	2b80      	cmp	r3, #128	@ 0x80
 80089be:	d004      	beq.n	80089ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fbed 	bl	80091a2 <USBD_CtlError>
                break;
 80089c8:	e091      	b.n	8008aee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	da0b      	bge.n	80089ea <USBD_StdEPReq+0x212>
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089d8:	4613      	mov	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	3310      	adds	r3, #16
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	4413      	add	r3, r2
 80089e6:	3304      	adds	r3, #4
 80089e8:	e00b      	b.n	8008a02 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089f0:	4613      	mov	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	4413      	add	r3, r2
 8008a00:	3304      	adds	r3, #4
 8008a02:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	2200      	movs	r2, #0
 8008a08:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2202      	movs	r2, #2
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fc43 	bl	800929c <USBD_CtlSendData>
              break;
 8008a16:	e06a      	b.n	8008aee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	da11      	bge.n	8008a44 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
 8008a22:	f003 020f 	and.w	r2, r3, #15
 8008a26:	6879      	ldr	r1, [r7, #4]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	440b      	add	r3, r1
 8008a32:	3324      	adds	r3, #36	@ 0x24
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d117      	bne.n	8008a6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fbb0 	bl	80091a2 <USBD_CtlError>
                  break;
 8008a42:	e054      	b.n	8008aee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a44:	7bbb      	ldrb	r3, [r7, #14]
 8008a46:	f003 020f 	and.w	r2, r3, #15
 8008a4a:	6879      	ldr	r1, [r7, #4]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4413      	add	r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	440b      	add	r3, r1
 8008a56:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d104      	bne.n	8008a6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fb9d 	bl	80091a2 <USBD_CtlError>
                  break;
 8008a68:	e041      	b.n	8008aee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	da0b      	bge.n	8008a8a <USBD_StdEPReq+0x2b2>
 8008a72:	7bbb      	ldrb	r3, [r7, #14]
 8008a74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a78:	4613      	mov	r3, r2
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	4413      	add	r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	3310      	adds	r3, #16
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	4413      	add	r3, r2
 8008a86:	3304      	adds	r3, #4
 8008a88:	e00b      	b.n	8008aa2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a8a:	7bbb      	ldrb	r3, [r7, #14]
 8008a8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a90:	4613      	mov	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	3304      	adds	r3, #4
 8008aa2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008aa4:	7bbb      	ldrb	r3, [r7, #14]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d002      	beq.n	8008ab0 <USBD_StdEPReq+0x2d8>
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	2b80      	cmp	r3, #128	@ 0x80
 8008aae:	d103      	bne.n	8008ab8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	601a      	str	r2, [r3, #0]
 8008ab6:	e00e      	b.n	8008ad6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f004 fc8b 	bl	800d3d8 <USBD_LL_IsStallEP>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d003      	beq.n	8008ad0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2201      	movs	r2, #1
 8008acc:	601a      	str	r2, [r3, #0]
 8008ace:	e002      	b.n	8008ad6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	2202      	movs	r2, #2
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 fbdd 	bl	800929c <USBD_CtlSendData>
              break;
 8008ae2:	e004      	b.n	8008aee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fb5b 	bl	80091a2 <USBD_CtlError>
              break;
 8008aec:	bf00      	nop
          }
          break;
 8008aee:	e004      	b.n	8008afa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fb55 	bl	80091a2 <USBD_CtlError>
          break;
 8008af8:	bf00      	nop
      }
      break;
 8008afa:	e005      	b.n	8008b08 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fb4f 	bl	80091a2 <USBD_CtlError>
      break;
 8008b04:	e000      	b.n	8008b08 <USBD_StdEPReq+0x330>
      break;
 8008b06:	bf00      	nop
  }

  return ret;
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
	...

08008b14 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b22:	2300      	movs	r3, #0
 8008b24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	885b      	ldrh	r3, [r3, #2]
 8008b2e:	0a1b      	lsrs	r3, r3, #8
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	3b01      	subs	r3, #1
 8008b34:	2b06      	cmp	r3, #6
 8008b36:	f200 8128 	bhi.w	8008d8a <USBD_GetDescriptor+0x276>
 8008b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b40 <USBD_GetDescriptor+0x2c>)
 8008b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b40:	08008b5d 	.word	0x08008b5d
 8008b44:	08008b75 	.word	0x08008b75
 8008b48:	08008bb5 	.word	0x08008bb5
 8008b4c:	08008d8b 	.word	0x08008d8b
 8008b50:	08008d8b 	.word	0x08008d8b
 8008b54:	08008d2b 	.word	0x08008d2b
 8008b58:	08008d57 	.word	0x08008d57
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	7c12      	ldrb	r2, [r2, #16]
 8008b68:	f107 0108 	add.w	r1, r7, #8
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	4798      	blx	r3
 8008b70:	60f8      	str	r0, [r7, #12]
      break;
 8008b72:	e112      	b.n	8008d9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	7c1b      	ldrb	r3, [r3, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10d      	bne.n	8008b98 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b84:	f107 0208 	add.w	r2, r7, #8
 8008b88:	4610      	mov	r0, r2
 8008b8a:	4798      	blx	r3
 8008b8c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3301      	adds	r3, #1
 8008b92:	2202      	movs	r2, #2
 8008b94:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008b96:	e100      	b.n	8008d9a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba0:	f107 0208 	add.w	r2, r7, #8
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	4798      	blx	r3
 8008ba8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	3301      	adds	r3, #1
 8008bae:	2202      	movs	r2, #2
 8008bb0:	701a      	strb	r2, [r3, #0]
      break;
 8008bb2:	e0f2      	b.n	8008d9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	885b      	ldrh	r3, [r3, #2]
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b05      	cmp	r3, #5
 8008bbc:	f200 80ac 	bhi.w	8008d18 <USBD_GetDescriptor+0x204>
 8008bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8008bc8 <USBD_GetDescriptor+0xb4>)
 8008bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc6:	bf00      	nop
 8008bc8:	08008be1 	.word	0x08008be1
 8008bcc:	08008c15 	.word	0x08008c15
 8008bd0:	08008c49 	.word	0x08008c49
 8008bd4:	08008c7d 	.word	0x08008c7d
 8008bd8:	08008cb1 	.word	0x08008cb1
 8008bdc:	08008ce5 	.word	0x08008ce5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00b      	beq.n	8008c04 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	7c12      	ldrb	r2, [r2, #16]
 8008bf8:	f107 0108 	add.w	r1, r7, #8
 8008bfc:	4610      	mov	r0, r2
 8008bfe:	4798      	blx	r3
 8008c00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c02:	e091      	b.n	8008d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 facb 	bl	80091a2 <USBD_CtlError>
            err++;
 8008c0c:	7afb      	ldrb	r3, [r7, #11]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	72fb      	strb	r3, [r7, #11]
          break;
 8008c12:	e089      	b.n	8008d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00b      	beq.n	8008c38 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	7c12      	ldrb	r2, [r2, #16]
 8008c2c:	f107 0108 	add.w	r1, r7, #8
 8008c30:	4610      	mov	r0, r2
 8008c32:	4798      	blx	r3
 8008c34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c36:	e077      	b.n	8008d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fab1 	bl	80091a2 <USBD_CtlError>
            err++;
 8008c40:	7afb      	ldrb	r3, [r7, #11]
 8008c42:	3301      	adds	r3, #1
 8008c44:	72fb      	strb	r3, [r7, #11]
          break;
 8008c46:	e06f      	b.n	8008d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00b      	beq.n	8008c6c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	7c12      	ldrb	r2, [r2, #16]
 8008c60:	f107 0108 	add.w	r1, r7, #8
 8008c64:	4610      	mov	r0, r2
 8008c66:	4798      	blx	r3
 8008c68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c6a:	e05d      	b.n	8008d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fa97 	bl	80091a2 <USBD_CtlError>
            err++;
 8008c74:	7afb      	ldrb	r3, [r7, #11]
 8008c76:	3301      	adds	r3, #1
 8008c78:	72fb      	strb	r3, [r7, #11]
          break;
 8008c7a:	e055      	b.n	8008d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00b      	beq.n	8008ca0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	7c12      	ldrb	r2, [r2, #16]
 8008c94:	f107 0108 	add.w	r1, r7, #8
 8008c98:	4610      	mov	r0, r2
 8008c9a:	4798      	blx	r3
 8008c9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c9e:	e043      	b.n	8008d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fa7d 	bl	80091a2 <USBD_CtlError>
            err++;
 8008ca8:	7afb      	ldrb	r3, [r7, #11]
 8008caa:	3301      	adds	r3, #1
 8008cac:	72fb      	strb	r3, [r7, #11]
          break;
 8008cae:	e03b      	b.n	8008d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cb6:	695b      	ldr	r3, [r3, #20]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00b      	beq.n	8008cd4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	7c12      	ldrb	r2, [r2, #16]
 8008cc8:	f107 0108 	add.w	r1, r7, #8
 8008ccc:	4610      	mov	r0, r2
 8008cce:	4798      	blx	r3
 8008cd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cd2:	e029      	b.n	8008d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fa63 	bl	80091a2 <USBD_CtlError>
            err++;
 8008cdc:	7afb      	ldrb	r3, [r7, #11]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ce2:	e021      	b.n	8008d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00b      	beq.n	8008d08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	7c12      	ldrb	r2, [r2, #16]
 8008cfc:	f107 0108 	add.w	r1, r7, #8
 8008d00:	4610      	mov	r0, r2
 8008d02:	4798      	blx	r3
 8008d04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d06:	e00f      	b.n	8008d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fa49 	bl	80091a2 <USBD_CtlError>
            err++;
 8008d10:	7afb      	ldrb	r3, [r7, #11]
 8008d12:	3301      	adds	r3, #1
 8008d14:	72fb      	strb	r3, [r7, #11]
          break;
 8008d16:	e007      	b.n	8008d28 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fa41 	bl	80091a2 <USBD_CtlError>
          err++;
 8008d20:	7afb      	ldrb	r3, [r7, #11]
 8008d22:	3301      	adds	r3, #1
 8008d24:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008d26:	bf00      	nop
      }
      break;
 8008d28:	e037      	b.n	8008d9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	7c1b      	ldrb	r3, [r3, #16]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d109      	bne.n	8008d46 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d3a:	f107 0208 	add.w	r2, r7, #8
 8008d3e:	4610      	mov	r0, r2
 8008d40:	4798      	blx	r3
 8008d42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d44:	e029      	b.n	8008d9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fa2a 	bl	80091a2 <USBD_CtlError>
        err++;
 8008d4e:	7afb      	ldrb	r3, [r7, #11]
 8008d50:	3301      	adds	r3, #1
 8008d52:	72fb      	strb	r3, [r7, #11]
      break;
 8008d54:	e021      	b.n	8008d9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	7c1b      	ldrb	r3, [r3, #16]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10d      	bne.n	8008d7a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d66:	f107 0208 	add.w	r2, r7, #8
 8008d6a:	4610      	mov	r0, r2
 8008d6c:	4798      	blx	r3
 8008d6e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	3301      	adds	r3, #1
 8008d74:	2207      	movs	r2, #7
 8008d76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d78:	e00f      	b.n	8008d9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fa10 	bl	80091a2 <USBD_CtlError>
        err++;
 8008d82:	7afb      	ldrb	r3, [r7, #11]
 8008d84:	3301      	adds	r3, #1
 8008d86:	72fb      	strb	r3, [r7, #11]
      break;
 8008d88:	e007      	b.n	8008d9a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fa08 	bl	80091a2 <USBD_CtlError>
      err++;
 8008d92:	7afb      	ldrb	r3, [r7, #11]
 8008d94:	3301      	adds	r3, #1
 8008d96:	72fb      	strb	r3, [r7, #11]
      break;
 8008d98:	bf00      	nop
  }

  if (err != 0U)
 8008d9a:	7afb      	ldrb	r3, [r7, #11]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d11e      	bne.n	8008dde <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	88db      	ldrh	r3, [r3, #6]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d016      	beq.n	8008dd6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008da8:	893b      	ldrh	r3, [r7, #8]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00e      	beq.n	8008dcc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	88da      	ldrh	r2, [r3, #6]
 8008db2:	893b      	ldrh	r3, [r7, #8]
 8008db4:	4293      	cmp	r3, r2
 8008db6:	bf28      	it	cs
 8008db8:	4613      	movcs	r3, r2
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008dbe:	893b      	ldrh	r3, [r7, #8]
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	68f9      	ldr	r1, [r7, #12]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fa69 	bl	800929c <USBD_CtlSendData>
 8008dca:	e009      	b.n	8008de0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008dcc:	6839      	ldr	r1, [r7, #0]
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f9e7 	bl	80091a2 <USBD_CtlError>
 8008dd4:	e004      	b.n	8008de0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 faba 	bl	8009350 <USBD_CtlSendStatus>
 8008ddc:	e000      	b.n	8008de0 <USBD_GetDescriptor+0x2cc>
    return;
 8008dde:	bf00      	nop
  }
}
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop

08008de8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	889b      	ldrh	r3, [r3, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d131      	bne.n	8008e5e <USBD_SetAddress+0x76>
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	88db      	ldrh	r3, [r3, #6]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d12d      	bne.n	8008e5e <USBD_SetAddress+0x76>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	885b      	ldrh	r3, [r3, #2]
 8008e06:	2b7f      	cmp	r3, #127	@ 0x7f
 8008e08:	d829      	bhi.n	8008e5e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	885b      	ldrh	r3, [r3, #2]
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	2b03      	cmp	r3, #3
 8008e20:	d104      	bne.n	8008e2c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008e22:	6839      	ldr	r1, [r7, #0]
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f9bc 	bl	80091a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e2a:	e01d      	b.n	8008e68 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	7bfa      	ldrb	r2, [r7, #15]
 8008e30:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e34:	7bfb      	ldrb	r3, [r7, #15]
 8008e36:	4619      	mov	r1, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f004 faf9 	bl	800d430 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fa86 	bl	8009350 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d004      	beq.n	8008e54 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2202      	movs	r2, #2
 8008e4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e52:	e009      	b.n	8008e68 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e5c:	e004      	b.n	8008e68 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e5e:	6839      	ldr	r1, [r7, #0]
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f99e 	bl	80091a2 <USBD_CtlError>
  }
}
 8008e66:	bf00      	nop
 8008e68:	bf00      	nop
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	885b      	ldrh	r3, [r3, #2]
 8008e82:	b2da      	uxtb	r2, r3
 8008e84:	4b4e      	ldr	r3, [pc, #312]	@ (8008fc0 <USBD_SetConfig+0x150>)
 8008e86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e88:	4b4d      	ldr	r3, [pc, #308]	@ (8008fc0 <USBD_SetConfig+0x150>)
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d905      	bls.n	8008e9c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f985 	bl	80091a2 <USBD_CtlError>
    return USBD_FAIL;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e08c      	b.n	8008fb6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d002      	beq.n	8008eae <USBD_SetConfig+0x3e>
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d029      	beq.n	8008f00 <USBD_SetConfig+0x90>
 8008eac:	e075      	b.n	8008f9a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008eae:	4b44      	ldr	r3, [pc, #272]	@ (8008fc0 <USBD_SetConfig+0x150>)
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d020      	beq.n	8008ef8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008eb6:	4b42      	ldr	r3, [pc, #264]	@ (8008fc0 <USBD_SetConfig+0x150>)
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ec0:	4b3f      	ldr	r3, [pc, #252]	@ (8008fc0 <USBD_SetConfig+0x150>)
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f7fe ffe3 	bl	8007e92 <USBD_SetClassConfig>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ed0:	7bfb      	ldrb	r3, [r7, #15]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d008      	beq.n	8008ee8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008ed6:	6839      	ldr	r1, [r7, #0]
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f962 	bl	80091a2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2202      	movs	r2, #2
 8008ee2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ee6:	e065      	b.n	8008fb4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fa31 	bl	8009350 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2203      	movs	r2, #3
 8008ef2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008ef6:	e05d      	b.n	8008fb4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fa29 	bl	8009350 <USBD_CtlSendStatus>
      break;
 8008efe:	e059      	b.n	8008fb4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008f00:	4b2f      	ldr	r3, [pc, #188]	@ (8008fc0 <USBD_SetConfig+0x150>)
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d112      	bne.n	8008f2e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008f10:	4b2b      	ldr	r3, [pc, #172]	@ (8008fc0 <USBD_SetConfig+0x150>)
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	461a      	mov	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f1a:	4b29      	ldr	r3, [pc, #164]	@ (8008fc0 <USBD_SetConfig+0x150>)
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7fe ffd2 	bl	8007eca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fa12 	bl	8009350 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f2c:	e042      	b.n	8008fb4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008f2e:	4b24      	ldr	r3, [pc, #144]	@ (8008fc0 <USBD_SetConfig+0x150>)
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	461a      	mov	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d02a      	beq.n	8008f92 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	4619      	mov	r1, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7fe ffc0 	bl	8007eca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8008fc0 <USBD_SetConfig+0x150>)
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f54:	4b1a      	ldr	r3, [pc, #104]	@ (8008fc0 <USBD_SetConfig+0x150>)
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7fe ff99 	bl	8007e92 <USBD_SetClassConfig>
 8008f60:	4603      	mov	r3, r0
 8008f62:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00f      	beq.n	8008f8a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008f6a:	6839      	ldr	r1, [r7, #0]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f918 	bl	80091a2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7fe ffa5 	bl	8007eca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2202      	movs	r2, #2
 8008f84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008f88:	e014      	b.n	8008fb4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 f9e0 	bl	8009350 <USBD_CtlSendStatus>
      break;
 8008f90:	e010      	b.n	8008fb4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 f9dc 	bl	8009350 <USBD_CtlSendStatus>
      break;
 8008f98:	e00c      	b.n	8008fb4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f900 	bl	80091a2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fa2:	4b07      	ldr	r3, [pc, #28]	@ (8008fc0 <USBD_SetConfig+0x150>)
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7fe ff8e 	bl	8007eca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8008fb2:	bf00      	nop
  }

  return ret;
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	200004a8 	.word	0x200004a8

08008fc4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	88db      	ldrh	r3, [r3, #6]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d004      	beq.n	8008fe0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008fd6:	6839      	ldr	r1, [r7, #0]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 f8e2 	bl	80091a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008fde:	e023      	b.n	8009028 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	dc02      	bgt.n	8008ff2 <USBD_GetConfig+0x2e>
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	dc03      	bgt.n	8008ff8 <USBD_GetConfig+0x34>
 8008ff0:	e015      	b.n	800901e <USBD_GetConfig+0x5a>
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	d00b      	beq.n	800900e <USBD_GetConfig+0x4a>
 8008ff6:	e012      	b.n	800901e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	3308      	adds	r3, #8
 8009002:	2201      	movs	r2, #1
 8009004:	4619      	mov	r1, r3
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f948 	bl	800929c <USBD_CtlSendData>
        break;
 800900c:	e00c      	b.n	8009028 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	3304      	adds	r3, #4
 8009012:	2201      	movs	r2, #1
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 f940 	bl	800929c <USBD_CtlSendData>
        break;
 800901c:	e004      	b.n	8009028 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 f8be 	bl	80091a2 <USBD_CtlError>
        break;
 8009026:	bf00      	nop
}
 8009028:	bf00      	nop
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009040:	b2db      	uxtb	r3, r3
 8009042:	3b01      	subs	r3, #1
 8009044:	2b02      	cmp	r3, #2
 8009046:	d81e      	bhi.n	8009086 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	88db      	ldrh	r3, [r3, #6]
 800904c:	2b02      	cmp	r3, #2
 800904e:	d004      	beq.n	800905a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f8a5 	bl	80091a2 <USBD_CtlError>
        break;
 8009058:	e01a      	b.n	8009090 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009066:	2b00      	cmp	r3, #0
 8009068:	d005      	beq.n	8009076 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	f043 0202 	orr.w	r2, r3, #2
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	330c      	adds	r3, #12
 800907a:	2202      	movs	r2, #2
 800907c:	4619      	mov	r1, r3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f90c 	bl	800929c <USBD_CtlSendData>
      break;
 8009084:	e004      	b.n	8009090 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f88a 	bl	80091a2 <USBD_CtlError>
      break;
 800908e:	bf00      	nop
  }
}
 8009090:	bf00      	nop
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	885b      	ldrh	r3, [r3, #2]
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d107      	bne.n	80090ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f94c 	bl	8009350 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80090b8:	e013      	b.n	80090e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	885b      	ldrh	r3, [r3, #2]
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d10b      	bne.n	80090da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	889b      	ldrh	r3, [r3, #4]
 80090c6:	0a1b      	lsrs	r3, r3, #8
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f93c 	bl	8009350 <USBD_CtlSendStatus>
}
 80090d8:	e003      	b.n	80090e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f860 	bl	80091a2 <USBD_CtlError>
}
 80090e2:	bf00      	nop
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b082      	sub	sp, #8
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	3b01      	subs	r3, #1
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d80b      	bhi.n	800911a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	885b      	ldrh	r3, [r3, #2]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d10c      	bne.n	8009124 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f91c 	bl	8009350 <USBD_CtlSendStatus>
      }
      break;
 8009118:	e004      	b.n	8009124 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f840 	bl	80091a2 <USBD_CtlError>
      break;
 8009122:	e000      	b.n	8009126 <USBD_ClrFeature+0x3c>
      break;
 8009124:	bf00      	nop
  }
}
 8009126:	bf00      	nop
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	781a      	ldrb	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	3301      	adds	r3, #1
 8009148:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	781a      	ldrb	r2, [r3, #0]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	3301      	adds	r3, #1
 8009156:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f7ff fa40 	bl	80085de <SWAPBYTE>
 800915e:	4603      	mov	r3, r0
 8009160:	461a      	mov	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	3301      	adds	r3, #1
 800916a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	3301      	adds	r3, #1
 8009170:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f7ff fa33 	bl	80085de <SWAPBYTE>
 8009178:	4603      	mov	r3, r0
 800917a:	461a      	mov	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	3301      	adds	r3, #1
 8009184:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	3301      	adds	r3, #1
 800918a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f7ff fa26 	bl	80085de <SWAPBYTE>
 8009192:	4603      	mov	r3, r0
 8009194:	461a      	mov	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	80da      	strh	r2, [r3, #6]
}
 800919a:	bf00      	nop
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b082      	sub	sp, #8
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
 80091aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091ac:	2180      	movs	r1, #128	@ 0x80
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f004 f8d4 	bl	800d35c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091b4:	2100      	movs	r1, #0
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f004 f8d0 	bl	800d35c <USBD_LL_StallEP>
}
 80091bc:	bf00      	nop
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d042      	beq.n	8009260 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80091de:	6938      	ldr	r0, [r7, #16]
 80091e0:	f000 f842 	bl	8009268 <USBD_GetLen>
 80091e4:	4603      	mov	r3, r0
 80091e6:	3301      	adds	r3, #1
 80091e8:	005b      	lsls	r3, r3, #1
 80091ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091ee:	d808      	bhi.n	8009202 <USBD_GetString+0x3e>
 80091f0:	6938      	ldr	r0, [r7, #16]
 80091f2:	f000 f839 	bl	8009268 <USBD_GetLen>
 80091f6:	4603      	mov	r3, r0
 80091f8:	3301      	adds	r3, #1
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	005b      	lsls	r3, r3, #1
 80091fe:	b29a      	uxth	r2, r3
 8009200:	e001      	b.n	8009206 <USBD_GetString+0x42>
 8009202:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800920a:	7dfb      	ldrb	r3, [r7, #23]
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	4413      	add	r3, r2
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	7812      	ldrb	r2, [r2, #0]
 8009214:	701a      	strb	r2, [r3, #0]
  idx++;
 8009216:	7dfb      	ldrb	r3, [r7, #23]
 8009218:	3301      	adds	r3, #1
 800921a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800921c:	7dfb      	ldrb	r3, [r7, #23]
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	4413      	add	r3, r2
 8009222:	2203      	movs	r2, #3
 8009224:	701a      	strb	r2, [r3, #0]
  idx++;
 8009226:	7dfb      	ldrb	r3, [r7, #23]
 8009228:	3301      	adds	r3, #1
 800922a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800922c:	e013      	b.n	8009256 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800922e:	7dfb      	ldrb	r3, [r7, #23]
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	4413      	add	r3, r2
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	7812      	ldrb	r2, [r2, #0]
 8009238:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	3301      	adds	r3, #1
 800923e:	613b      	str	r3, [r7, #16]
    idx++;
 8009240:	7dfb      	ldrb	r3, [r7, #23]
 8009242:	3301      	adds	r3, #1
 8009244:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009246:	7dfb      	ldrb	r3, [r7, #23]
 8009248:	68ba      	ldr	r2, [r7, #8]
 800924a:	4413      	add	r3, r2
 800924c:	2200      	movs	r2, #0
 800924e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009250:	7dfb      	ldrb	r3, [r7, #23]
 8009252:	3301      	adds	r3, #1
 8009254:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1e7      	bne.n	800922e <USBD_GetString+0x6a>
 800925e:	e000      	b.n	8009262 <USBD_GetString+0x9e>
    return;
 8009260:	bf00      	nop
  }
}
 8009262:	3718      	adds	r7, #24
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009270:	2300      	movs	r3, #0
 8009272:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009278:	e005      	b.n	8009286 <USBD_GetLen+0x1e>
  {
    len++;
 800927a:	7bfb      	ldrb	r3, [r7, #15]
 800927c:	3301      	adds	r3, #1
 800927e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	3301      	adds	r3, #1
 8009284:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1f5      	bne.n	800927a <USBD_GetLen+0x12>
  }

  return len;
 800928e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009290:	4618      	mov	r0, r3
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2202      	movs	r2, #2
 80092ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	2100      	movs	r1, #0
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f004 f8d3 	bl	800d46e <USBD_LL_Transmit>

  return USBD_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b084      	sub	sp, #16
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	60f8      	str	r0, [r7, #12]
 80092da:	60b9      	str	r1, [r7, #8]
 80092dc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	2100      	movs	r1, #0
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f004 f8c2 	bl	800d46e <USBD_LL_Transmit>

  return USBD_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2203      	movs	r2, #3
 8009304:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	2100      	movs	r1, #0
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f004 f8c6 	bl	800d4b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b084      	sub	sp, #16
 8009332:	af00      	add	r7, sp, #0
 8009334:	60f8      	str	r0, [r7, #12]
 8009336:	60b9      	str	r1, [r7, #8]
 8009338:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	2100      	movs	r1, #0
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f004 f8b5 	bl	800d4b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2204      	movs	r2, #4
 800935c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009360:	2300      	movs	r3, #0
 8009362:	2200      	movs	r2, #0
 8009364:	2100      	movs	r1, #0
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f004 f881 	bl	800d46e <USBD_LL_Transmit>

  return USBD_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b082      	sub	sp, #8
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2205      	movs	r2, #5
 8009382:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009386:	2300      	movs	r3, #0
 8009388:	2200      	movs	r2, #0
 800938a:	2100      	movs	r1, #0
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f004 f88f 	bl	800d4b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <__NVIC_SetPriority>:
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	4603      	mov	r3, r0
 80093a4:	6039      	str	r1, [r7, #0]
 80093a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80093a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	db0a      	blt.n	80093c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	490c      	ldr	r1, [pc, #48]	@ (80093e8 <__NVIC_SetPriority+0x4c>)
 80093b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093ba:	0112      	lsls	r2, r2, #4
 80093bc:	b2d2      	uxtb	r2, r2
 80093be:	440b      	add	r3, r1
 80093c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80093c4:	e00a      	b.n	80093dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	b2da      	uxtb	r2, r3
 80093ca:	4908      	ldr	r1, [pc, #32]	@ (80093ec <__NVIC_SetPriority+0x50>)
 80093cc:	79fb      	ldrb	r3, [r7, #7]
 80093ce:	f003 030f 	and.w	r3, r3, #15
 80093d2:	3b04      	subs	r3, #4
 80093d4:	0112      	lsls	r2, r2, #4
 80093d6:	b2d2      	uxtb	r2, r2
 80093d8:	440b      	add	r3, r1
 80093da:	761a      	strb	r2, [r3, #24]
}
 80093dc:	bf00      	nop
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr
 80093e8:	e000e100 	.word	0xe000e100
 80093ec:	e000ed00 	.word	0xe000ed00

080093f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80093f0:	b580      	push	{r7, lr}
 80093f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80093f4:	4b05      	ldr	r3, [pc, #20]	@ (800940c <SysTick_Handler+0x1c>)
 80093f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80093f8:	f002 f990 	bl	800b71c <xTaskGetSchedulerState>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d001      	beq.n	8009406 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009402:	f003 f931 	bl	800c668 <xPortSysTickHandler>
  }
}
 8009406:	bf00      	nop
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	e000e010 	.word	0xe000e010

08009410 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009410:	b580      	push	{r7, lr}
 8009412:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009414:	2100      	movs	r1, #0
 8009416:	f06f 0004 	mvn.w	r0, #4
 800941a:	f7ff ffbf 	bl	800939c <__NVIC_SetPriority>
#endif
}
 800941e:	bf00      	nop
 8009420:	bd80      	pop	{r7, pc}
	...

08009424 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800942a:	f3ef 8305 	mrs	r3, IPSR
 800942e:	603b      	str	r3, [r7, #0]
  return(result);
 8009430:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009432:	2b00      	cmp	r3, #0
 8009434:	d003      	beq.n	800943e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009436:	f06f 0305 	mvn.w	r3, #5
 800943a:	607b      	str	r3, [r7, #4]
 800943c:	e00c      	b.n	8009458 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800943e:	4b0a      	ldr	r3, [pc, #40]	@ (8009468 <osKernelInitialize+0x44>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d105      	bne.n	8009452 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009446:	4b08      	ldr	r3, [pc, #32]	@ (8009468 <osKernelInitialize+0x44>)
 8009448:	2201      	movs	r2, #1
 800944a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800944c:	2300      	movs	r3, #0
 800944e:	607b      	str	r3, [r7, #4]
 8009450:	e002      	b.n	8009458 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009452:	f04f 33ff 	mov.w	r3, #4294967295
 8009456:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009458:	687b      	ldr	r3, [r7, #4]
}
 800945a:	4618      	mov	r0, r3
 800945c:	370c      	adds	r7, #12
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	200004ac 	.word	0x200004ac

0800946c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009472:	f3ef 8305 	mrs	r3, IPSR
 8009476:	603b      	str	r3, [r7, #0]
  return(result);
 8009478:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800947a:	2b00      	cmp	r3, #0
 800947c:	d003      	beq.n	8009486 <osKernelStart+0x1a>
    stat = osErrorISR;
 800947e:	f06f 0305 	mvn.w	r3, #5
 8009482:	607b      	str	r3, [r7, #4]
 8009484:	e010      	b.n	80094a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009486:	4b0b      	ldr	r3, [pc, #44]	@ (80094b4 <osKernelStart+0x48>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d109      	bne.n	80094a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800948e:	f7ff ffbf 	bl	8009410 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009492:	4b08      	ldr	r3, [pc, #32]	@ (80094b4 <osKernelStart+0x48>)
 8009494:	2202      	movs	r2, #2
 8009496:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009498:	f001 fc94 	bl	800adc4 <vTaskStartScheduler>
      stat = osOK;
 800949c:	2300      	movs	r3, #0
 800949e:	607b      	str	r3, [r7, #4]
 80094a0:	e002      	b.n	80094a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80094a2:	f04f 33ff 	mov.w	r3, #4294967295
 80094a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80094a8:	687b      	ldr	r3, [r7, #4]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	200004ac 	.word	0x200004ac

080094b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b08e      	sub	sp, #56	@ 0x38
 80094bc:	af04      	add	r7, sp, #16
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80094c4:	2300      	movs	r3, #0
 80094c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094c8:	f3ef 8305 	mrs	r3, IPSR
 80094cc:	617b      	str	r3, [r7, #20]
  return(result);
 80094ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d17e      	bne.n	80095d2 <osThreadNew+0x11a>
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d07b      	beq.n	80095d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80094da:	2380      	movs	r3, #128	@ 0x80
 80094dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80094de:	2318      	movs	r3, #24
 80094e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80094e2:	2300      	movs	r3, #0
 80094e4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80094e6:	f04f 33ff 	mov.w	r3, #4294967295
 80094ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d045      	beq.n	800957e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d002      	beq.n	8009500 <osThreadNew+0x48>
        name = attr->name;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d008      	beq.n	8009526 <osThreadNew+0x6e>
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	2b38      	cmp	r3, #56	@ 0x38
 8009518:	d805      	bhi.n	8009526 <osThreadNew+0x6e>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <osThreadNew+0x72>
        return (NULL);
 8009526:	2300      	movs	r3, #0
 8009528:	e054      	b.n	80095d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d003      	beq.n	800953a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	695b      	ldr	r3, [r3, #20]
 8009536:	089b      	lsrs	r3, r3, #2
 8009538:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00e      	beq.n	8009560 <osThreadNew+0xa8>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	2ba7      	cmp	r3, #167	@ 0xa7
 8009548:	d90a      	bls.n	8009560 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800954e:	2b00      	cmp	r3, #0
 8009550:	d006      	beq.n	8009560 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d002      	beq.n	8009560 <osThreadNew+0xa8>
        mem = 1;
 800955a:	2301      	movs	r3, #1
 800955c:	61bb      	str	r3, [r7, #24]
 800955e:	e010      	b.n	8009582 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10c      	bne.n	8009582 <osThreadNew+0xca>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d108      	bne.n	8009582 <osThreadNew+0xca>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d104      	bne.n	8009582 <osThreadNew+0xca>
          mem = 0;
 8009578:	2300      	movs	r3, #0
 800957a:	61bb      	str	r3, [r7, #24]
 800957c:	e001      	b.n	8009582 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800957e:	2300      	movs	r3, #0
 8009580:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d110      	bne.n	80095aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009590:	9202      	str	r2, [sp, #8]
 8009592:	9301      	str	r3, [sp, #4]
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	6a3a      	ldr	r2, [r7, #32]
 800959c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f001 f940 	bl	800a824 <xTaskCreateStatic>
 80095a4:	4603      	mov	r3, r0
 80095a6:	613b      	str	r3, [r7, #16]
 80095a8:	e013      	b.n	80095d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d110      	bne.n	80095d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80095b0:	6a3b      	ldr	r3, [r7, #32]
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	f107 0310 	add.w	r3, r7, #16
 80095b8:	9301      	str	r3, [sp, #4]
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f001 f98e 	bl	800a8e4 <xTaskCreate>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d001      	beq.n	80095d2 <osThreadNew+0x11a>
            hTask = NULL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80095d2:	693b      	ldr	r3, [r7, #16]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3728      	adds	r7, #40	@ 0x28
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80095e2:	f002 f88b 	bl	800b6fc <xTaskGetCurrentTaskHandle>
 80095e6:	6078      	str	r0, [r7, #4]

  return (id);
 80095e8:	687b      	ldr	r3, [r7, #4]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b086      	sub	sp, #24
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095fe:	f3ef 8305 	mrs	r3, IPSR
 8009602:	60fb      	str	r3, [r7, #12]
  return(result);
 8009604:	68fb      	ldr	r3, [r7, #12]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 8009606:	2b00      	cmp	r3, #0
 8009608:	d102      	bne.n	8009610 <osThreadGetStackSpace+0x1e>
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d102      	bne.n	8009616 <osThreadGetStackSpace+0x24>
    sz = 0U;
 8009610:	2300      	movs	r3, #0
 8009612:	617b      	str	r3, [r7, #20]
 8009614:	e005      	b.n	8009622 <osThreadGetStackSpace+0x30>
  } else {
    sz = (uint32_t)(uxTaskGetStackHighWaterMark(hTask) * sizeof(StackType_t));
 8009616:	6938      	ldr	r0, [r7, #16]
 8009618:	f001 fffe 	bl	800b618 <uxTaskGetStackHighWaterMark>
 800961c:	4603      	mov	r3, r0
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	617b      	str	r3, [r7, #20]
  }

  return (sz);
 8009622:	697b      	ldr	r3, [r7, #20]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009638:	f3ef 8305 	mrs	r3, IPSR
 800963c:	60bb      	str	r3, [r7, #8]
  return(result);
 800963e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8009640:	2b00      	cmp	r3, #0
 8009642:	d003      	beq.n	800964c <osThreadTerminate+0x20>
    stat = osErrorISR;
 8009644:	f06f 0305 	mvn.w	r3, #5
 8009648:	617b      	str	r3, [r7, #20]
 800964a:	e017      	b.n	800967c <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d103      	bne.n	800965a <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8009652:	f06f 0303 	mvn.w	r3, #3
 8009656:	617b      	str	r3, [r7, #20]
 8009658:	e010      	b.n	800967c <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800965a:	6938      	ldr	r0, [r7, #16]
 800965c:	f001 fb4a 	bl	800acf4 <eTaskGetState>
 8009660:	4603      	mov	r3, r0
 8009662:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8009664:	7bfb      	ldrb	r3, [r7, #15]
 8009666:	2b04      	cmp	r3, #4
 8009668:	d005      	beq.n	8009676 <osThreadTerminate+0x4a>
      stat = osOK;
 800966a:	2300      	movs	r3, #0
 800966c:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800966e:	6938      	ldr	r0, [r7, #16]
 8009670:	f001 fa96 	bl	800aba0 <vTaskDelete>
 8009674:	e002      	b.n	800967c <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8009676:	f06f 0302 	mvn.w	r3, #2
 800967a:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800967c:	697b      	ldr	r3, [r7, #20]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3718      	adds	r7, #24
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
	...

08009688 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8009688:	b580      	push	{r7, lr}
 800968a:	b088      	sub	sp, #32
 800968c:	af02      	add	r7, sp, #8
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d002      	beq.n	80096a2 <osThreadFlagsSet+0x1a>
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	da03      	bge.n	80096aa <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80096a2:	f06f 0303 	mvn.w	r3, #3
 80096a6:	60fb      	str	r3, [r7, #12]
 80096a8:	e035      	b.n	8009716 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80096aa:	f04f 33ff 	mov.w	r3, #4294967295
 80096ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096b0:	f3ef 8305 	mrs	r3, IPSR
 80096b4:	613b      	str	r3, [r7, #16]
  return(result);
 80096b6:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d01f      	beq.n	80096fc <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80096bc:	2300      	movs	r3, #0
 80096be:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80096c0:	f107 0308 	add.w	r3, r7, #8
 80096c4:	9300      	str	r3, [sp, #0]
 80096c6:	2300      	movs	r3, #0
 80096c8:	2201      	movs	r2, #1
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	6978      	ldr	r0, [r7, #20]
 80096ce:	f002 f975 	bl	800b9bc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80096d2:	f107 030c 	add.w	r3, r7, #12
 80096d6:	2200      	movs	r2, #0
 80096d8:	9200      	str	r2, [sp, #0]
 80096da:	2200      	movs	r2, #0
 80096dc:	2100      	movs	r1, #0
 80096de:	6978      	ldr	r0, [r7, #20]
 80096e0:	f002 f96c 	bl	800b9bc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d015      	beq.n	8009716 <osThreadFlagsSet+0x8e>
 80096ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009720 <osThreadFlagsSet+0x98>)
 80096ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096f0:	601a      	str	r2, [r3, #0]
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	e00c      	b.n	8009716 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80096fc:	2300      	movs	r3, #0
 80096fe:	2201      	movs	r2, #1
 8009700:	6839      	ldr	r1, [r7, #0]
 8009702:	6978      	ldr	r0, [r7, #20]
 8009704:	f002 f898 	bl	800b838 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8009708:	f107 030c 	add.w	r3, r7, #12
 800970c:	2200      	movs	r2, #0
 800970e:	2100      	movs	r1, #0
 8009710:	6978      	ldr	r0, [r7, #20]
 8009712:	f002 f891 	bl	800b838 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8009716:	68fb      	ldr	r3, [r7, #12]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3718      	adds	r7, #24
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	e000ed04 	.word	0xe000ed04

08009724 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800972c:	f3ef 8305 	mrs	r3, IPSR
 8009730:	60bb      	str	r3, [r7, #8]
  return(result);
 8009732:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009734:	2b00      	cmp	r3, #0
 8009736:	d003      	beq.n	8009740 <osDelay+0x1c>
    stat = osErrorISR;
 8009738:	f06f 0305 	mvn.w	r3, #5
 800973c:	60fb      	str	r3, [r7, #12]
 800973e:	e007      	b.n	8009750 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009740:	2300      	movs	r3, #0
 8009742:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d002      	beq.n	8009750 <osDelay+0x2c>
      vTaskDelay(ticks);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f001 fa9c 	bl	800ac88 <vTaskDelay>
    }
  }

  return (stat);
 8009750:	68fb      	ldr	r3, [r7, #12]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800975a:	b580      	push	{r7, lr}
 800975c:	b086      	sub	sp, #24
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8009762:	2300      	movs	r3, #0
 8009764:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009766:	f3ef 8305 	mrs	r3, IPSR
 800976a:	60fb      	str	r3, [r7, #12]
  return(result);
 800976c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800976e:	2b00      	cmp	r3, #0
 8009770:	d12d      	bne.n	80097ce <osEventFlagsNew+0x74>
    mem = -1;
 8009772:	f04f 33ff 	mov.w	r3, #4294967295
 8009776:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d015      	beq.n	80097aa <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d006      	beq.n	8009794 <osEventFlagsNew+0x3a>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	2b1f      	cmp	r3, #31
 800978c:	d902      	bls.n	8009794 <osEventFlagsNew+0x3a>
        mem = 1;
 800978e:	2301      	movs	r3, #1
 8009790:	613b      	str	r3, [r7, #16]
 8009792:	e00c      	b.n	80097ae <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d108      	bne.n	80097ae <osEventFlagsNew+0x54>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d104      	bne.n	80097ae <osEventFlagsNew+0x54>
          mem = 0;
 80097a4:	2300      	movs	r3, #0
 80097a6:	613b      	str	r3, [r7, #16]
 80097a8:	e001      	b.n	80097ae <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d106      	bne.n	80097c2 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	4618      	mov	r0, r3
 80097ba:	f000 f973 	bl	8009aa4 <xEventGroupCreateStatic>
 80097be:	6178      	str	r0, [r7, #20]
 80097c0:	e005      	b.n	80097ce <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d102      	bne.n	80097ce <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80097c8:	f000 f9a5 	bl	8009b16 <xEventGroupCreate>
 80097cc:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80097ce:	697b      	ldr	r3, [r7, #20]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3718      	adds	r7, #24
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80097d8:	b580      	push	{r7, lr}
 80097da:	b08a      	sub	sp, #40	@ 0x28
 80097dc:	af02      	add	r7, sp, #8
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80097e4:	2300      	movs	r3, #0
 80097e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097e8:	f3ef 8305 	mrs	r3, IPSR
 80097ec:	613b      	str	r3, [r7, #16]
  return(result);
 80097ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d15f      	bne.n	80098b4 <osMessageQueueNew+0xdc>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d05c      	beq.n	80098b4 <osMessageQueueNew+0xdc>
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d059      	beq.n	80098b4 <osMessageQueueNew+0xdc>
    mem = -1;
 8009800:	f04f 33ff 	mov.w	r3, #4294967295
 8009804:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d029      	beq.n	8009860 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d012      	beq.n	800983a <osMessageQueueNew+0x62>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	2b4f      	cmp	r3, #79	@ 0x4f
 800981a:	d90e      	bls.n	800983a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00a      	beq.n	800983a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	695a      	ldr	r2, [r3, #20]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	68b9      	ldr	r1, [r7, #8]
 800982c:	fb01 f303 	mul.w	r3, r1, r3
 8009830:	429a      	cmp	r2, r3
 8009832:	d302      	bcc.n	800983a <osMessageQueueNew+0x62>
        mem = 1;
 8009834:	2301      	movs	r3, #1
 8009836:	61bb      	str	r3, [r7, #24]
 8009838:	e014      	b.n	8009864 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d110      	bne.n	8009864 <osMessageQueueNew+0x8c>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d10c      	bne.n	8009864 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800984e:	2b00      	cmp	r3, #0
 8009850:	d108      	bne.n	8009864 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d104      	bne.n	8009864 <osMessageQueueNew+0x8c>
          mem = 0;
 800985a:	2300      	movs	r3, #0
 800985c:	61bb      	str	r3, [r7, #24]
 800985e:	e001      	b.n	8009864 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009860:	2300      	movs	r3, #0
 8009862:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	2b01      	cmp	r3, #1
 8009868:	d10b      	bne.n	8009882 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	691a      	ldr	r2, [r3, #16]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	2100      	movs	r1, #0
 8009874:	9100      	str	r1, [sp, #0]
 8009876:	68b9      	ldr	r1, [r7, #8]
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f000 fa85 	bl	8009d88 <xQueueGenericCreateStatic>
 800987e:	61f8      	str	r0, [r7, #28]
 8009880:	e008      	b.n	8009894 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d105      	bne.n	8009894 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009888:	2200      	movs	r2, #0
 800988a:	68b9      	ldr	r1, [r7, #8]
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f000 faf8 	bl	8009e82 <xQueueGenericCreate>
 8009892:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00c      	beq.n	80098b4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d003      	beq.n	80098a8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	617b      	str	r3, [r7, #20]
 80098a6:	e001      	b.n	80098ac <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80098a8:	2300      	movs	r3, #0
 80098aa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80098ac:	6979      	ldr	r1, [r7, #20]
 80098ae:	69f8      	ldr	r0, [r7, #28]
 80098b0:	f000 ff5a 	bl	800a768 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80098b4:	69fb      	ldr	r3, [r7, #28]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3720      	adds	r7, #32
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
	...

080098c0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b088      	sub	sp, #32
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	603b      	str	r3, [r7, #0]
 80098cc:	4613      	mov	r3, r2
 80098ce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098d8:	f3ef 8305 	mrs	r3, IPSR
 80098dc:	617b      	str	r3, [r7, #20]
  return(result);
 80098de:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d028      	beq.n	8009936 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d005      	beq.n	80098f6 <osMessageQueuePut+0x36>
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d002      	beq.n	80098f6 <osMessageQueuePut+0x36>
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d003      	beq.n	80098fe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80098f6:	f06f 0303 	mvn.w	r3, #3
 80098fa:	61fb      	str	r3, [r7, #28]
 80098fc:	e038      	b.n	8009970 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80098fe:	2300      	movs	r3, #0
 8009900:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009902:	f107 0210 	add.w	r2, r7, #16
 8009906:	2300      	movs	r3, #0
 8009908:	68b9      	ldr	r1, [r7, #8]
 800990a:	69b8      	ldr	r0, [r7, #24]
 800990c:	f000 fc1a 	bl	800a144 <xQueueGenericSendFromISR>
 8009910:	4603      	mov	r3, r0
 8009912:	2b01      	cmp	r3, #1
 8009914:	d003      	beq.n	800991e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009916:	f06f 0302 	mvn.w	r3, #2
 800991a:	61fb      	str	r3, [r7, #28]
 800991c:	e028      	b.n	8009970 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d025      	beq.n	8009970 <osMessageQueuePut+0xb0>
 8009924:	4b15      	ldr	r3, [pc, #84]	@ (800997c <osMessageQueuePut+0xbc>)
 8009926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800992a:	601a      	str	r2, [r3, #0]
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	e01c      	b.n	8009970 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d002      	beq.n	8009942 <osMessageQueuePut+0x82>
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d103      	bne.n	800994a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009942:	f06f 0303 	mvn.w	r3, #3
 8009946:	61fb      	str	r3, [r7, #28]
 8009948:	e012      	b.n	8009970 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800994a:	2300      	movs	r3, #0
 800994c:	683a      	ldr	r2, [r7, #0]
 800994e:	68b9      	ldr	r1, [r7, #8]
 8009950:	69b8      	ldr	r0, [r7, #24]
 8009952:	f000 faf5 	bl	8009f40 <xQueueGenericSend>
 8009956:	4603      	mov	r3, r0
 8009958:	2b01      	cmp	r3, #1
 800995a:	d009      	beq.n	8009970 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d003      	beq.n	800996a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009962:	f06f 0301 	mvn.w	r3, #1
 8009966:	61fb      	str	r3, [r7, #28]
 8009968:	e002      	b.n	8009970 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800996a:	f06f 0302 	mvn.w	r3, #2
 800996e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009970:	69fb      	ldr	r3, [r7, #28]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3720      	adds	r7, #32
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	e000ed04 	.word	0xe000ed04

08009980 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009980:	b580      	push	{r7, lr}
 8009982:	b088      	sub	sp, #32
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
 800998c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009992:	2300      	movs	r3, #0
 8009994:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009996:	f3ef 8305 	mrs	r3, IPSR
 800999a:	617b      	str	r3, [r7, #20]
  return(result);
 800999c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d028      	beq.n	80099f4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d005      	beq.n	80099b4 <osMessageQueueGet+0x34>
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d002      	beq.n	80099b4 <osMessageQueueGet+0x34>
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d003      	beq.n	80099bc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80099b4:	f06f 0303 	mvn.w	r3, #3
 80099b8:	61fb      	str	r3, [r7, #28]
 80099ba:	e037      	b.n	8009a2c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80099bc:	2300      	movs	r3, #0
 80099be:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80099c0:	f107 0310 	add.w	r3, r7, #16
 80099c4:	461a      	mov	r2, r3
 80099c6:	68b9      	ldr	r1, [r7, #8]
 80099c8:	69b8      	ldr	r0, [r7, #24]
 80099ca:	f000 fd3b 	bl	800a444 <xQueueReceiveFromISR>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d003      	beq.n	80099dc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80099d4:	f06f 0302 	mvn.w	r3, #2
 80099d8:	61fb      	str	r3, [r7, #28]
 80099da:	e027      	b.n	8009a2c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d024      	beq.n	8009a2c <osMessageQueueGet+0xac>
 80099e2:	4b15      	ldr	r3, [pc, #84]	@ (8009a38 <osMessageQueueGet+0xb8>)
 80099e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099e8:	601a      	str	r2, [r3, #0]
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	f3bf 8f6f 	isb	sy
 80099f2:	e01b      	b.n	8009a2c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d002      	beq.n	8009a00 <osMessageQueueGet+0x80>
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d103      	bne.n	8009a08 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009a00:	f06f 0303 	mvn.w	r3, #3
 8009a04:	61fb      	str	r3, [r7, #28]
 8009a06:	e011      	b.n	8009a2c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009a08:	683a      	ldr	r2, [r7, #0]
 8009a0a:	68b9      	ldr	r1, [r7, #8]
 8009a0c:	69b8      	ldr	r0, [r7, #24]
 8009a0e:	f000 fc37 	bl	800a280 <xQueueReceive>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d009      	beq.n	8009a2c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009a1e:	f06f 0301 	mvn.w	r3, #1
 8009a22:	61fb      	str	r3, [r7, #28]
 8009a24:	e002      	b.n	8009a2c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009a26:	f06f 0302 	mvn.w	r3, #2
 8009a2a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009a2c:	69fb      	ldr	r3, [r7, #28]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3720      	adds	r7, #32
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	e000ed04 	.word	0xe000ed04

08009a3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	4a07      	ldr	r2, [pc, #28]	@ (8009a68 <vApplicationGetIdleTaskMemory+0x2c>)
 8009a4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	4a06      	ldr	r2, [pc, #24]	@ (8009a6c <vApplicationGetIdleTaskMemory+0x30>)
 8009a52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2280      	movs	r2, #128	@ 0x80
 8009a58:	601a      	str	r2, [r3, #0]
}
 8009a5a:	bf00      	nop
 8009a5c:	3714      	adds	r7, #20
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	200004b0 	.word	0x200004b0
 8009a6c:	20000558 	.word	0x20000558

08009a70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	4a07      	ldr	r2, [pc, #28]	@ (8009a9c <vApplicationGetTimerTaskMemory+0x2c>)
 8009a80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	4a06      	ldr	r2, [pc, #24]	@ (8009aa0 <vApplicationGetTimerTaskMemory+0x30>)
 8009a86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a8e:	601a      	str	r2, [r3, #0]
}
 8009a90:	bf00      	nop
 8009a92:	3714      	adds	r7, #20
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	20000758 	.word	0x20000758
 8009aa0:	20000800 	.word	0x20000800

08009aa4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b086      	sub	sp, #24
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10b      	bne.n	8009aca <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009ac4:	bf00      	nop
 8009ac6:	bf00      	nop
 8009ac8:	e7fd      	b.n	8009ac6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8009aca:	2320      	movs	r3, #32
 8009acc:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	2b20      	cmp	r3, #32
 8009ad2:	d00b      	beq.n	8009aec <xEventGroupCreateStatic+0x48>
	__asm volatile
 8009ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	60fb      	str	r3, [r7, #12]
}
 8009ae6:	bf00      	nop
 8009ae8:	bf00      	nop
 8009aea:	e7fd      	b.n	8009ae8 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00a      	beq.n	8009b0c <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	2200      	movs	r2, #0
 8009afa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	3304      	adds	r3, #4
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 f822 	bl	8009b4a <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8009b0c:	697b      	ldr	r3, [r7, #20]
	}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3718      	adds	r7, #24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b082      	sub	sp, #8
 8009b1a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8009b1c:	2020      	movs	r0, #32
 8009b1e:	f002 fe35 	bl	800c78c <pvPortMalloc>
 8009b22:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00a      	beq.n	8009b40 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3304      	adds	r3, #4
 8009b34:	4618      	mov	r0, r3
 8009b36:	f000 f808 	bl	8009b4a <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8009b40:	687b      	ldr	r3, [r7, #4]
	}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b4a:	b480      	push	{r7}
 8009b4c:	b083      	sub	sp, #12
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f103 0208 	add.w	r2, r3, #8
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b62:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f103 0208 	add.w	r2, r3, #8
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f103 0208 	add.w	r2, r3, #8
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b7e:	bf00      	nop
 8009b80:	370c      	adds	r7, #12
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr

08009b8a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b8a:	b480      	push	{r7}
 8009b8c:	b083      	sub	sp, #12
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	689a      	ldr	r2, [r3, #8]
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	683a      	ldr	r2, [r7, #0]
 8009bc8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	683a      	ldr	r2, [r7, #0]
 8009bce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	1c5a      	adds	r2, r3, #1
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	601a      	str	r2, [r3, #0]
}
 8009be0:	bf00      	nop
 8009be2:	3714      	adds	r7, #20
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c02:	d103      	bne.n	8009c0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	60fb      	str	r3, [r7, #12]
 8009c0a:	e00c      	b.n	8009c26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	3308      	adds	r3, #8
 8009c10:	60fb      	str	r3, [r7, #12]
 8009c12:	e002      	b.n	8009c1a <vListInsert+0x2e>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	60fb      	str	r3, [r7, #12]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d2f6      	bcs.n	8009c14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	683a      	ldr	r2, [r7, #0]
 8009c40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	1c5a      	adds	r2, r3, #1
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	601a      	str	r2, [r3, #0]
}
 8009c52:	bf00      	nop
 8009c54:	3714      	adds	r7, #20
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr

08009c5e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c5e:	b480      	push	{r7}
 8009c60:	b085      	sub	sp, #20
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	6892      	ldr	r2, [r2, #8]
 8009c74:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	6852      	ldr	r2, [r2, #4]
 8009c7e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d103      	bne.n	8009c92 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	689a      	ldr	r2, [r3, #8]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	1e5a      	subs	r2, r3, #1
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
	...

08009cb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d10b      	bne.n	8009ce0 <xQueueGenericReset+0x2c>
	__asm volatile
 8009cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ccc:	f383 8811 	msr	BASEPRI, r3
 8009cd0:	f3bf 8f6f 	isb	sy
 8009cd4:	f3bf 8f4f 	dsb	sy
 8009cd8:	60bb      	str	r3, [r7, #8]
}
 8009cda:	bf00      	nop
 8009cdc:	bf00      	nop
 8009cde:	e7fd      	b.n	8009cdc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009ce0:	f002 fc32 	bl	800c548 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cec:	68f9      	ldr	r1, [r7, #12]
 8009cee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009cf0:	fb01 f303 	mul.w	r3, r1, r3
 8009cf4:	441a      	add	r2, r3
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d10:	3b01      	subs	r3, #1
 8009d12:	68f9      	ldr	r1, [r7, #12]
 8009d14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009d16:	fb01 f303 	mul.w	r3, r1, r3
 8009d1a:	441a      	add	r2, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	22ff      	movs	r2, #255	@ 0xff
 8009d24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	22ff      	movs	r2, #255	@ 0xff
 8009d2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d114      	bne.n	8009d60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d01a      	beq.n	8009d74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	3310      	adds	r3, #16
 8009d42:	4618      	mov	r0, r3
 8009d44:	f001 fadc 	bl	800b300 <xTaskRemoveFromEventList>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d012      	beq.n	8009d74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8009d84 <xQueueGenericReset+0xd0>)
 8009d50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d54:	601a      	str	r2, [r3, #0]
 8009d56:	f3bf 8f4f 	dsb	sy
 8009d5a:	f3bf 8f6f 	isb	sy
 8009d5e:	e009      	b.n	8009d74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	3310      	adds	r3, #16
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7ff fef0 	bl	8009b4a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	3324      	adds	r3, #36	@ 0x24
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7ff feeb 	bl	8009b4a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d74:	f002 fc1a 	bl	800c5ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d78:	2301      	movs	r3, #1
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	e000ed04 	.word	0xe000ed04

08009d88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b08e      	sub	sp, #56	@ 0x38
 8009d8c:	af02      	add	r7, sp, #8
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
 8009d94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10b      	bne.n	8009db4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009dae:	bf00      	nop
 8009db0:	bf00      	nop
 8009db2:	e7fd      	b.n	8009db0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10b      	bne.n	8009dd2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dbe:	f383 8811 	msr	BASEPRI, r3
 8009dc2:	f3bf 8f6f 	isb	sy
 8009dc6:	f3bf 8f4f 	dsb	sy
 8009dca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009dcc:	bf00      	nop
 8009dce:	bf00      	nop
 8009dd0:	e7fd      	b.n	8009dce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d002      	beq.n	8009dde <xQueueGenericCreateStatic+0x56>
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d001      	beq.n	8009de2 <xQueueGenericCreateStatic+0x5a>
 8009dde:	2301      	movs	r3, #1
 8009de0:	e000      	b.n	8009de4 <xQueueGenericCreateStatic+0x5c>
 8009de2:	2300      	movs	r3, #0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10b      	bne.n	8009e00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	623b      	str	r3, [r7, #32]
}
 8009dfa:	bf00      	nop
 8009dfc:	bf00      	nop
 8009dfe:	e7fd      	b.n	8009dfc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d102      	bne.n	8009e0c <xQueueGenericCreateStatic+0x84>
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d101      	bne.n	8009e10 <xQueueGenericCreateStatic+0x88>
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e000      	b.n	8009e12 <xQueueGenericCreateStatic+0x8a>
 8009e10:	2300      	movs	r3, #0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10b      	bne.n	8009e2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	61fb      	str	r3, [r7, #28]
}
 8009e28:	bf00      	nop
 8009e2a:	bf00      	nop
 8009e2c:	e7fd      	b.n	8009e2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e2e:	2350      	movs	r3, #80	@ 0x50
 8009e30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	2b50      	cmp	r3, #80	@ 0x50
 8009e36:	d00b      	beq.n	8009e50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e3c:	f383 8811 	msr	BASEPRI, r3
 8009e40:	f3bf 8f6f 	isb	sy
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	61bb      	str	r3, [r7, #24]
}
 8009e4a:	bf00      	nop
 8009e4c:	bf00      	nop
 8009e4e:	e7fd      	b.n	8009e4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009e50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00d      	beq.n	8009e78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e6a:	9300      	str	r3, [sp, #0]
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	68b9      	ldr	r1, [r7, #8]
 8009e72:	68f8      	ldr	r0, [r7, #12]
 8009e74:	f000 f840 	bl	8009ef8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3730      	adds	r7, #48	@ 0x30
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b08a      	sub	sp, #40	@ 0x28
 8009e86:	af02      	add	r7, sp, #8
 8009e88:	60f8      	str	r0, [r7, #12]
 8009e8a:	60b9      	str	r1, [r7, #8]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10b      	bne.n	8009eae <xQueueGenericCreate+0x2c>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	613b      	str	r3, [r7, #16]
}
 8009ea8:	bf00      	nop
 8009eaa:	bf00      	nop
 8009eac:	e7fd      	b.n	8009eaa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	fb02 f303 	mul.w	r3, r2, r3
 8009eb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	3350      	adds	r3, #80	@ 0x50
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f002 fc65 	bl	800c78c <pvPortMalloc>
 8009ec2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d011      	beq.n	8009eee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	3350      	adds	r3, #80	@ 0x50
 8009ed2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009edc:	79fa      	ldrb	r2, [r7, #7]
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	9300      	str	r3, [sp, #0]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	697a      	ldr	r2, [r7, #20]
 8009ee6:	68b9      	ldr	r1, [r7, #8]
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f000 f805 	bl	8009ef8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009eee:	69bb      	ldr	r3, [r7, #24]
	}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3720      	adds	r7, #32
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
 8009f04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d103      	bne.n	8009f14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	69ba      	ldr	r2, [r7, #24]
 8009f10:	601a      	str	r2, [r3, #0]
 8009f12:	e002      	b.n	8009f1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f26:	2101      	movs	r1, #1
 8009f28:	69b8      	ldr	r0, [r7, #24]
 8009f2a:	f7ff fec3 	bl	8009cb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	78fa      	ldrb	r2, [r7, #3]
 8009f32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f36:	bf00      	nop
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
	...

08009f40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b08e      	sub	sp, #56	@ 0x38
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]
 8009f4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10b      	bne.n	8009f74 <xQueueGenericSend+0x34>
	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f6e:	bf00      	nop
 8009f70:	bf00      	nop
 8009f72:	e7fd      	b.n	8009f70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d103      	bne.n	8009f82 <xQueueGenericSend+0x42>
 8009f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d101      	bne.n	8009f86 <xQueueGenericSend+0x46>
 8009f82:	2301      	movs	r3, #1
 8009f84:	e000      	b.n	8009f88 <xQueueGenericSend+0x48>
 8009f86:	2300      	movs	r3, #0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d10b      	bne.n	8009fa4 <xQueueGenericSend+0x64>
	__asm volatile
 8009f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f90:	f383 8811 	msr	BASEPRI, r3
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f9e:	bf00      	nop
 8009fa0:	bf00      	nop
 8009fa2:	e7fd      	b.n	8009fa0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d103      	bne.n	8009fb2 <xQueueGenericSend+0x72>
 8009faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d101      	bne.n	8009fb6 <xQueueGenericSend+0x76>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e000      	b.n	8009fb8 <xQueueGenericSend+0x78>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d10b      	bne.n	8009fd4 <xQueueGenericSend+0x94>
	__asm volatile
 8009fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc0:	f383 8811 	msr	BASEPRI, r3
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	623b      	str	r3, [r7, #32]
}
 8009fce:	bf00      	nop
 8009fd0:	bf00      	nop
 8009fd2:	e7fd      	b.n	8009fd0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fd4:	f001 fba2 	bl	800b71c <xTaskGetSchedulerState>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d102      	bne.n	8009fe4 <xQueueGenericSend+0xa4>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d101      	bne.n	8009fe8 <xQueueGenericSend+0xa8>
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e000      	b.n	8009fea <xQueueGenericSend+0xaa>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10b      	bne.n	800a006 <xQueueGenericSend+0xc6>
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	61fb      	str	r3, [r7, #28]
}
 800a000:	bf00      	nop
 800a002:	bf00      	nop
 800a004:	e7fd      	b.n	800a002 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a006:	f002 fa9f 	bl	800c548 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a012:	429a      	cmp	r2, r3
 800a014:	d302      	bcc.n	800a01c <xQueueGenericSend+0xdc>
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d129      	bne.n	800a070 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a01c:	683a      	ldr	r2, [r7, #0]
 800a01e:	68b9      	ldr	r1, [r7, #8]
 800a020:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a022:	f000 fa91 	bl	800a548 <prvCopyDataToQueue>
 800a026:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d010      	beq.n	800a052 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a032:	3324      	adds	r3, #36	@ 0x24
 800a034:	4618      	mov	r0, r3
 800a036:	f001 f963 	bl	800b300 <xTaskRemoveFromEventList>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d013      	beq.n	800a068 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a040:	4b3f      	ldr	r3, [pc, #252]	@ (800a140 <xQueueGenericSend+0x200>)
 800a042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a046:	601a      	str	r2, [r3, #0]
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	e00a      	b.n	800a068 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a054:	2b00      	cmp	r3, #0
 800a056:	d007      	beq.n	800a068 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a058:	4b39      	ldr	r3, [pc, #228]	@ (800a140 <xQueueGenericSend+0x200>)
 800a05a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a05e:	601a      	str	r2, [r3, #0]
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a068:	f002 faa0 	bl	800c5ac <vPortExitCritical>
				return pdPASS;
 800a06c:	2301      	movs	r3, #1
 800a06e:	e063      	b.n	800a138 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d103      	bne.n	800a07e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a076:	f002 fa99 	bl	800c5ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a07a:	2300      	movs	r3, #0
 800a07c:	e05c      	b.n	800a138 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a07e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a080:	2b00      	cmp	r3, #0
 800a082:	d106      	bne.n	800a092 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a084:	f107 0314 	add.w	r3, r7, #20
 800a088:	4618      	mov	r0, r3
 800a08a:	f001 f99d 	bl	800b3c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a08e:	2301      	movs	r3, #1
 800a090:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a092:	f002 fa8b 	bl	800c5ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a096:	f000 ff05 	bl	800aea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a09a:	f002 fa55 	bl	800c548 <vPortEnterCritical>
 800a09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0a4:	b25b      	sxtb	r3, r3
 800a0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0aa:	d103      	bne.n	800a0b4 <xQueueGenericSend+0x174>
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0ba:	b25b      	sxtb	r3, r3
 800a0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c0:	d103      	bne.n	800a0ca <xQueueGenericSend+0x18a>
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0ca:	f002 fa6f 	bl	800c5ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0ce:	1d3a      	adds	r2, r7, #4
 800a0d0:	f107 0314 	add.w	r3, r7, #20
 800a0d4:	4611      	mov	r1, r2
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f001 f98c 	bl	800b3f4 <xTaskCheckForTimeOut>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d124      	bne.n	800a12c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a0e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0e4:	f000 fb28 	bl	800a738 <prvIsQueueFull>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d018      	beq.n	800a120 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f0:	3310      	adds	r3, #16
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	4611      	mov	r1, r2
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f001 f8b0 	bl	800b25c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a0fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0fe:	f000 fab3 	bl	800a668 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a102:	f000 fedd 	bl	800aec0 <xTaskResumeAll>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f47f af7c 	bne.w	800a006 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a10e:	4b0c      	ldr	r3, [pc, #48]	@ (800a140 <xQueueGenericSend+0x200>)
 800a110:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a114:	601a      	str	r2, [r3, #0]
 800a116:	f3bf 8f4f 	dsb	sy
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	e772      	b.n	800a006 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a120:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a122:	f000 faa1 	bl	800a668 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a126:	f000 fecb 	bl	800aec0 <xTaskResumeAll>
 800a12a:	e76c      	b.n	800a006 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a12c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a12e:	f000 fa9b 	bl	800a668 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a132:	f000 fec5 	bl	800aec0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a136:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3738      	adds	r7, #56	@ 0x38
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	e000ed04 	.word	0xe000ed04

0800a144 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b090      	sub	sp, #64	@ 0x40
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
 800a150:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10b      	bne.n	800a174 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a160:	f383 8811 	msr	BASEPRI, r3
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a16e:	bf00      	nop
 800a170:	bf00      	nop
 800a172:	e7fd      	b.n	800a170 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d103      	bne.n	800a182 <xQueueGenericSendFromISR+0x3e>
 800a17a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d101      	bne.n	800a186 <xQueueGenericSendFromISR+0x42>
 800a182:	2301      	movs	r3, #1
 800a184:	e000      	b.n	800a188 <xQueueGenericSendFromISR+0x44>
 800a186:	2300      	movs	r3, #0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10b      	bne.n	800a1a4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a18c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a19e:	bf00      	nop
 800a1a0:	bf00      	nop
 800a1a2:	e7fd      	b.n	800a1a0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d103      	bne.n	800a1b2 <xQueueGenericSendFromISR+0x6e>
 800a1aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d101      	bne.n	800a1b6 <xQueueGenericSendFromISR+0x72>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e000      	b.n	800a1b8 <xQueueGenericSendFromISR+0x74>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10b      	bne.n	800a1d4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c0:	f383 8811 	msr	BASEPRI, r3
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	623b      	str	r3, [r7, #32]
}
 800a1ce:	bf00      	nop
 800a1d0:	bf00      	nop
 800a1d2:	e7fd      	b.n	800a1d0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1d4:	f002 fa98 	bl	800c708 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a1d8:	f3ef 8211 	mrs	r2, BASEPRI
 800a1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e0:	f383 8811 	msr	BASEPRI, r3
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	61fa      	str	r2, [r7, #28]
 800a1ee:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a1f0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1f2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d302      	bcc.n	800a206 <xQueueGenericSendFromISR+0xc2>
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	2b02      	cmp	r3, #2
 800a204:	d12f      	bne.n	800a266 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a208:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a20c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a214:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	68b9      	ldr	r1, [r7, #8]
 800a21a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a21c:	f000 f994 	bl	800a548 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a220:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a224:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a228:	d112      	bne.n	800a250 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a22c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d016      	beq.n	800a260 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a234:	3324      	adds	r3, #36	@ 0x24
 800a236:	4618      	mov	r0, r3
 800a238:	f001 f862 	bl	800b300 <xTaskRemoveFromEventList>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00e      	beq.n	800a260 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00b      	beq.n	800a260 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	601a      	str	r2, [r3, #0]
 800a24e:	e007      	b.n	800a260 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a250:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a254:	3301      	adds	r3, #1
 800a256:	b2db      	uxtb	r3, r3
 800a258:	b25a      	sxtb	r2, r3
 800a25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a260:	2301      	movs	r3, #1
 800a262:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a264:	e001      	b.n	800a26a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a266:	2300      	movs	r3, #0
 800a268:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a26a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a26c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a274:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3740      	adds	r7, #64	@ 0x40
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b08c      	sub	sp, #48	@ 0x30
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a28c:	2300      	movs	r3, #0
 800a28e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a296:	2b00      	cmp	r3, #0
 800a298:	d10b      	bne.n	800a2b2 <xQueueReceive+0x32>
	__asm volatile
 800a29a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a29e:	f383 8811 	msr	BASEPRI, r3
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	623b      	str	r3, [r7, #32]
}
 800a2ac:	bf00      	nop
 800a2ae:	bf00      	nop
 800a2b0:	e7fd      	b.n	800a2ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d103      	bne.n	800a2c0 <xQueueReceive+0x40>
 800a2b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d101      	bne.n	800a2c4 <xQueueReceive+0x44>
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e000      	b.n	800a2c6 <xQueueReceive+0x46>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10b      	bne.n	800a2e2 <xQueueReceive+0x62>
	__asm volatile
 800a2ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ce:	f383 8811 	msr	BASEPRI, r3
 800a2d2:	f3bf 8f6f 	isb	sy
 800a2d6:	f3bf 8f4f 	dsb	sy
 800a2da:	61fb      	str	r3, [r7, #28]
}
 800a2dc:	bf00      	nop
 800a2de:	bf00      	nop
 800a2e0:	e7fd      	b.n	800a2de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2e2:	f001 fa1b 	bl	800b71c <xTaskGetSchedulerState>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d102      	bne.n	800a2f2 <xQueueReceive+0x72>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d101      	bne.n	800a2f6 <xQueueReceive+0x76>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e000      	b.n	800a2f8 <xQueueReceive+0x78>
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d10b      	bne.n	800a314 <xQueueReceive+0x94>
	__asm volatile
 800a2fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a300:	f383 8811 	msr	BASEPRI, r3
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	61bb      	str	r3, [r7, #24]
}
 800a30e:	bf00      	nop
 800a310:	bf00      	nop
 800a312:	e7fd      	b.n	800a310 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a314:	f002 f918 	bl	800c548 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a31a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a31c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a320:	2b00      	cmp	r3, #0
 800a322:	d01f      	beq.n	800a364 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a324:	68b9      	ldr	r1, [r7, #8]
 800a326:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a328:	f000 f978 	bl	800a61c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32e:	1e5a      	subs	r2, r3, #1
 800a330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a332:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00f      	beq.n	800a35c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a33e:	3310      	adds	r3, #16
 800a340:	4618      	mov	r0, r3
 800a342:	f000 ffdd 	bl	800b300 <xTaskRemoveFromEventList>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d007      	beq.n	800a35c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a34c:	4b3c      	ldr	r3, [pc, #240]	@ (800a440 <xQueueReceive+0x1c0>)
 800a34e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a352:	601a      	str	r2, [r3, #0]
 800a354:	f3bf 8f4f 	dsb	sy
 800a358:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a35c:	f002 f926 	bl	800c5ac <vPortExitCritical>
				return pdPASS;
 800a360:	2301      	movs	r3, #1
 800a362:	e069      	b.n	800a438 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d103      	bne.n	800a372 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a36a:	f002 f91f 	bl	800c5ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a36e:	2300      	movs	r3, #0
 800a370:	e062      	b.n	800a438 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a374:	2b00      	cmp	r3, #0
 800a376:	d106      	bne.n	800a386 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a378:	f107 0310 	add.w	r3, r7, #16
 800a37c:	4618      	mov	r0, r3
 800a37e:	f001 f823 	bl	800b3c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a382:	2301      	movs	r3, #1
 800a384:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a386:	f002 f911 	bl	800c5ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a38a:	f000 fd8b 	bl	800aea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a38e:	f002 f8db 	bl	800c548 <vPortEnterCritical>
 800a392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a394:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a398:	b25b      	sxtb	r3, r3
 800a39a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a39e:	d103      	bne.n	800a3a8 <xQueueReceive+0x128>
 800a3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3ae:	b25b      	sxtb	r3, r3
 800a3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b4:	d103      	bne.n	800a3be <xQueueReceive+0x13e>
 800a3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3be:	f002 f8f5 	bl	800c5ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3c2:	1d3a      	adds	r2, r7, #4
 800a3c4:	f107 0310 	add.w	r3, r7, #16
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f001 f812 	bl	800b3f4 <xTaskCheckForTimeOut>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d123      	bne.n	800a41e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3d8:	f000 f998 	bl	800a70c <prvIsQueueEmpty>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d017      	beq.n	800a412 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e4:	3324      	adds	r3, #36	@ 0x24
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	4611      	mov	r1, r2
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f000 ff36 	bl	800b25c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3f2:	f000 f939 	bl	800a668 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a3f6:	f000 fd63 	bl	800aec0 <xTaskResumeAll>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d189      	bne.n	800a314 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a400:	4b0f      	ldr	r3, [pc, #60]	@ (800a440 <xQueueReceive+0x1c0>)
 800a402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a406:	601a      	str	r2, [r3, #0]
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	f3bf 8f6f 	isb	sy
 800a410:	e780      	b.n	800a314 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a412:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a414:	f000 f928 	bl	800a668 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a418:	f000 fd52 	bl	800aec0 <xTaskResumeAll>
 800a41c:	e77a      	b.n	800a314 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a41e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a420:	f000 f922 	bl	800a668 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a424:	f000 fd4c 	bl	800aec0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a428:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a42a:	f000 f96f 	bl	800a70c <prvIsQueueEmpty>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	f43f af6f 	beq.w	800a314 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a436:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3730      	adds	r7, #48	@ 0x30
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	e000ed04 	.word	0xe000ed04

0800a444 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b08e      	sub	sp, #56	@ 0x38
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a456:	2b00      	cmp	r3, #0
 800a458:	d10b      	bne.n	800a472 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a45e:	f383 8811 	msr	BASEPRI, r3
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	f3bf 8f4f 	dsb	sy
 800a46a:	623b      	str	r3, [r7, #32]
}
 800a46c:	bf00      	nop
 800a46e:	bf00      	nop
 800a470:	e7fd      	b.n	800a46e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d103      	bne.n	800a480 <xQueueReceiveFromISR+0x3c>
 800a478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <xQueueReceiveFromISR+0x40>
 800a480:	2301      	movs	r3, #1
 800a482:	e000      	b.n	800a486 <xQueueReceiveFromISR+0x42>
 800a484:	2300      	movs	r3, #0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10b      	bne.n	800a4a2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	61fb      	str	r3, [r7, #28]
}
 800a49c:	bf00      	nop
 800a49e:	bf00      	nop
 800a4a0:	e7fd      	b.n	800a49e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4a2:	f002 f931 	bl	800c708 <vPortValidateInterruptPriority>
	__asm volatile
 800a4a6:	f3ef 8211 	mrs	r2, BASEPRI
 800a4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	61ba      	str	r2, [r7, #24]
 800a4bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a4be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d02f      	beq.n	800a52e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4d8:	68b9      	ldr	r1, [r7, #8]
 800a4da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4dc:	f000 f89e 	bl	800a61c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e2:	1e5a      	subs	r2, r3, #1
 800a4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a4e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f0:	d112      	bne.n	800a518 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d016      	beq.n	800a528 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fc:	3310      	adds	r3, #16
 800a4fe:	4618      	mov	r0, r3
 800a500:	f000 fefe 	bl	800b300 <xTaskRemoveFromEventList>
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00e      	beq.n	800a528 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00b      	beq.n	800a528 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	601a      	str	r2, [r3, #0]
 800a516:	e007      	b.n	800a528 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a518:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a51c:	3301      	adds	r3, #1
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	b25a      	sxtb	r2, r3
 800a522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a524:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a528:	2301      	movs	r3, #1
 800a52a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a52c:	e001      	b.n	800a532 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a52e:	2300      	movs	r3, #0
 800a530:	637b      	str	r3, [r7, #52]	@ 0x34
 800a532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a534:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	f383 8811 	msr	BASEPRI, r3
}
 800a53c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a53e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a540:	4618      	mov	r0, r3
 800a542:	3738      	adds	r7, #56	@ 0x38
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b086      	sub	sp, #24
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a554:	2300      	movs	r3, #0
 800a556:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a55c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a562:	2b00      	cmp	r3, #0
 800a564:	d10d      	bne.n	800a582 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d14d      	bne.n	800a60a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	4618      	mov	r0, r3
 800a574:	f001 f8f0 	bl	800b758 <xTaskPriorityDisinherit>
 800a578:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	609a      	str	r2, [r3, #8]
 800a580:	e043      	b.n	800a60a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d119      	bne.n	800a5bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6858      	ldr	r0, [r3, #4]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a590:	461a      	mov	r2, r3
 800a592:	68b9      	ldr	r1, [r7, #8]
 800a594:	f003 fadf 	bl	800db56 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	685a      	ldr	r2, [r3, #4]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5a0:	441a      	add	r2, r3
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	685a      	ldr	r2, [r3, #4]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d32b      	bcc.n	800a60a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	605a      	str	r2, [r3, #4]
 800a5ba:	e026      	b.n	800a60a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	68d8      	ldr	r0, [r3, #12]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	68b9      	ldr	r1, [r7, #8]
 800a5c8:	f003 fac5 	bl	800db56 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	68da      	ldr	r2, [r3, #12]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5d4:	425b      	negs	r3, r3
 800a5d6:	441a      	add	r2, r3
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	68da      	ldr	r2, [r3, #12]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d207      	bcs.n	800a5f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	689a      	ldr	r2, [r3, #8]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5f0:	425b      	negs	r3, r3
 800a5f2:	441a      	add	r2, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	d105      	bne.n	800a60a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	3b01      	subs	r3, #1
 800a608:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	1c5a      	adds	r2, r3, #1
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a612:	697b      	ldr	r3, [r7, #20]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3718      	adds	r7, #24
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d018      	beq.n	800a660 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	68da      	ldr	r2, [r3, #12]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a636:	441a      	add	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	68da      	ldr	r2, [r3, #12]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	429a      	cmp	r2, r3
 800a646:	d303      	bcc.n	800a650 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	68d9      	ldr	r1, [r3, #12]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a658:	461a      	mov	r2, r3
 800a65a:	6838      	ldr	r0, [r7, #0]
 800a65c:	f003 fa7b 	bl	800db56 <memcpy>
	}
}
 800a660:	bf00      	nop
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a670:	f001 ff6a 	bl	800c548 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a67a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a67c:	e011      	b.n	800a6a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a682:	2b00      	cmp	r3, #0
 800a684:	d012      	beq.n	800a6ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	3324      	adds	r3, #36	@ 0x24
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 fe38 	bl	800b300 <xTaskRemoveFromEventList>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a696:	f000 ff11 	bl	800b4bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a69a:	7bfb      	ldrb	r3, [r7, #15]
 800a69c:	3b01      	subs	r3, #1
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	dce9      	bgt.n	800a67e <prvUnlockQueue+0x16>
 800a6aa:	e000      	b.n	800a6ae <prvUnlockQueue+0x46>
					break;
 800a6ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	22ff      	movs	r2, #255	@ 0xff
 800a6b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a6b6:	f001 ff79 	bl	800c5ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a6ba:	f001 ff45 	bl	800c548 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6c6:	e011      	b.n	800a6ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d012      	beq.n	800a6f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	3310      	adds	r3, #16
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f000 fe13 	bl	800b300 <xTaskRemoveFromEventList>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d001      	beq.n	800a6e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a6e0:	f000 feec 	bl	800b4bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a6e4:	7bbb      	ldrb	r3, [r7, #14]
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	dce9      	bgt.n	800a6c8 <prvUnlockQueue+0x60>
 800a6f4:	e000      	b.n	800a6f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a6f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	22ff      	movs	r2, #255	@ 0xff
 800a6fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a700:	f001 ff54 	bl	800c5ac <vPortExitCritical>
}
 800a704:	bf00      	nop
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a714:	f001 ff18 	bl	800c548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d102      	bne.n	800a726 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a720:	2301      	movs	r3, #1
 800a722:	60fb      	str	r3, [r7, #12]
 800a724:	e001      	b.n	800a72a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a726:	2300      	movs	r3, #0
 800a728:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a72a:	f001 ff3f 	bl	800c5ac <vPortExitCritical>

	return xReturn;
 800a72e:	68fb      	ldr	r3, [r7, #12]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a740:	f001 ff02 	bl	800c548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d102      	bne.n	800a756 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a750:	2301      	movs	r3, #1
 800a752:	60fb      	str	r3, [r7, #12]
 800a754:	e001      	b.n	800a75a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a756:	2300      	movs	r3, #0
 800a758:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a75a:	f001 ff27 	bl	800c5ac <vPortExitCritical>

	return xReturn;
 800a75e:	68fb      	ldr	r3, [r7, #12]
}
 800a760:	4618      	mov	r0, r3
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a772:	2300      	movs	r3, #0
 800a774:	60fb      	str	r3, [r7, #12]
 800a776:	e014      	b.n	800a7a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a778:	4a0f      	ldr	r2, [pc, #60]	@ (800a7b8 <vQueueAddToRegistry+0x50>)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d10b      	bne.n	800a79c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a784:	490c      	ldr	r1, [pc, #48]	@ (800a7b8 <vQueueAddToRegistry+0x50>)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	683a      	ldr	r2, [r7, #0]
 800a78a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a78e:	4a0a      	ldr	r2, [pc, #40]	@ (800a7b8 <vQueueAddToRegistry+0x50>)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	00db      	lsls	r3, r3, #3
 800a794:	4413      	add	r3, r2
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a79a:	e006      	b.n	800a7aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	60fb      	str	r3, [r7, #12]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2b07      	cmp	r3, #7
 800a7a6:	d9e7      	bls.n	800a778 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a7a8:	bf00      	nop
 800a7aa:	bf00      	nop
 800a7ac:	3714      	adds	r7, #20
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	20000c00 	.word	0x20000c00

0800a7bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b086      	sub	sp, #24
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a7cc:	f001 febc 	bl	800c548 <vPortEnterCritical>
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a7d6:	b25b      	sxtb	r3, r3
 800a7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7dc:	d103      	bne.n	800a7e6 <vQueueWaitForMessageRestricted+0x2a>
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7ec:	b25b      	sxtb	r3, r3
 800a7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f2:	d103      	bne.n	800a7fc <vQueueWaitForMessageRestricted+0x40>
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a7fc:	f001 fed6 	bl	800c5ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a804:	2b00      	cmp	r3, #0
 800a806:	d106      	bne.n	800a816 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	3324      	adds	r3, #36	@ 0x24
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	68b9      	ldr	r1, [r7, #8]
 800a810:	4618      	mov	r0, r3
 800a812:	f000 fd49 	bl	800b2a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a816:	6978      	ldr	r0, [r7, #20]
 800a818:	f7ff ff26 	bl	800a668 <prvUnlockQueue>
	}
 800a81c:	bf00      	nop
 800a81e:	3718      	adds	r7, #24
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a824:	b580      	push	{r7, lr}
 800a826:	b08e      	sub	sp, #56	@ 0x38
 800a828:	af04      	add	r7, sp, #16
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
 800a830:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10b      	bne.n	800a850 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a83c:	f383 8811 	msr	BASEPRI, r3
 800a840:	f3bf 8f6f 	isb	sy
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	623b      	str	r3, [r7, #32]
}
 800a84a:	bf00      	nop
 800a84c:	bf00      	nop
 800a84e:	e7fd      	b.n	800a84c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a852:	2b00      	cmp	r3, #0
 800a854:	d10b      	bne.n	800a86e <xTaskCreateStatic+0x4a>
	__asm volatile
 800a856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a85a:	f383 8811 	msr	BASEPRI, r3
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	61fb      	str	r3, [r7, #28]
}
 800a868:	bf00      	nop
 800a86a:	bf00      	nop
 800a86c:	e7fd      	b.n	800a86a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a86e:	23a8      	movs	r3, #168	@ 0xa8
 800a870:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	2ba8      	cmp	r3, #168	@ 0xa8
 800a876:	d00b      	beq.n	800a890 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a87c:	f383 8811 	msr	BASEPRI, r3
 800a880:	f3bf 8f6f 	isb	sy
 800a884:	f3bf 8f4f 	dsb	sy
 800a888:	61bb      	str	r3, [r7, #24]
}
 800a88a:	bf00      	nop
 800a88c:	bf00      	nop
 800a88e:	e7fd      	b.n	800a88c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a890:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a894:	2b00      	cmp	r3, #0
 800a896:	d01e      	beq.n	800a8d6 <xTaskCreateStatic+0xb2>
 800a898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d01b      	beq.n	800a8d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	9303      	str	r3, [sp, #12]
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b6:	9302      	str	r3, [sp, #8]
 800a8b8:	f107 0314 	add.w	r3, r7, #20
 800a8bc:	9301      	str	r3, [sp, #4]
 800a8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	68b9      	ldr	r1, [r7, #8]
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f000 f851 	bl	800a970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a8d0:	f000 f8f6 	bl	800aac0 <prvAddNewTaskToReadyList>
 800a8d4:	e001      	b.n	800a8da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a8da:	697b      	ldr	r3, [r7, #20]
	}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3728      	adds	r7, #40	@ 0x28
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b08c      	sub	sp, #48	@ 0x30
 800a8e8:	af04      	add	r7, sp, #16
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	603b      	str	r3, [r7, #0]
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a8f4:	88fb      	ldrh	r3, [r7, #6]
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f001 ff47 	bl	800c78c <pvPortMalloc>
 800a8fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00e      	beq.n	800a924 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a906:	20a8      	movs	r0, #168	@ 0xa8
 800a908:	f001 ff40 	bl	800c78c <pvPortMalloc>
 800a90c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d003      	beq.n	800a91c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	631a      	str	r2, [r3, #48]	@ 0x30
 800a91a:	e005      	b.n	800a928 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a91c:	6978      	ldr	r0, [r7, #20]
 800a91e:	f002 f803 	bl	800c928 <vPortFree>
 800a922:	e001      	b.n	800a928 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a924:	2300      	movs	r3, #0
 800a926:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d017      	beq.n	800a95e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	2200      	movs	r2, #0
 800a932:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a936:	88fa      	ldrh	r2, [r7, #6]
 800a938:	2300      	movs	r3, #0
 800a93a:	9303      	str	r3, [sp, #12]
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	9302      	str	r3, [sp, #8]
 800a940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a942:	9301      	str	r3, [sp, #4]
 800a944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	68b9      	ldr	r1, [r7, #8]
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f000 f80f 	bl	800a970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a952:	69f8      	ldr	r0, [r7, #28]
 800a954:	f000 f8b4 	bl	800aac0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a958:	2301      	movs	r3, #1
 800a95a:	61bb      	str	r3, [r7, #24]
 800a95c:	e002      	b.n	800a964 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a95e:	f04f 33ff 	mov.w	r3, #4294967295
 800a962:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a964:	69bb      	ldr	r3, [r7, #24]
	}
 800a966:	4618      	mov	r0, r3
 800a968:	3720      	adds	r7, #32
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
	...

0800a970 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b088      	sub	sp, #32
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
 800a97c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a980:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	461a      	mov	r2, r3
 800a988:	21a5      	movs	r1, #165	@ 0xa5
 800a98a:	f003 f813 	bl	800d9b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a990:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a998:	3b01      	subs	r3, #1
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	4413      	add	r3, r2
 800a99e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	f023 0307 	bic.w	r3, r3, #7
 800a9a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	f003 0307 	and.w	r3, r3, #7
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00b      	beq.n	800a9ca <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b6:	f383 8811 	msr	BASEPRI, r3
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	617b      	str	r3, [r7, #20]
}
 800a9c4:	bf00      	nop
 800a9c6:	bf00      	nop
 800a9c8:	e7fd      	b.n	800a9c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d01f      	beq.n	800aa10 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	61fb      	str	r3, [r7, #28]
 800a9d4:	e012      	b.n	800a9fc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	4413      	add	r3, r2
 800a9dc:	7819      	ldrb	r1, [r3, #0]
 800a9de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	3334      	adds	r3, #52	@ 0x34
 800a9e6:	460a      	mov	r2, r1
 800a9e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a9ea:	68ba      	ldr	r2, [r7, #8]
 800a9ec:	69fb      	ldr	r3, [r7, #28]
 800a9ee:	4413      	add	r3, r2
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d006      	beq.n	800aa04 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	61fb      	str	r3, [r7, #28]
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	2b0f      	cmp	r3, #15
 800aa00:	d9e9      	bls.n	800a9d6 <prvInitialiseNewTask+0x66>
 800aa02:	e000      	b.n	800aa06 <prvInitialiseNewTask+0x96>
			{
				break;
 800aa04:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aa0e:	e003      	b.n	800aa18 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa12:	2200      	movs	r2, #0
 800aa14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa1a:	2b37      	cmp	r3, #55	@ 0x37
 800aa1c:	d901      	bls.n	800aa22 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa1e:	2337      	movs	r3, #55	@ 0x37
 800aa20:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa26:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa2c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aa2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa30:	2200      	movs	r2, #0
 800aa32:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa36:	3304      	adds	r3, #4
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7ff f8a6 	bl	8009b8a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa40:	3318      	adds	r3, #24
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7ff f8a1 	bl	8009b8a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aa54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aa58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa5c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aa5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa60:	2200      	movs	r2, #0
 800aa62:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa70:	3354      	adds	r3, #84	@ 0x54
 800aa72:	224c      	movs	r2, #76	@ 0x4c
 800aa74:	2100      	movs	r1, #0
 800aa76:	4618      	mov	r0, r3
 800aa78:	f002 ff9c 	bl	800d9b4 <memset>
 800aa7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa7e:	4a0d      	ldr	r2, [pc, #52]	@ (800aab4 <prvInitialiseNewTask+0x144>)
 800aa80:	659a      	str	r2, [r3, #88]	@ 0x58
 800aa82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa84:	4a0c      	ldr	r2, [pc, #48]	@ (800aab8 <prvInitialiseNewTask+0x148>)
 800aa86:	65da      	str	r2, [r3, #92]	@ 0x5c
 800aa88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa8a:	4a0c      	ldr	r2, [pc, #48]	@ (800aabc <prvInitialiseNewTask+0x14c>)
 800aa8c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	68f9      	ldr	r1, [r7, #12]
 800aa92:	69b8      	ldr	r0, [r7, #24]
 800aa94:	f001 fc26 	bl	800c2e4 <pxPortInitialiseStack>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aa9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d002      	beq.n	800aaaa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aaa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aaa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aaaa:	bf00      	nop
 800aaac:	3720      	adds	r7, #32
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	20006a74 	.word	0x20006a74
 800aab8:	20006adc 	.word	0x20006adc
 800aabc:	20006b44 	.word	0x20006b44

0800aac0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aac8:	f001 fd3e 	bl	800c548 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aacc:	4b2d      	ldr	r3, [pc, #180]	@ (800ab84 <prvAddNewTaskToReadyList+0xc4>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	3301      	adds	r3, #1
 800aad2:	4a2c      	ldr	r2, [pc, #176]	@ (800ab84 <prvAddNewTaskToReadyList+0xc4>)
 800aad4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aad6:	4b2c      	ldr	r3, [pc, #176]	@ (800ab88 <prvAddNewTaskToReadyList+0xc8>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d109      	bne.n	800aaf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aade:	4a2a      	ldr	r2, [pc, #168]	@ (800ab88 <prvAddNewTaskToReadyList+0xc8>)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aae4:	4b27      	ldr	r3, [pc, #156]	@ (800ab84 <prvAddNewTaskToReadyList+0xc4>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d110      	bne.n	800ab0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aaec:	f000 fd0a 	bl	800b504 <prvInitialiseTaskLists>
 800aaf0:	e00d      	b.n	800ab0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aaf2:	4b26      	ldr	r3, [pc, #152]	@ (800ab8c <prvAddNewTaskToReadyList+0xcc>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d109      	bne.n	800ab0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aafa:	4b23      	ldr	r3, [pc, #140]	@ (800ab88 <prvAddNewTaskToReadyList+0xc8>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d802      	bhi.n	800ab0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab08:	4a1f      	ldr	r2, [pc, #124]	@ (800ab88 <prvAddNewTaskToReadyList+0xc8>)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab0e:	4b20      	ldr	r3, [pc, #128]	@ (800ab90 <prvAddNewTaskToReadyList+0xd0>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	3301      	adds	r3, #1
 800ab14:	4a1e      	ldr	r2, [pc, #120]	@ (800ab90 <prvAddNewTaskToReadyList+0xd0>)
 800ab16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab18:	4b1d      	ldr	r3, [pc, #116]	@ (800ab90 <prvAddNewTaskToReadyList+0xd0>)
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab24:	4b1b      	ldr	r3, [pc, #108]	@ (800ab94 <prvAddNewTaskToReadyList+0xd4>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d903      	bls.n	800ab34 <prvAddNewTaskToReadyList+0x74>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab30:	4a18      	ldr	r2, [pc, #96]	@ (800ab94 <prvAddNewTaskToReadyList+0xd4>)
 800ab32:	6013      	str	r3, [r2, #0]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab38:	4613      	mov	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	4a15      	ldr	r2, [pc, #84]	@ (800ab98 <prvAddNewTaskToReadyList+0xd8>)
 800ab42:	441a      	add	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	3304      	adds	r3, #4
 800ab48:	4619      	mov	r1, r3
 800ab4a:	4610      	mov	r0, r2
 800ab4c:	f7ff f82a 	bl	8009ba4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab50:	f001 fd2c 	bl	800c5ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab54:	4b0d      	ldr	r3, [pc, #52]	@ (800ab8c <prvAddNewTaskToReadyList+0xcc>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00e      	beq.n	800ab7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab5c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab88 <prvAddNewTaskToReadyList+0xc8>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d207      	bcs.n	800ab7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ab6a:	4b0c      	ldr	r3, [pc, #48]	@ (800ab9c <prvAddNewTaskToReadyList+0xdc>)
 800ab6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	f3bf 8f4f 	dsb	sy
 800ab76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab7a:	bf00      	nop
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	20001114 	.word	0x20001114
 800ab88:	20000c40 	.word	0x20000c40
 800ab8c:	20001120 	.word	0x20001120
 800ab90:	20001130 	.word	0x20001130
 800ab94:	2000111c 	.word	0x2000111c
 800ab98:	20000c44 	.word	0x20000c44
 800ab9c:	e000ed04 	.word	0xe000ed04

0800aba0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800aba8:	f001 fcce 	bl	800c548 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d102      	bne.n	800abb8 <vTaskDelete+0x18>
 800abb2:	4b2d      	ldr	r3, [pc, #180]	@ (800ac68 <vTaskDelete+0xc8>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	e000      	b.n	800abba <vTaskDelete+0x1a>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	3304      	adds	r3, #4
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7ff f84c 	bl	8009c5e <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d004      	beq.n	800abd8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	3318      	adds	r3, #24
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7ff f843 	bl	8009c5e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800abd8:	4b24      	ldr	r3, [pc, #144]	@ (800ac6c <vTaskDelete+0xcc>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	3301      	adds	r3, #1
 800abde:	4a23      	ldr	r2, [pc, #140]	@ (800ac6c <vTaskDelete+0xcc>)
 800abe0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800abe2:	4b21      	ldr	r3, [pc, #132]	@ (800ac68 <vTaskDelete+0xc8>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d10b      	bne.n	800ac04 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	3304      	adds	r3, #4
 800abf0:	4619      	mov	r1, r3
 800abf2:	481f      	ldr	r0, [pc, #124]	@ (800ac70 <vTaskDelete+0xd0>)
 800abf4:	f7fe ffd6 	bl	8009ba4 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800abf8:	4b1e      	ldr	r3, [pc, #120]	@ (800ac74 <vTaskDelete+0xd4>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	3301      	adds	r3, #1
 800abfe:	4a1d      	ldr	r2, [pc, #116]	@ (800ac74 <vTaskDelete+0xd4>)
 800ac00:	6013      	str	r3, [r2, #0]
 800ac02:	e009      	b.n	800ac18 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ac04:	4b1c      	ldr	r3, [pc, #112]	@ (800ac78 <vTaskDelete+0xd8>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	4a1b      	ldr	r2, [pc, #108]	@ (800ac78 <vTaskDelete+0xd8>)
 800ac0c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	f000 fd1e 	bl	800b650 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ac14:	f000 fd52 	bl	800b6bc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800ac18:	f001 fcc8 	bl	800c5ac <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ac1c:	4b17      	ldr	r3, [pc, #92]	@ (800ac7c <vTaskDelete+0xdc>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d01c      	beq.n	800ac5e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800ac24:	4b10      	ldr	r3, [pc, #64]	@ (800ac68 <vTaskDelete+0xc8>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d117      	bne.n	800ac5e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ac2e:	4b14      	ldr	r3, [pc, #80]	@ (800ac80 <vTaskDelete+0xe0>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00b      	beq.n	800ac4e <vTaskDelete+0xae>
	__asm volatile
 800ac36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac3a:	f383 8811 	msr	BASEPRI, r3
 800ac3e:	f3bf 8f6f 	isb	sy
 800ac42:	f3bf 8f4f 	dsb	sy
 800ac46:	60bb      	str	r3, [r7, #8]
}
 800ac48:	bf00      	nop
 800ac4a:	bf00      	nop
 800ac4c:	e7fd      	b.n	800ac4a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800ac4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac84 <vTaskDelete+0xe4>)
 800ac50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac54:	601a      	str	r2, [r3, #0]
 800ac56:	f3bf 8f4f 	dsb	sy
 800ac5a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ac5e:	bf00      	nop
 800ac60:	3710      	adds	r7, #16
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	20000c40 	.word	0x20000c40
 800ac6c:	20001130 	.word	0x20001130
 800ac70:	200010e8 	.word	0x200010e8
 800ac74:	200010fc 	.word	0x200010fc
 800ac78:	20001114 	.word	0x20001114
 800ac7c:	20001120 	.word	0x20001120
 800ac80:	2000113c 	.word	0x2000113c
 800ac84:	e000ed04 	.word	0xe000ed04

0800ac88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac90:	2300      	movs	r3, #0
 800ac92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d018      	beq.n	800accc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac9a:	4b14      	ldr	r3, [pc, #80]	@ (800acec <vTaskDelay+0x64>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00b      	beq.n	800acba <vTaskDelay+0x32>
	__asm volatile
 800aca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca6:	f383 8811 	msr	BASEPRI, r3
 800acaa:	f3bf 8f6f 	isb	sy
 800acae:	f3bf 8f4f 	dsb	sy
 800acb2:	60bb      	str	r3, [r7, #8]
}
 800acb4:	bf00      	nop
 800acb6:	bf00      	nop
 800acb8:	e7fd      	b.n	800acb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800acba:	f000 f8f3 	bl	800aea4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800acbe:	2100      	movs	r1, #0
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 ff61 	bl	800bb88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800acc6:	f000 f8fb 	bl	800aec0 <xTaskResumeAll>
 800acca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d107      	bne.n	800ace2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800acd2:	4b07      	ldr	r3, [pc, #28]	@ (800acf0 <vTaskDelay+0x68>)
 800acd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acd8:	601a      	str	r2, [r3, #0]
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ace2:	bf00      	nop
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	2000113c 	.word	0x2000113c
 800acf0:	e000ed04 	.word	0xe000ed04

0800acf4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b088      	sub	sp, #32
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10b      	bne.n	800ad1e <eTaskGetState+0x2a>
	__asm volatile
 800ad06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	60bb      	str	r3, [r7, #8]
}
 800ad18:	bf00      	nop
 800ad1a:	bf00      	nop
 800ad1c:	e7fd      	b.n	800ad1a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800ad1e:	4b24      	ldr	r3, [pc, #144]	@ (800adb0 <eTaskGetState+0xbc>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	69ba      	ldr	r2, [r7, #24]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d102      	bne.n	800ad2e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	77fb      	strb	r3, [r7, #31]
 800ad2c:	e03a      	b.n	800ada4 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800ad2e:	f001 fc0b 	bl	800c548 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	695b      	ldr	r3, [r3, #20]
 800ad36:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800ad38:	4b1e      	ldr	r3, [pc, #120]	@ (800adb4 <eTaskGetState+0xc0>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800ad3e:	4b1e      	ldr	r3, [pc, #120]	@ (800adb8 <eTaskGetState+0xc4>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800ad44:	f001 fc32 	bl	800c5ac <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800ad48:	697a      	ldr	r2, [r7, #20]
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d003      	beq.n	800ad58 <eTaskGetState+0x64>
 800ad50:	697a      	ldr	r2, [r7, #20]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d102      	bne.n	800ad5e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800ad58:	2302      	movs	r3, #2
 800ad5a:	77fb      	strb	r3, [r7, #31]
 800ad5c:	e022      	b.n	800ada4 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	4a16      	ldr	r2, [pc, #88]	@ (800adbc <eTaskGetState+0xc8>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d112      	bne.n	800ad8c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d10b      	bne.n	800ad86 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d102      	bne.n	800ad80 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800ad7a:	2302      	movs	r3, #2
 800ad7c:	77fb      	strb	r3, [r7, #31]
 800ad7e:	e011      	b.n	800ada4 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800ad80:	2303      	movs	r3, #3
 800ad82:	77fb      	strb	r3, [r7, #31]
 800ad84:	e00e      	b.n	800ada4 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800ad86:	2302      	movs	r3, #2
 800ad88:	77fb      	strb	r3, [r7, #31]
 800ad8a:	e00b      	b.n	800ada4 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	4a0c      	ldr	r2, [pc, #48]	@ (800adc0 <eTaskGetState+0xcc>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d002      	beq.n	800ad9a <eTaskGetState+0xa6>
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d102      	bne.n	800ada0 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800ad9a:	2304      	movs	r3, #4
 800ad9c:	77fb      	strb	r3, [r7, #31]
 800ad9e:	e001      	b.n	800ada4 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800ada0:	2301      	movs	r3, #1
 800ada2:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800ada4:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ada6:	4618      	mov	r0, r3
 800ada8:	3720      	adds	r7, #32
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	20000c40 	.word	0x20000c40
 800adb4:	200010cc 	.word	0x200010cc
 800adb8:	200010d0 	.word	0x200010d0
 800adbc:	20001100 	.word	0x20001100
 800adc0:	200010e8 	.word	0x200010e8

0800adc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b08a      	sub	sp, #40	@ 0x28
 800adc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800adca:	2300      	movs	r3, #0
 800adcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800adce:	2300      	movs	r3, #0
 800add0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800add2:	463a      	mov	r2, r7
 800add4:	1d39      	adds	r1, r7, #4
 800add6:	f107 0308 	add.w	r3, r7, #8
 800adda:	4618      	mov	r0, r3
 800addc:	f7fe fe2e 	bl	8009a3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ade0:	6839      	ldr	r1, [r7, #0]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	68ba      	ldr	r2, [r7, #8]
 800ade6:	9202      	str	r2, [sp, #8]
 800ade8:	9301      	str	r3, [sp, #4]
 800adea:	2300      	movs	r3, #0
 800adec:	9300      	str	r3, [sp, #0]
 800adee:	2300      	movs	r3, #0
 800adf0:	460a      	mov	r2, r1
 800adf2:	4924      	ldr	r1, [pc, #144]	@ (800ae84 <vTaskStartScheduler+0xc0>)
 800adf4:	4824      	ldr	r0, [pc, #144]	@ (800ae88 <vTaskStartScheduler+0xc4>)
 800adf6:	f7ff fd15 	bl	800a824 <xTaskCreateStatic>
 800adfa:	4603      	mov	r3, r0
 800adfc:	4a23      	ldr	r2, [pc, #140]	@ (800ae8c <vTaskStartScheduler+0xc8>)
 800adfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae00:	4b22      	ldr	r3, [pc, #136]	@ (800ae8c <vTaskStartScheduler+0xc8>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d002      	beq.n	800ae0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	617b      	str	r3, [r7, #20]
 800ae0c:	e001      	b.n	800ae12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d102      	bne.n	800ae1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ae18:	f000 ff0a 	bl	800bc30 <xTimerCreateTimerTask>
 800ae1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d11b      	bne.n	800ae5c <vTaskStartScheduler+0x98>
	__asm volatile
 800ae24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae28:	f383 8811 	msr	BASEPRI, r3
 800ae2c:	f3bf 8f6f 	isb	sy
 800ae30:	f3bf 8f4f 	dsb	sy
 800ae34:	613b      	str	r3, [r7, #16]
}
 800ae36:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae38:	4b15      	ldr	r3, [pc, #84]	@ (800ae90 <vTaskStartScheduler+0xcc>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	3354      	adds	r3, #84	@ 0x54
 800ae3e:	4a15      	ldr	r2, [pc, #84]	@ (800ae94 <vTaskStartScheduler+0xd0>)
 800ae40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae42:	4b15      	ldr	r3, [pc, #84]	@ (800ae98 <vTaskStartScheduler+0xd4>)
 800ae44:	f04f 32ff 	mov.w	r2, #4294967295
 800ae48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae4a:	4b14      	ldr	r3, [pc, #80]	@ (800ae9c <vTaskStartScheduler+0xd8>)
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ae50:	4b13      	ldr	r3, [pc, #76]	@ (800aea0 <vTaskStartScheduler+0xdc>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae56:	f001 fad3 	bl	800c400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae5a:	e00f      	b.n	800ae7c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae62:	d10b      	bne.n	800ae7c <vTaskStartScheduler+0xb8>
	__asm volatile
 800ae64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	60fb      	str	r3, [r7, #12]
}
 800ae76:	bf00      	nop
 800ae78:	bf00      	nop
 800ae7a:	e7fd      	b.n	800ae78 <vTaskStartScheduler+0xb4>
}
 800ae7c:	bf00      	nop
 800ae7e:	3718      	adds	r7, #24
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	0800e62c 	.word	0x0800e62c
 800ae88:	0800b4d5 	.word	0x0800b4d5
 800ae8c:	20001138 	.word	0x20001138
 800ae90:	20000c40 	.word	0x20000c40
 800ae94:	20000118 	.word	0x20000118
 800ae98:	20001134 	.word	0x20001134
 800ae9c:	20001120 	.word	0x20001120
 800aea0:	20001118 	.word	0x20001118

0800aea4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aea4:	b480      	push	{r7}
 800aea6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aea8:	4b04      	ldr	r3, [pc, #16]	@ (800aebc <vTaskSuspendAll+0x18>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	3301      	adds	r3, #1
 800aeae:	4a03      	ldr	r2, [pc, #12]	@ (800aebc <vTaskSuspendAll+0x18>)
 800aeb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aeb2:	bf00      	nop
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr
 800aebc:	2000113c 	.word	0x2000113c

0800aec0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aec6:	2300      	movs	r3, #0
 800aec8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aeca:	2300      	movs	r3, #0
 800aecc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aece:	4b42      	ldr	r3, [pc, #264]	@ (800afd8 <xTaskResumeAll+0x118>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d10b      	bne.n	800aeee <xTaskResumeAll+0x2e>
	__asm volatile
 800aed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeda:	f383 8811 	msr	BASEPRI, r3
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	f3bf 8f4f 	dsb	sy
 800aee6:	603b      	str	r3, [r7, #0]
}
 800aee8:	bf00      	nop
 800aeea:	bf00      	nop
 800aeec:	e7fd      	b.n	800aeea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aeee:	f001 fb2b 	bl	800c548 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aef2:	4b39      	ldr	r3, [pc, #228]	@ (800afd8 <xTaskResumeAll+0x118>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	3b01      	subs	r3, #1
 800aef8:	4a37      	ldr	r2, [pc, #220]	@ (800afd8 <xTaskResumeAll+0x118>)
 800aefa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aefc:	4b36      	ldr	r3, [pc, #216]	@ (800afd8 <xTaskResumeAll+0x118>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d162      	bne.n	800afca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af04:	4b35      	ldr	r3, [pc, #212]	@ (800afdc <xTaskResumeAll+0x11c>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d05e      	beq.n	800afca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af0c:	e02f      	b.n	800af6e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af0e:	4b34      	ldr	r3, [pc, #208]	@ (800afe0 <xTaskResumeAll+0x120>)
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	3318      	adds	r3, #24
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fe fe9f 	bl	8009c5e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	3304      	adds	r3, #4
 800af24:	4618      	mov	r0, r3
 800af26:	f7fe fe9a 	bl	8009c5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af2e:	4b2d      	ldr	r3, [pc, #180]	@ (800afe4 <xTaskResumeAll+0x124>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	429a      	cmp	r2, r3
 800af34:	d903      	bls.n	800af3e <xTaskResumeAll+0x7e>
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af3a:	4a2a      	ldr	r2, [pc, #168]	@ (800afe4 <xTaskResumeAll+0x124>)
 800af3c:	6013      	str	r3, [r2, #0]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af42:	4613      	mov	r3, r2
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	4413      	add	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4a27      	ldr	r2, [pc, #156]	@ (800afe8 <xTaskResumeAll+0x128>)
 800af4c:	441a      	add	r2, r3
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	3304      	adds	r3, #4
 800af52:	4619      	mov	r1, r3
 800af54:	4610      	mov	r0, r2
 800af56:	f7fe fe25 	bl	8009ba4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af5e:	4b23      	ldr	r3, [pc, #140]	@ (800afec <xTaskResumeAll+0x12c>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af64:	429a      	cmp	r2, r3
 800af66:	d302      	bcc.n	800af6e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800af68:	4b21      	ldr	r3, [pc, #132]	@ (800aff0 <xTaskResumeAll+0x130>)
 800af6a:	2201      	movs	r2, #1
 800af6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af6e:	4b1c      	ldr	r3, [pc, #112]	@ (800afe0 <xTaskResumeAll+0x120>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d1cb      	bne.n	800af0e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d001      	beq.n	800af80 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af7c:	f000 fb9e 	bl	800b6bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af80:	4b1c      	ldr	r3, [pc, #112]	@ (800aff4 <xTaskResumeAll+0x134>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d010      	beq.n	800afae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af8c:	f000 f846 	bl	800b01c <xTaskIncrementTick>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d002      	beq.n	800af9c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800af96:	4b16      	ldr	r3, [pc, #88]	@ (800aff0 <xTaskResumeAll+0x130>)
 800af98:	2201      	movs	r2, #1
 800af9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	3b01      	subs	r3, #1
 800afa0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d1f1      	bne.n	800af8c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800afa8:	4b12      	ldr	r3, [pc, #72]	@ (800aff4 <xTaskResumeAll+0x134>)
 800afaa:	2200      	movs	r2, #0
 800afac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800afae:	4b10      	ldr	r3, [pc, #64]	@ (800aff0 <xTaskResumeAll+0x130>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d009      	beq.n	800afca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800afb6:	2301      	movs	r3, #1
 800afb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800afba:	4b0f      	ldr	r3, [pc, #60]	@ (800aff8 <xTaskResumeAll+0x138>)
 800afbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afc0:	601a      	str	r2, [r3, #0]
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800afca:	f001 faef 	bl	800c5ac <vPortExitCritical>

	return xAlreadyYielded;
 800afce:	68bb      	ldr	r3, [r7, #8]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3710      	adds	r7, #16
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	2000113c 	.word	0x2000113c
 800afdc:	20001114 	.word	0x20001114
 800afe0:	200010d4 	.word	0x200010d4
 800afe4:	2000111c 	.word	0x2000111c
 800afe8:	20000c44 	.word	0x20000c44
 800afec:	20000c40 	.word	0x20000c40
 800aff0:	20001128 	.word	0x20001128
 800aff4:	20001124 	.word	0x20001124
 800aff8:	e000ed04 	.word	0xe000ed04

0800affc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b002:	4b05      	ldr	r3, [pc, #20]	@ (800b018 <xTaskGetTickCount+0x1c>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b008:	687b      	ldr	r3, [r7, #4]
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	370c      	adds	r7, #12
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	20001118 	.word	0x20001118

0800b01c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b086      	sub	sp, #24
 800b020:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b022:	2300      	movs	r3, #0
 800b024:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b026:	4b4f      	ldr	r3, [pc, #316]	@ (800b164 <xTaskIncrementTick+0x148>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	f040 8090 	bne.w	800b150 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b030:	4b4d      	ldr	r3, [pc, #308]	@ (800b168 <xTaskIncrementTick+0x14c>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	3301      	adds	r3, #1
 800b036:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b038:	4a4b      	ldr	r2, [pc, #300]	@ (800b168 <xTaskIncrementTick+0x14c>)
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d121      	bne.n	800b088 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b044:	4b49      	ldr	r3, [pc, #292]	@ (800b16c <xTaskIncrementTick+0x150>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00b      	beq.n	800b066 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b052:	f383 8811 	msr	BASEPRI, r3
 800b056:	f3bf 8f6f 	isb	sy
 800b05a:	f3bf 8f4f 	dsb	sy
 800b05e:	603b      	str	r3, [r7, #0]
}
 800b060:	bf00      	nop
 800b062:	bf00      	nop
 800b064:	e7fd      	b.n	800b062 <xTaskIncrementTick+0x46>
 800b066:	4b41      	ldr	r3, [pc, #260]	@ (800b16c <xTaskIncrementTick+0x150>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	60fb      	str	r3, [r7, #12]
 800b06c:	4b40      	ldr	r3, [pc, #256]	@ (800b170 <xTaskIncrementTick+0x154>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a3e      	ldr	r2, [pc, #248]	@ (800b16c <xTaskIncrementTick+0x150>)
 800b072:	6013      	str	r3, [r2, #0]
 800b074:	4a3e      	ldr	r2, [pc, #248]	@ (800b170 <xTaskIncrementTick+0x154>)
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6013      	str	r3, [r2, #0]
 800b07a:	4b3e      	ldr	r3, [pc, #248]	@ (800b174 <xTaskIncrementTick+0x158>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	3301      	adds	r3, #1
 800b080:	4a3c      	ldr	r2, [pc, #240]	@ (800b174 <xTaskIncrementTick+0x158>)
 800b082:	6013      	str	r3, [r2, #0]
 800b084:	f000 fb1a 	bl	800b6bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b088:	4b3b      	ldr	r3, [pc, #236]	@ (800b178 <xTaskIncrementTick+0x15c>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	693a      	ldr	r2, [r7, #16]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d349      	bcc.n	800b126 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b092:	4b36      	ldr	r3, [pc, #216]	@ (800b16c <xTaskIncrementTick+0x150>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d104      	bne.n	800b0a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b09c:	4b36      	ldr	r3, [pc, #216]	@ (800b178 <xTaskIncrementTick+0x15c>)
 800b09e:	f04f 32ff 	mov.w	r2, #4294967295
 800b0a2:	601a      	str	r2, [r3, #0]
					break;
 800b0a4:	e03f      	b.n	800b126 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0a6:	4b31      	ldr	r3, [pc, #196]	@ (800b16c <xTaskIncrementTick+0x150>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b0b6:	693a      	ldr	r2, [r7, #16]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d203      	bcs.n	800b0c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b0be:	4a2e      	ldr	r2, [pc, #184]	@ (800b178 <xTaskIncrementTick+0x15c>)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b0c4:	e02f      	b.n	800b126 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	3304      	adds	r3, #4
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7fe fdc7 	bl	8009c5e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d004      	beq.n	800b0e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	3318      	adds	r3, #24
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7fe fdbe 	bl	8009c5e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0e6:	4b25      	ldr	r3, [pc, #148]	@ (800b17c <xTaskIncrementTick+0x160>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d903      	bls.n	800b0f6 <xTaskIncrementTick+0xda>
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0f2:	4a22      	ldr	r2, [pc, #136]	@ (800b17c <xTaskIncrementTick+0x160>)
 800b0f4:	6013      	str	r3, [r2, #0]
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	4413      	add	r3, r2
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	4a1f      	ldr	r2, [pc, #124]	@ (800b180 <xTaskIncrementTick+0x164>)
 800b104:	441a      	add	r2, r3
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	3304      	adds	r3, #4
 800b10a:	4619      	mov	r1, r3
 800b10c:	4610      	mov	r0, r2
 800b10e:	f7fe fd49 	bl	8009ba4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b116:	4b1b      	ldr	r3, [pc, #108]	@ (800b184 <xTaskIncrementTick+0x168>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d3b8      	bcc.n	800b092 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b120:	2301      	movs	r3, #1
 800b122:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b124:	e7b5      	b.n	800b092 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b126:	4b17      	ldr	r3, [pc, #92]	@ (800b184 <xTaskIncrementTick+0x168>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b12c:	4914      	ldr	r1, [pc, #80]	@ (800b180 <xTaskIncrementTick+0x164>)
 800b12e:	4613      	mov	r3, r2
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	4413      	add	r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	440b      	add	r3, r1
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d901      	bls.n	800b142 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b13e:	2301      	movs	r3, #1
 800b140:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b142:	4b11      	ldr	r3, [pc, #68]	@ (800b188 <xTaskIncrementTick+0x16c>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d007      	beq.n	800b15a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b14a:	2301      	movs	r3, #1
 800b14c:	617b      	str	r3, [r7, #20]
 800b14e:	e004      	b.n	800b15a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b150:	4b0e      	ldr	r3, [pc, #56]	@ (800b18c <xTaskIncrementTick+0x170>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	3301      	adds	r3, #1
 800b156:	4a0d      	ldr	r2, [pc, #52]	@ (800b18c <xTaskIncrementTick+0x170>)
 800b158:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b15a:	697b      	ldr	r3, [r7, #20]
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3718      	adds	r7, #24
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	2000113c 	.word	0x2000113c
 800b168:	20001118 	.word	0x20001118
 800b16c:	200010cc 	.word	0x200010cc
 800b170:	200010d0 	.word	0x200010d0
 800b174:	2000112c 	.word	0x2000112c
 800b178:	20001134 	.word	0x20001134
 800b17c:	2000111c 	.word	0x2000111c
 800b180:	20000c44 	.word	0x20000c44
 800b184:	20000c40 	.word	0x20000c40
 800b188:	20001128 	.word	0x20001128
 800b18c:	20001124 	.word	0x20001124

0800b190 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b190:	b480      	push	{r7}
 800b192:	b085      	sub	sp, #20
 800b194:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b196:	4b2b      	ldr	r3, [pc, #172]	@ (800b244 <vTaskSwitchContext+0xb4>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d003      	beq.n	800b1a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b19e:	4b2a      	ldr	r3, [pc, #168]	@ (800b248 <vTaskSwitchContext+0xb8>)
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b1a4:	e047      	b.n	800b236 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b1a6:	4b28      	ldr	r3, [pc, #160]	@ (800b248 <vTaskSwitchContext+0xb8>)
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1ac:	4b27      	ldr	r3, [pc, #156]	@ (800b24c <vTaskSwitchContext+0xbc>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	60fb      	str	r3, [r7, #12]
 800b1b2:	e011      	b.n	800b1d8 <vTaskSwitchContext+0x48>
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10b      	bne.n	800b1d2 <vTaskSwitchContext+0x42>
	__asm volatile
 800b1ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1be:	f383 8811 	msr	BASEPRI, r3
 800b1c2:	f3bf 8f6f 	isb	sy
 800b1c6:	f3bf 8f4f 	dsb	sy
 800b1ca:	607b      	str	r3, [r7, #4]
}
 800b1cc:	bf00      	nop
 800b1ce:	bf00      	nop
 800b1d0:	e7fd      	b.n	800b1ce <vTaskSwitchContext+0x3e>
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	3b01      	subs	r3, #1
 800b1d6:	60fb      	str	r3, [r7, #12]
 800b1d8:	491d      	ldr	r1, [pc, #116]	@ (800b250 <vTaskSwitchContext+0xc0>)
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	4613      	mov	r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	4413      	add	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	440b      	add	r3, r1
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d0e3      	beq.n	800b1b4 <vTaskSwitchContext+0x24>
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	4413      	add	r3, r2
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	4a16      	ldr	r2, [pc, #88]	@ (800b250 <vTaskSwitchContext+0xc0>)
 800b1f8:	4413      	add	r3, r2
 800b1fa:	60bb      	str	r3, [r7, #8]
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	685a      	ldr	r2, [r3, #4]
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	605a      	str	r2, [r3, #4]
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	685a      	ldr	r2, [r3, #4]
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	3308      	adds	r3, #8
 800b20e:	429a      	cmp	r2, r3
 800b210:	d104      	bne.n	800b21c <vTaskSwitchContext+0x8c>
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	685a      	ldr	r2, [r3, #4]
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	605a      	str	r2, [r3, #4]
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	68db      	ldr	r3, [r3, #12]
 800b222:	4a0c      	ldr	r2, [pc, #48]	@ (800b254 <vTaskSwitchContext+0xc4>)
 800b224:	6013      	str	r3, [r2, #0]
 800b226:	4a09      	ldr	r2, [pc, #36]	@ (800b24c <vTaskSwitchContext+0xbc>)
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b22c:	4b09      	ldr	r3, [pc, #36]	@ (800b254 <vTaskSwitchContext+0xc4>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	3354      	adds	r3, #84	@ 0x54
 800b232:	4a09      	ldr	r2, [pc, #36]	@ (800b258 <vTaskSwitchContext+0xc8>)
 800b234:	6013      	str	r3, [r2, #0]
}
 800b236:	bf00      	nop
 800b238:	3714      	adds	r7, #20
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	2000113c 	.word	0x2000113c
 800b248:	20001128 	.word	0x20001128
 800b24c:	2000111c 	.word	0x2000111c
 800b250:	20000c44 	.word	0x20000c44
 800b254:	20000c40 	.word	0x20000c40
 800b258:	20000118 	.word	0x20000118

0800b25c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d10b      	bne.n	800b284 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b270:	f383 8811 	msr	BASEPRI, r3
 800b274:	f3bf 8f6f 	isb	sy
 800b278:	f3bf 8f4f 	dsb	sy
 800b27c:	60fb      	str	r3, [r7, #12]
}
 800b27e:	bf00      	nop
 800b280:	bf00      	nop
 800b282:	e7fd      	b.n	800b280 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b284:	4b07      	ldr	r3, [pc, #28]	@ (800b2a4 <vTaskPlaceOnEventList+0x48>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	3318      	adds	r3, #24
 800b28a:	4619      	mov	r1, r3
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f7fe fcad 	bl	8009bec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b292:	2101      	movs	r1, #1
 800b294:	6838      	ldr	r0, [r7, #0]
 800b296:	f000 fc77 	bl	800bb88 <prvAddCurrentTaskToDelayedList>
}
 800b29a:	bf00      	nop
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20000c40 	.word	0x20000c40

0800b2a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b086      	sub	sp, #24
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d10b      	bne.n	800b2d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	617b      	str	r3, [r7, #20]
}
 800b2cc:	bf00      	nop
 800b2ce:	bf00      	nop
 800b2d0:	e7fd      	b.n	800b2ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2d2:	4b0a      	ldr	r3, [pc, #40]	@ (800b2fc <vTaskPlaceOnEventListRestricted+0x54>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	3318      	adds	r3, #24
 800b2d8:	4619      	mov	r1, r3
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f7fe fc62 	bl	8009ba4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d002      	beq.n	800b2ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b2ec:	6879      	ldr	r1, [r7, #4]
 800b2ee:	68b8      	ldr	r0, [r7, #8]
 800b2f0:	f000 fc4a 	bl	800bb88 <prvAddCurrentTaskToDelayedList>
	}
 800b2f4:	bf00      	nop
 800b2f6:	3718      	adds	r7, #24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	20000c40 	.word	0x20000c40

0800b300 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d10b      	bne.n	800b32e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b31a:	f383 8811 	msr	BASEPRI, r3
 800b31e:	f3bf 8f6f 	isb	sy
 800b322:	f3bf 8f4f 	dsb	sy
 800b326:	60fb      	str	r3, [r7, #12]
}
 800b328:	bf00      	nop
 800b32a:	bf00      	nop
 800b32c:	e7fd      	b.n	800b32a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	3318      	adds	r3, #24
 800b332:	4618      	mov	r0, r3
 800b334:	f7fe fc93 	bl	8009c5e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b338:	4b1d      	ldr	r3, [pc, #116]	@ (800b3b0 <xTaskRemoveFromEventList+0xb0>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d11d      	bne.n	800b37c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	3304      	adds	r3, #4
 800b344:	4618      	mov	r0, r3
 800b346:	f7fe fc8a 	bl	8009c5e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b34e:	4b19      	ldr	r3, [pc, #100]	@ (800b3b4 <xTaskRemoveFromEventList+0xb4>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	429a      	cmp	r2, r3
 800b354:	d903      	bls.n	800b35e <xTaskRemoveFromEventList+0x5e>
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b35a:	4a16      	ldr	r2, [pc, #88]	@ (800b3b4 <xTaskRemoveFromEventList+0xb4>)
 800b35c:	6013      	str	r3, [r2, #0]
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b362:	4613      	mov	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	4413      	add	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	4a13      	ldr	r2, [pc, #76]	@ (800b3b8 <xTaskRemoveFromEventList+0xb8>)
 800b36c:	441a      	add	r2, r3
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	3304      	adds	r3, #4
 800b372:	4619      	mov	r1, r3
 800b374:	4610      	mov	r0, r2
 800b376:	f7fe fc15 	bl	8009ba4 <vListInsertEnd>
 800b37a:	e005      	b.n	800b388 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	3318      	adds	r3, #24
 800b380:	4619      	mov	r1, r3
 800b382:	480e      	ldr	r0, [pc, #56]	@ (800b3bc <xTaskRemoveFromEventList+0xbc>)
 800b384:	f7fe fc0e 	bl	8009ba4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b38c:	4b0c      	ldr	r3, [pc, #48]	@ (800b3c0 <xTaskRemoveFromEventList+0xc0>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b392:	429a      	cmp	r2, r3
 800b394:	d905      	bls.n	800b3a2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b396:	2301      	movs	r3, #1
 800b398:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b39a:	4b0a      	ldr	r3, [pc, #40]	@ (800b3c4 <xTaskRemoveFromEventList+0xc4>)
 800b39c:	2201      	movs	r2, #1
 800b39e:	601a      	str	r2, [r3, #0]
 800b3a0:	e001      	b.n	800b3a6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b3a6:	697b      	ldr	r3, [r7, #20]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3718      	adds	r7, #24
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	2000113c 	.word	0x2000113c
 800b3b4:	2000111c 	.word	0x2000111c
 800b3b8:	20000c44 	.word	0x20000c44
 800b3bc:	200010d4 	.word	0x200010d4
 800b3c0:	20000c40 	.word	0x20000c40
 800b3c4:	20001128 	.word	0x20001128

0800b3c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b3d0:	4b06      	ldr	r3, [pc, #24]	@ (800b3ec <vTaskInternalSetTimeOutState+0x24>)
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b3d8:	4b05      	ldr	r3, [pc, #20]	@ (800b3f0 <vTaskInternalSetTimeOutState+0x28>)
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	605a      	str	r2, [r3, #4]
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	2000112c 	.word	0x2000112c
 800b3f0:	20001118 	.word	0x20001118

0800b3f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b088      	sub	sp, #32
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10b      	bne.n	800b41c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b408:	f383 8811 	msr	BASEPRI, r3
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f3bf 8f4f 	dsb	sy
 800b414:	613b      	str	r3, [r7, #16]
}
 800b416:	bf00      	nop
 800b418:	bf00      	nop
 800b41a:	e7fd      	b.n	800b418 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d10b      	bne.n	800b43a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b426:	f383 8811 	msr	BASEPRI, r3
 800b42a:	f3bf 8f6f 	isb	sy
 800b42e:	f3bf 8f4f 	dsb	sy
 800b432:	60fb      	str	r3, [r7, #12]
}
 800b434:	bf00      	nop
 800b436:	bf00      	nop
 800b438:	e7fd      	b.n	800b436 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b43a:	f001 f885 	bl	800c548 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b43e:	4b1d      	ldr	r3, [pc, #116]	@ (800b4b4 <xTaskCheckForTimeOut+0xc0>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	69ba      	ldr	r2, [r7, #24]
 800b44a:	1ad3      	subs	r3, r2, r3
 800b44c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b456:	d102      	bne.n	800b45e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b458:	2300      	movs	r3, #0
 800b45a:	61fb      	str	r3, [r7, #28]
 800b45c:	e023      	b.n	800b4a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	4b15      	ldr	r3, [pc, #84]	@ (800b4b8 <xTaskCheckForTimeOut+0xc4>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	429a      	cmp	r2, r3
 800b468:	d007      	beq.n	800b47a <xTaskCheckForTimeOut+0x86>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	69ba      	ldr	r2, [r7, #24]
 800b470:	429a      	cmp	r2, r3
 800b472:	d302      	bcc.n	800b47a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b474:	2301      	movs	r3, #1
 800b476:	61fb      	str	r3, [r7, #28]
 800b478:	e015      	b.n	800b4a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	697a      	ldr	r2, [r7, #20]
 800b480:	429a      	cmp	r2, r3
 800b482:	d20b      	bcs.n	800b49c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	1ad2      	subs	r2, r2, r3
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f7ff ff99 	bl	800b3c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b496:	2300      	movs	r3, #0
 800b498:	61fb      	str	r3, [r7, #28]
 800b49a:	e004      	b.n	800b4a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b4a6:	f001 f881 	bl	800c5ac <vPortExitCritical>

	return xReturn;
 800b4aa:	69fb      	ldr	r3, [r7, #28]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3720      	adds	r7, #32
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	20001118 	.word	0x20001118
 800b4b8:	2000112c 	.word	0x2000112c

0800b4bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b4bc:	b480      	push	{r7}
 800b4be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b4c0:	4b03      	ldr	r3, [pc, #12]	@ (800b4d0 <vTaskMissedYield+0x14>)
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	601a      	str	r2, [r3, #0]
}
 800b4c6:	bf00      	nop
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	20001128 	.word	0x20001128

0800b4d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b4dc:	f000 f852 	bl	800b584 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b4e0:	4b06      	ldr	r3, [pc, #24]	@ (800b4fc <prvIdleTask+0x28>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d9f9      	bls.n	800b4dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b4e8:	4b05      	ldr	r3, [pc, #20]	@ (800b500 <prvIdleTask+0x2c>)
 800b4ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4ee:	601a      	str	r2, [r3, #0]
 800b4f0:	f3bf 8f4f 	dsb	sy
 800b4f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b4f8:	e7f0      	b.n	800b4dc <prvIdleTask+0x8>
 800b4fa:	bf00      	nop
 800b4fc:	20000c44 	.word	0x20000c44
 800b500:	e000ed04 	.word	0xe000ed04

0800b504 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b50a:	2300      	movs	r3, #0
 800b50c:	607b      	str	r3, [r7, #4]
 800b50e:	e00c      	b.n	800b52a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	4613      	mov	r3, r2
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	4413      	add	r3, r2
 800b518:	009b      	lsls	r3, r3, #2
 800b51a:	4a12      	ldr	r2, [pc, #72]	@ (800b564 <prvInitialiseTaskLists+0x60>)
 800b51c:	4413      	add	r3, r2
 800b51e:	4618      	mov	r0, r3
 800b520:	f7fe fb13 	bl	8009b4a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	3301      	adds	r3, #1
 800b528:	607b      	str	r3, [r7, #4]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2b37      	cmp	r3, #55	@ 0x37
 800b52e:	d9ef      	bls.n	800b510 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b530:	480d      	ldr	r0, [pc, #52]	@ (800b568 <prvInitialiseTaskLists+0x64>)
 800b532:	f7fe fb0a 	bl	8009b4a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b536:	480d      	ldr	r0, [pc, #52]	@ (800b56c <prvInitialiseTaskLists+0x68>)
 800b538:	f7fe fb07 	bl	8009b4a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b53c:	480c      	ldr	r0, [pc, #48]	@ (800b570 <prvInitialiseTaskLists+0x6c>)
 800b53e:	f7fe fb04 	bl	8009b4a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b542:	480c      	ldr	r0, [pc, #48]	@ (800b574 <prvInitialiseTaskLists+0x70>)
 800b544:	f7fe fb01 	bl	8009b4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b548:	480b      	ldr	r0, [pc, #44]	@ (800b578 <prvInitialiseTaskLists+0x74>)
 800b54a:	f7fe fafe 	bl	8009b4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b54e:	4b0b      	ldr	r3, [pc, #44]	@ (800b57c <prvInitialiseTaskLists+0x78>)
 800b550:	4a05      	ldr	r2, [pc, #20]	@ (800b568 <prvInitialiseTaskLists+0x64>)
 800b552:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b554:	4b0a      	ldr	r3, [pc, #40]	@ (800b580 <prvInitialiseTaskLists+0x7c>)
 800b556:	4a05      	ldr	r2, [pc, #20]	@ (800b56c <prvInitialiseTaskLists+0x68>)
 800b558:	601a      	str	r2, [r3, #0]
}
 800b55a:	bf00      	nop
 800b55c:	3708      	adds	r7, #8
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	20000c44 	.word	0x20000c44
 800b568:	200010a4 	.word	0x200010a4
 800b56c:	200010b8 	.word	0x200010b8
 800b570:	200010d4 	.word	0x200010d4
 800b574:	200010e8 	.word	0x200010e8
 800b578:	20001100 	.word	0x20001100
 800b57c:	200010cc 	.word	0x200010cc
 800b580:	200010d0 	.word	0x200010d0

0800b584 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b58a:	e019      	b.n	800b5c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b58c:	f000 ffdc 	bl	800c548 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b590:	4b10      	ldr	r3, [pc, #64]	@ (800b5d4 <prvCheckTasksWaitingTermination+0x50>)
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	3304      	adds	r3, #4
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7fe fb5e 	bl	8009c5e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b5a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b5d8 <prvCheckTasksWaitingTermination+0x54>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	4a0b      	ldr	r2, [pc, #44]	@ (800b5d8 <prvCheckTasksWaitingTermination+0x54>)
 800b5aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b5ac:	4b0b      	ldr	r3, [pc, #44]	@ (800b5dc <prvCheckTasksWaitingTermination+0x58>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	4a0a      	ldr	r2, [pc, #40]	@ (800b5dc <prvCheckTasksWaitingTermination+0x58>)
 800b5b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b5b6:	f000 fff9 	bl	800c5ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 f848 	bl	800b650 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5c0:	4b06      	ldr	r3, [pc, #24]	@ (800b5dc <prvCheckTasksWaitingTermination+0x58>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d1e1      	bne.n	800b58c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5c8:	bf00      	nop
 800b5ca:	bf00      	nop
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	200010e8 	.word	0x200010e8
 800b5d8:	20001114 	.word	0x20001114
 800b5dc:	200010fc 	.word	0x200010fc

0800b5e0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b5ec:	e005      	b.n	800b5fa <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	607b      	str	r3, [r7, #4]
			ulCount++;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	2ba5      	cmp	r3, #165	@ 0xa5
 800b600:	d0f5      	beq.n	800b5ee <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	089b      	lsrs	r3, r3, #2
 800b606:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	b29b      	uxth	r3, r3
	}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3714      	adds	r7, #20
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b086      	sub	sp, #24
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d102      	bne.n	800b62c <uxTaskGetStackHighWaterMark+0x14>
 800b626:	4b09      	ldr	r3, [pc, #36]	@ (800b64c <uxTaskGetStackHighWaterMark+0x34>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	e000      	b.n	800b62e <uxTaskGetStackHighWaterMark+0x16>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b634:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800b636:	6938      	ldr	r0, [r7, #16]
 800b638:	f7ff ffd2 	bl	800b5e0 <prvTaskCheckFreeStackSpace>
 800b63c:	4603      	mov	r3, r0
 800b63e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800b640:	68fb      	ldr	r3, [r7, #12]
	}
 800b642:	4618      	mov	r0, r3
 800b644:	3718      	adds	r7, #24
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop
 800b64c:	20000c40 	.word	0x20000c40

0800b650 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	3354      	adds	r3, #84	@ 0x54
 800b65c:	4618      	mov	r0, r3
 800b65e:	f002 f9c1 	bl	800d9e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d108      	bne.n	800b67e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b670:	4618      	mov	r0, r3
 800b672:	f001 f959 	bl	800c928 <vPortFree>
				vPortFree( pxTCB );
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f001 f956 	bl	800c928 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b67c:	e019      	b.n	800b6b2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b684:	2b01      	cmp	r3, #1
 800b686:	d103      	bne.n	800b690 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f001 f94d 	bl	800c928 <vPortFree>
	}
 800b68e:	e010      	b.n	800b6b2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b696:	2b02      	cmp	r3, #2
 800b698:	d00b      	beq.n	800b6b2 <prvDeleteTCB+0x62>
	__asm volatile
 800b69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b69e:	f383 8811 	msr	BASEPRI, r3
 800b6a2:	f3bf 8f6f 	isb	sy
 800b6a6:	f3bf 8f4f 	dsb	sy
 800b6aa:	60fb      	str	r3, [r7, #12]
}
 800b6ac:	bf00      	nop
 800b6ae:	bf00      	nop
 800b6b0:	e7fd      	b.n	800b6ae <prvDeleteTCB+0x5e>
	}
 800b6b2:	bf00      	nop
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
	...

0800b6bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6c2:	4b0c      	ldr	r3, [pc, #48]	@ (800b6f4 <prvResetNextTaskUnblockTime+0x38>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d104      	bne.n	800b6d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b6cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b6f8 <prvResetNextTaskUnblockTime+0x3c>)
 800b6ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b6d4:	e008      	b.n	800b6e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6d6:	4b07      	ldr	r3, [pc, #28]	@ (800b6f4 <prvResetNextTaskUnblockTime+0x38>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	4a04      	ldr	r2, [pc, #16]	@ (800b6f8 <prvResetNextTaskUnblockTime+0x3c>)
 800b6e6:	6013      	str	r3, [r2, #0]
}
 800b6e8:	bf00      	nop
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr
 800b6f4:	200010cc 	.word	0x200010cc
 800b6f8:	20001134 	.word	0x20001134

0800b6fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b702:	4b05      	ldr	r3, [pc, #20]	@ (800b718 <xTaskGetCurrentTaskHandle+0x1c>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b708:	687b      	ldr	r3, [r7, #4]
	}
 800b70a:	4618      	mov	r0, r3
 800b70c:	370c      	adds	r7, #12
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	20000c40 	.word	0x20000c40

0800b71c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b722:	4b0b      	ldr	r3, [pc, #44]	@ (800b750 <xTaskGetSchedulerState+0x34>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d102      	bne.n	800b730 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b72a:	2301      	movs	r3, #1
 800b72c:	607b      	str	r3, [r7, #4]
 800b72e:	e008      	b.n	800b742 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b730:	4b08      	ldr	r3, [pc, #32]	@ (800b754 <xTaskGetSchedulerState+0x38>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d102      	bne.n	800b73e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b738:	2302      	movs	r3, #2
 800b73a:	607b      	str	r3, [r7, #4]
 800b73c:	e001      	b.n	800b742 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b73e:	2300      	movs	r3, #0
 800b740:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b742:	687b      	ldr	r3, [r7, #4]
	}
 800b744:	4618      	mov	r0, r3
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr
 800b750:	20001120 	.word	0x20001120
 800b754:	2000113c 	.word	0x2000113c

0800b758 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b086      	sub	sp, #24
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b764:	2300      	movs	r3, #0
 800b766:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d058      	beq.n	800b820 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b76e:	4b2f      	ldr	r3, [pc, #188]	@ (800b82c <xTaskPriorityDisinherit+0xd4>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	693a      	ldr	r2, [r7, #16]
 800b774:	429a      	cmp	r2, r3
 800b776:	d00b      	beq.n	800b790 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b77c:	f383 8811 	msr	BASEPRI, r3
 800b780:	f3bf 8f6f 	isb	sy
 800b784:	f3bf 8f4f 	dsb	sy
 800b788:	60fb      	str	r3, [r7, #12]
}
 800b78a:	bf00      	nop
 800b78c:	bf00      	nop
 800b78e:	e7fd      	b.n	800b78c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b794:	2b00      	cmp	r3, #0
 800b796:	d10b      	bne.n	800b7b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b79c:	f383 8811 	msr	BASEPRI, r3
 800b7a0:	f3bf 8f6f 	isb	sy
 800b7a4:	f3bf 8f4f 	dsb	sy
 800b7a8:	60bb      	str	r3, [r7, #8]
}
 800b7aa:	bf00      	nop
 800b7ac:	bf00      	nop
 800b7ae:	e7fd      	b.n	800b7ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7b4:	1e5a      	subs	r2, r3, #1
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d02c      	beq.n	800b820 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d128      	bne.n	800b820 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	3304      	adds	r3, #4
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f7fe fa43 	bl	8009c5e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7f0:	4b0f      	ldr	r3, [pc, #60]	@ (800b830 <xTaskPriorityDisinherit+0xd8>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d903      	bls.n	800b800 <xTaskPriorityDisinherit+0xa8>
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7fc:	4a0c      	ldr	r2, [pc, #48]	@ (800b830 <xTaskPriorityDisinherit+0xd8>)
 800b7fe:	6013      	str	r3, [r2, #0]
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b804:	4613      	mov	r3, r2
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	4413      	add	r3, r2
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	4a09      	ldr	r2, [pc, #36]	@ (800b834 <xTaskPriorityDisinherit+0xdc>)
 800b80e:	441a      	add	r2, r3
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	3304      	adds	r3, #4
 800b814:	4619      	mov	r1, r3
 800b816:	4610      	mov	r0, r2
 800b818:	f7fe f9c4 	bl	8009ba4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b81c:	2301      	movs	r3, #1
 800b81e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b820:	697b      	ldr	r3, [r7, #20]
	}
 800b822:	4618      	mov	r0, r3
 800b824:	3718      	adds	r7, #24
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	20000c40 	.word	0x20000c40
 800b830:	2000111c 	.word	0x2000111c
 800b834:	20000c44 	.word	0x20000c44

0800b838 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b08a      	sub	sp, #40	@ 0x28
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	603b      	str	r3, [r7, #0]
 800b844:	4613      	mov	r3, r2
 800b846:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b848:	2301      	movs	r3, #1
 800b84a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10b      	bne.n	800b86a <xTaskGenericNotify+0x32>
	__asm volatile
 800b852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b856:	f383 8811 	msr	BASEPRI, r3
 800b85a:	f3bf 8f6f 	isb	sy
 800b85e:	f3bf 8f4f 	dsb	sy
 800b862:	61bb      	str	r3, [r7, #24]
}
 800b864:	bf00      	nop
 800b866:	bf00      	nop
 800b868:	e7fd      	b.n	800b866 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b86e:	f000 fe6b 	bl	800c548 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d004      	beq.n	800b882 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b878:	6a3b      	ldr	r3, [r7, #32]
 800b87a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b882:	6a3b      	ldr	r3, [r7, #32]
 800b884:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b888:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	2202      	movs	r2, #2
 800b88e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800b892:	79fb      	ldrb	r3, [r7, #7]
 800b894:	2b04      	cmp	r3, #4
 800b896:	d82e      	bhi.n	800b8f6 <xTaskGenericNotify+0xbe>
 800b898:	a201      	add	r2, pc, #4	@ (adr r2, 800b8a0 <xTaskGenericNotify+0x68>)
 800b89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b89e:	bf00      	nop
 800b8a0:	0800b91b 	.word	0x0800b91b
 800b8a4:	0800b8b5 	.word	0x0800b8b5
 800b8a8:	0800b8c7 	.word	0x0800b8c7
 800b8ac:	0800b8d7 	.word	0x0800b8d7
 800b8b0:	0800b8e1 	.word	0x0800b8e1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b8b4:	6a3b      	ldr	r3, [r7, #32]
 800b8b6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	431a      	orrs	r2, r3
 800b8be:	6a3b      	ldr	r3, [r7, #32]
 800b8c0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b8c4:	e02c      	b.n	800b920 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b8c6:	6a3b      	ldr	r3, [r7, #32]
 800b8c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b8cc:	1c5a      	adds	r2, r3, #1
 800b8ce:	6a3b      	ldr	r3, [r7, #32]
 800b8d0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b8d4:	e024      	b.n	800b920 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b8d6:	6a3b      	ldr	r3, [r7, #32]
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b8de:	e01f      	b.n	800b920 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b8e0:	7ffb      	ldrb	r3, [r7, #31]
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d004      	beq.n	800b8f0 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b8e6:	6a3b      	ldr	r3, [r7, #32]
 800b8e8:	68ba      	ldr	r2, [r7, #8]
 800b8ea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b8ee:	e017      	b.n	800b920 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800b8f4:	e014      	b.n	800b920 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b8f6:	6a3b      	ldr	r3, [r7, #32]
 800b8f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b900:	d00d      	beq.n	800b91e <xTaskGenericNotify+0xe6>
	__asm volatile
 800b902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b906:	f383 8811 	msr	BASEPRI, r3
 800b90a:	f3bf 8f6f 	isb	sy
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	617b      	str	r3, [r7, #20]
}
 800b914:	bf00      	nop
 800b916:	bf00      	nop
 800b918:	e7fd      	b.n	800b916 <xTaskGenericNotify+0xde>
					break;
 800b91a:	bf00      	nop
 800b91c:	e000      	b.n	800b920 <xTaskGenericNotify+0xe8>

					break;
 800b91e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b920:	7ffb      	ldrb	r3, [r7, #31]
 800b922:	2b01      	cmp	r3, #1
 800b924:	d13b      	bne.n	800b99e <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b926:	6a3b      	ldr	r3, [r7, #32]
 800b928:	3304      	adds	r3, #4
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7fe f997 	bl	8009c5e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b930:	6a3b      	ldr	r3, [r7, #32]
 800b932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b934:	4b1d      	ldr	r3, [pc, #116]	@ (800b9ac <xTaskGenericNotify+0x174>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d903      	bls.n	800b944 <xTaskGenericNotify+0x10c>
 800b93c:	6a3b      	ldr	r3, [r7, #32]
 800b93e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b940:	4a1a      	ldr	r2, [pc, #104]	@ (800b9ac <xTaskGenericNotify+0x174>)
 800b942:	6013      	str	r3, [r2, #0]
 800b944:	6a3b      	ldr	r3, [r7, #32]
 800b946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b948:	4613      	mov	r3, r2
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	4413      	add	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	4a17      	ldr	r2, [pc, #92]	@ (800b9b0 <xTaskGenericNotify+0x178>)
 800b952:	441a      	add	r2, r3
 800b954:	6a3b      	ldr	r3, [r7, #32]
 800b956:	3304      	adds	r3, #4
 800b958:	4619      	mov	r1, r3
 800b95a:	4610      	mov	r0, r2
 800b95c:	f7fe f922 	bl	8009ba4 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b960:	6a3b      	ldr	r3, [r7, #32]
 800b962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b964:	2b00      	cmp	r3, #0
 800b966:	d00b      	beq.n	800b980 <xTaskGenericNotify+0x148>
	__asm volatile
 800b968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b96c:	f383 8811 	msr	BASEPRI, r3
 800b970:	f3bf 8f6f 	isb	sy
 800b974:	f3bf 8f4f 	dsb	sy
 800b978:	613b      	str	r3, [r7, #16]
}
 800b97a:	bf00      	nop
 800b97c:	bf00      	nop
 800b97e:	e7fd      	b.n	800b97c <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b980:	6a3b      	ldr	r3, [r7, #32]
 800b982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b984:	4b0b      	ldr	r3, [pc, #44]	@ (800b9b4 <xTaskGenericNotify+0x17c>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d907      	bls.n	800b99e <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b98e:	4b0a      	ldr	r3, [pc, #40]	@ (800b9b8 <xTaskGenericNotify+0x180>)
 800b990:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b994:	601a      	str	r2, [r3, #0]
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b99e:	f000 fe05 	bl	800c5ac <vPortExitCritical>

		return xReturn;
 800b9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3728      	adds	r7, #40	@ 0x28
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	2000111c 	.word	0x2000111c
 800b9b0:	20000c44 	.word	0x20000c44
 800b9b4:	20000c40 	.word	0x20000c40
 800b9b8:	e000ed04 	.word	0xe000ed04

0800b9bc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b08e      	sub	sp, #56	@ 0x38
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	603b      	str	r3, [r7, #0]
 800b9c8:	4613      	mov	r3, r2
 800b9ca:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d10b      	bne.n	800b9ee <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800b9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9da:	f383 8811 	msr	BASEPRI, r3
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f3bf 8f4f 	dsb	sy
 800b9e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b9e8:	bf00      	nop
 800b9ea:	bf00      	nop
 800b9ec:	e7fd      	b.n	800b9ea <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9ee:	f000 fe8b 	bl	800c708 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800b9f6:	f3ef 8211 	mrs	r2, BASEPRI
 800b9fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9fe:	f383 8811 	msr	BASEPRI, r3
 800ba02:	f3bf 8f6f 	isb	sy
 800ba06:	f3bf 8f4f 	dsb	sy
 800ba0a:	623a      	str	r2, [r7, #32]
 800ba0c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800ba0e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba10:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d004      	beq.n	800ba22 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ba18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba1a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ba22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba24:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ba28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2e:	2202      	movs	r2, #2
 800ba30:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800ba34:	79fb      	ldrb	r3, [r7, #7]
 800ba36:	2b04      	cmp	r3, #4
 800ba38:	d82e      	bhi.n	800ba98 <xTaskGenericNotifyFromISR+0xdc>
 800ba3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba40 <xTaskGenericNotifyFromISR+0x84>)
 800ba3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba40:	0800babd 	.word	0x0800babd
 800ba44:	0800ba55 	.word	0x0800ba55
 800ba48:	0800ba67 	.word	0x0800ba67
 800ba4c:	0800ba77 	.word	0x0800ba77
 800ba50:	0800ba81 	.word	0x0800ba81
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ba54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba56:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	431a      	orrs	r2, r3
 800ba5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba60:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ba64:	e02d      	b.n	800bac2 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ba66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ba6c:	1c5a      	adds	r2, r3, #1
 800ba6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba70:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ba74:	e025      	b.n	800bac2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ba76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ba7e:	e020      	b.n	800bac2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ba80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba84:	2b02      	cmp	r3, #2
 800ba86:	d004      	beq.n	800ba92 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ba88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ba90:	e017      	b.n	800bac2 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800ba92:	2300      	movs	r3, #0
 800ba94:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800ba96:	e014      	b.n	800bac2 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ba98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ba9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa2:	d00d      	beq.n	800bac0 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800baa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa8:	f383 8811 	msr	BASEPRI, r3
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	61bb      	str	r3, [r7, #24]
}
 800bab6:	bf00      	nop
 800bab8:	bf00      	nop
 800baba:	e7fd      	b.n	800bab8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800babc:	bf00      	nop
 800babe:	e000      	b.n	800bac2 <xTaskGenericNotifyFromISR+0x106>
					break;
 800bac0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bac2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d147      	bne.n	800bb5a <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800baca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bacc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d00b      	beq.n	800baea <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800bad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bad6:	f383 8811 	msr	BASEPRI, r3
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	617b      	str	r3, [r7, #20]
}
 800bae4:	bf00      	nop
 800bae6:	bf00      	nop
 800bae8:	e7fd      	b.n	800bae6 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800baea:	4b21      	ldr	r3, [pc, #132]	@ (800bb70 <xTaskGenericNotifyFromISR+0x1b4>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d11d      	bne.n	800bb2e <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800baf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf4:	3304      	adds	r3, #4
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fe f8b1 	bl	8009c5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bafc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bafe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb00:	4b1c      	ldr	r3, [pc, #112]	@ (800bb74 <xTaskGenericNotifyFromISR+0x1b8>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d903      	bls.n	800bb10 <xTaskGenericNotifyFromISR+0x154>
 800bb08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb0c:	4a19      	ldr	r2, [pc, #100]	@ (800bb74 <xTaskGenericNotifyFromISR+0x1b8>)
 800bb0e:	6013      	str	r3, [r2, #0]
 800bb10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb14:	4613      	mov	r3, r2
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	4413      	add	r3, r2
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	4a16      	ldr	r2, [pc, #88]	@ (800bb78 <xTaskGenericNotifyFromISR+0x1bc>)
 800bb1e:	441a      	add	r2, r3
 800bb20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb22:	3304      	adds	r3, #4
 800bb24:	4619      	mov	r1, r3
 800bb26:	4610      	mov	r0, r2
 800bb28:	f7fe f83c 	bl	8009ba4 <vListInsertEnd>
 800bb2c:	e005      	b.n	800bb3a <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800bb2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb30:	3318      	adds	r3, #24
 800bb32:	4619      	mov	r1, r3
 800bb34:	4811      	ldr	r0, [pc, #68]	@ (800bb7c <xTaskGenericNotifyFromISR+0x1c0>)
 800bb36:	f7fe f835 	bl	8009ba4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb3e:	4b10      	ldr	r3, [pc, #64]	@ (800bb80 <xTaskGenericNotifyFromISR+0x1c4>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d908      	bls.n	800bb5a <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800bb48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d002      	beq.n	800bb54 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800bb4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb50:	2201      	movs	r2, #1
 800bb52:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800bb54:	4b0b      	ldr	r3, [pc, #44]	@ (800bb84 <xTaskGenericNotifyFromISR+0x1c8>)
 800bb56:	2201      	movs	r2, #1
 800bb58:	601a      	str	r2, [r3, #0]
 800bb5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	f383 8811 	msr	BASEPRI, r3
}
 800bb64:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800bb66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3738      	adds	r7, #56	@ 0x38
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	2000113c 	.word	0x2000113c
 800bb74:	2000111c 	.word	0x2000111c
 800bb78:	20000c44 	.word	0x20000c44
 800bb7c:	200010d4 	.word	0x200010d4
 800bb80:	20000c40 	.word	0x20000c40
 800bb84:	20001128 	.word	0x20001128

0800bb88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb92:	4b21      	ldr	r3, [pc, #132]	@ (800bc18 <prvAddCurrentTaskToDelayedList+0x90>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb98:	4b20      	ldr	r3, [pc, #128]	@ (800bc1c <prvAddCurrentTaskToDelayedList+0x94>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	3304      	adds	r3, #4
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fe f85d 	bl	8009c5e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbaa:	d10a      	bne.n	800bbc2 <prvAddCurrentTaskToDelayedList+0x3a>
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d007      	beq.n	800bbc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbb2:	4b1a      	ldr	r3, [pc, #104]	@ (800bc1c <prvAddCurrentTaskToDelayedList+0x94>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	3304      	adds	r3, #4
 800bbb8:	4619      	mov	r1, r3
 800bbba:	4819      	ldr	r0, [pc, #100]	@ (800bc20 <prvAddCurrentTaskToDelayedList+0x98>)
 800bbbc:	f7fd fff2 	bl	8009ba4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bbc0:	e026      	b.n	800bc10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	4413      	add	r3, r2
 800bbc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bbca:	4b14      	ldr	r3, [pc, #80]	@ (800bc1c <prvAddCurrentTaskToDelayedList+0x94>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	68ba      	ldr	r2, [r7, #8]
 800bbd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bbd2:	68ba      	ldr	r2, [r7, #8]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d209      	bcs.n	800bbee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbda:	4b12      	ldr	r3, [pc, #72]	@ (800bc24 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	4b0f      	ldr	r3, [pc, #60]	@ (800bc1c <prvAddCurrentTaskToDelayedList+0x94>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	3304      	adds	r3, #4
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	4610      	mov	r0, r2
 800bbe8:	f7fe f800 	bl	8009bec <vListInsert>
}
 800bbec:	e010      	b.n	800bc10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbee:	4b0e      	ldr	r3, [pc, #56]	@ (800bc28 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	4b0a      	ldr	r3, [pc, #40]	@ (800bc1c <prvAddCurrentTaskToDelayedList+0x94>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	3304      	adds	r3, #4
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	4610      	mov	r0, r2
 800bbfc:	f7fd fff6 	bl	8009bec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc00:	4b0a      	ldr	r3, [pc, #40]	@ (800bc2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	68ba      	ldr	r2, [r7, #8]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d202      	bcs.n	800bc10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc0a:	4a08      	ldr	r2, [pc, #32]	@ (800bc2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	6013      	str	r3, [r2, #0]
}
 800bc10:	bf00      	nop
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	20001118 	.word	0x20001118
 800bc1c:	20000c40 	.word	0x20000c40
 800bc20:	20001100 	.word	0x20001100
 800bc24:	200010d0 	.word	0x200010d0
 800bc28:	200010cc 	.word	0x200010cc
 800bc2c:	20001134 	.word	0x20001134

0800bc30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b08a      	sub	sp, #40	@ 0x28
 800bc34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc36:	2300      	movs	r3, #0
 800bc38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc3a:	f000 fb13 	bl	800c264 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc3e:	4b1d      	ldr	r3, [pc, #116]	@ (800bcb4 <xTimerCreateTimerTask+0x84>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d021      	beq.n	800bc8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc46:	2300      	movs	r3, #0
 800bc48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc4e:	1d3a      	adds	r2, r7, #4
 800bc50:	f107 0108 	add.w	r1, r7, #8
 800bc54:	f107 030c 	add.w	r3, r7, #12
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7fd ff09 	bl	8009a70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc5e:	6879      	ldr	r1, [r7, #4]
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	9202      	str	r2, [sp, #8]
 800bc66:	9301      	str	r3, [sp, #4]
 800bc68:	2302      	movs	r3, #2
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	460a      	mov	r2, r1
 800bc70:	4911      	ldr	r1, [pc, #68]	@ (800bcb8 <xTimerCreateTimerTask+0x88>)
 800bc72:	4812      	ldr	r0, [pc, #72]	@ (800bcbc <xTimerCreateTimerTask+0x8c>)
 800bc74:	f7fe fdd6 	bl	800a824 <xTaskCreateStatic>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	4a11      	ldr	r2, [pc, #68]	@ (800bcc0 <xTimerCreateTimerTask+0x90>)
 800bc7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bc7e:	4b10      	ldr	r3, [pc, #64]	@ (800bcc0 <xTimerCreateTimerTask+0x90>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d001      	beq.n	800bc8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bc86:	2301      	movs	r3, #1
 800bc88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10b      	bne.n	800bca8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	613b      	str	r3, [r7, #16]
}
 800bca2:	bf00      	nop
 800bca4:	bf00      	nop
 800bca6:	e7fd      	b.n	800bca4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bca8:	697b      	ldr	r3, [r7, #20]
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3718      	adds	r7, #24
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	20001170 	.word	0x20001170
 800bcb8:	0800e634 	.word	0x0800e634
 800bcbc:	0800bdfd 	.word	0x0800bdfd
 800bcc0:	20001174 	.word	0x20001174

0800bcc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b08a      	sub	sp, #40	@ 0x28
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	607a      	str	r2, [r7, #4]
 800bcd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10b      	bne.n	800bcf4 <xTimerGenericCommand+0x30>
	__asm volatile
 800bcdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce0:	f383 8811 	msr	BASEPRI, r3
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	f3bf 8f4f 	dsb	sy
 800bcec:	623b      	str	r3, [r7, #32]
}
 800bcee:	bf00      	nop
 800bcf0:	bf00      	nop
 800bcf2:	e7fd      	b.n	800bcf0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bcf4:	4b19      	ldr	r3, [pc, #100]	@ (800bd5c <xTimerGenericCommand+0x98>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d02a      	beq.n	800bd52 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	2b05      	cmp	r3, #5
 800bd0c:	dc18      	bgt.n	800bd40 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd0e:	f7ff fd05 	bl	800b71c <xTaskGetSchedulerState>
 800bd12:	4603      	mov	r3, r0
 800bd14:	2b02      	cmp	r3, #2
 800bd16:	d109      	bne.n	800bd2c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd18:	4b10      	ldr	r3, [pc, #64]	@ (800bd5c <xTimerGenericCommand+0x98>)
 800bd1a:	6818      	ldr	r0, [r3, #0]
 800bd1c:	f107 0110 	add.w	r1, r7, #16
 800bd20:	2300      	movs	r3, #0
 800bd22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd24:	f7fe f90c 	bl	8009f40 <xQueueGenericSend>
 800bd28:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd2a:	e012      	b.n	800bd52 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd2c:	4b0b      	ldr	r3, [pc, #44]	@ (800bd5c <xTimerGenericCommand+0x98>)
 800bd2e:	6818      	ldr	r0, [r3, #0]
 800bd30:	f107 0110 	add.w	r1, r7, #16
 800bd34:	2300      	movs	r3, #0
 800bd36:	2200      	movs	r2, #0
 800bd38:	f7fe f902 	bl	8009f40 <xQueueGenericSend>
 800bd3c:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd3e:	e008      	b.n	800bd52 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd40:	4b06      	ldr	r3, [pc, #24]	@ (800bd5c <xTimerGenericCommand+0x98>)
 800bd42:	6818      	ldr	r0, [r3, #0]
 800bd44:	f107 0110 	add.w	r1, r7, #16
 800bd48:	2300      	movs	r3, #0
 800bd4a:	683a      	ldr	r2, [r7, #0]
 800bd4c:	f7fe f9fa 	bl	800a144 <xQueueGenericSendFromISR>
 800bd50:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3728      	adds	r7, #40	@ 0x28
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	20001170 	.word	0x20001170

0800bd60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b088      	sub	sp, #32
 800bd64:	af02      	add	r7, sp, #8
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd6a:	4b23      	ldr	r3, [pc, #140]	@ (800bdf8 <prvProcessExpiredTimer+0x98>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	68db      	ldr	r3, [r3, #12]
 800bd72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	3304      	adds	r3, #4
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7fd ff70 	bl	8009c5e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd84:	f003 0304 	and.w	r3, r3, #4
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d023      	beq.n	800bdd4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	699a      	ldr	r2, [r3, #24]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	18d1      	adds	r1, r2, r3
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	683a      	ldr	r2, [r7, #0]
 800bd98:	6978      	ldr	r0, [r7, #20]
 800bd9a:	f000 f8d5 	bl	800bf48 <prvInsertTimerInActiveList>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d020      	beq.n	800bde6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bda4:	2300      	movs	r3, #0
 800bda6:	9300      	str	r3, [sp, #0]
 800bda8:	2300      	movs	r3, #0
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	2100      	movs	r1, #0
 800bdae:	6978      	ldr	r0, [r7, #20]
 800bdb0:	f7ff ff88 	bl	800bcc4 <xTimerGenericCommand>
 800bdb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d114      	bne.n	800bde6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bdbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc0:	f383 8811 	msr	BASEPRI, r3
 800bdc4:	f3bf 8f6f 	isb	sy
 800bdc8:	f3bf 8f4f 	dsb	sy
 800bdcc:	60fb      	str	r3, [r7, #12]
}
 800bdce:	bf00      	nop
 800bdd0:	bf00      	nop
 800bdd2:	e7fd      	b.n	800bdd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdda:	f023 0301 	bic.w	r3, r3, #1
 800bdde:	b2da      	uxtb	r2, r3
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	6a1b      	ldr	r3, [r3, #32]
 800bdea:	6978      	ldr	r0, [r7, #20]
 800bdec:	4798      	blx	r3
}
 800bdee:	bf00      	nop
 800bdf0:	3718      	adds	r7, #24
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	20001168 	.word	0x20001168

0800bdfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be04:	f107 0308 	add.w	r3, r7, #8
 800be08:	4618      	mov	r0, r3
 800be0a:	f000 f859 	bl	800bec0 <prvGetNextExpireTime>
 800be0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	4619      	mov	r1, r3
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	f000 f805 	bl	800be24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be1a:	f000 f8d7 	bl	800bfcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be1e:	bf00      	nop
 800be20:	e7f0      	b.n	800be04 <prvTimerTask+0x8>
	...

0800be24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be2e:	f7ff f839 	bl	800aea4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be32:	f107 0308 	add.w	r3, r7, #8
 800be36:	4618      	mov	r0, r3
 800be38:	f000 f866 	bl	800bf08 <prvSampleTimeNow>
 800be3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d130      	bne.n	800bea6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d10a      	bne.n	800be60 <prvProcessTimerOrBlockTask+0x3c>
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	429a      	cmp	r2, r3
 800be50:	d806      	bhi.n	800be60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be52:	f7ff f835 	bl	800aec0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be56:	68f9      	ldr	r1, [r7, #12]
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f7ff ff81 	bl	800bd60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be5e:	e024      	b.n	800beaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d008      	beq.n	800be78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be66:	4b13      	ldr	r3, [pc, #76]	@ (800beb4 <prvProcessTimerOrBlockTask+0x90>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d101      	bne.n	800be74 <prvProcessTimerOrBlockTask+0x50>
 800be70:	2301      	movs	r3, #1
 800be72:	e000      	b.n	800be76 <prvProcessTimerOrBlockTask+0x52>
 800be74:	2300      	movs	r3, #0
 800be76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be78:	4b0f      	ldr	r3, [pc, #60]	@ (800beb8 <prvProcessTimerOrBlockTask+0x94>)
 800be7a:	6818      	ldr	r0, [r3, #0]
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	1ad3      	subs	r3, r2, r3
 800be82:	683a      	ldr	r2, [r7, #0]
 800be84:	4619      	mov	r1, r3
 800be86:	f7fe fc99 	bl	800a7bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be8a:	f7ff f819 	bl	800aec0 <xTaskResumeAll>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d10a      	bne.n	800beaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800be94:	4b09      	ldr	r3, [pc, #36]	@ (800bebc <prvProcessTimerOrBlockTask+0x98>)
 800be96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be9a:	601a      	str	r2, [r3, #0]
 800be9c:	f3bf 8f4f 	dsb	sy
 800bea0:	f3bf 8f6f 	isb	sy
}
 800bea4:	e001      	b.n	800beaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bea6:	f7ff f80b 	bl	800aec0 <xTaskResumeAll>
}
 800beaa:	bf00      	nop
 800beac:	3710      	adds	r7, #16
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	2000116c 	.word	0x2000116c
 800beb8:	20001170 	.word	0x20001170
 800bebc:	e000ed04 	.word	0xe000ed04

0800bec0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bec8:	4b0e      	ldr	r3, [pc, #56]	@ (800bf04 <prvGetNextExpireTime+0x44>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d101      	bne.n	800bed6 <prvGetNextExpireTime+0x16>
 800bed2:	2201      	movs	r2, #1
 800bed4:	e000      	b.n	800bed8 <prvGetNextExpireTime+0x18>
 800bed6:	2200      	movs	r2, #0
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d105      	bne.n	800bef0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bee4:	4b07      	ldr	r3, [pc, #28]	@ (800bf04 <prvGetNextExpireTime+0x44>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	60fb      	str	r3, [r7, #12]
 800beee:	e001      	b.n	800bef4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bef0:	2300      	movs	r3, #0
 800bef2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bef4:	68fb      	ldr	r3, [r7, #12]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3714      	adds	r7, #20
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop
 800bf04:	20001168 	.word	0x20001168

0800bf08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf10:	f7ff f874 	bl	800affc <xTaskGetTickCount>
 800bf14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf16:	4b0b      	ldr	r3, [pc, #44]	@ (800bf44 <prvSampleTimeNow+0x3c>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	68fa      	ldr	r2, [r7, #12]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d205      	bcs.n	800bf2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf20:	f000 f93a 	bl	800c198 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2201      	movs	r2, #1
 800bf28:	601a      	str	r2, [r3, #0]
 800bf2a:	e002      	b.n	800bf32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf32:	4a04      	ldr	r2, [pc, #16]	@ (800bf44 <prvSampleTimeNow+0x3c>)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf38:	68fb      	ldr	r3, [r7, #12]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3710      	adds	r7, #16
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	20001178 	.word	0x20001178

0800bf48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b086      	sub	sp, #24
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	607a      	str	r2, [r7, #4]
 800bf54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf56:	2300      	movs	r3, #0
 800bf58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	68fa      	ldr	r2, [r7, #12]
 800bf64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf66:	68ba      	ldr	r2, [r7, #8]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d812      	bhi.n	800bf94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	1ad2      	subs	r2, r2, r3
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	699b      	ldr	r3, [r3, #24]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d302      	bcc.n	800bf82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	617b      	str	r3, [r7, #20]
 800bf80:	e01b      	b.n	800bfba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf82:	4b10      	ldr	r3, [pc, #64]	@ (800bfc4 <prvInsertTimerInActiveList+0x7c>)
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	3304      	adds	r3, #4
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	4610      	mov	r0, r2
 800bf8e:	f7fd fe2d 	bl	8009bec <vListInsert>
 800bf92:	e012      	b.n	800bfba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d206      	bcs.n	800bfaa <prvInsertTimerInActiveList+0x62>
 800bf9c:	68ba      	ldr	r2, [r7, #8]
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d302      	bcc.n	800bfaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	617b      	str	r3, [r7, #20]
 800bfa8:	e007      	b.n	800bfba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfaa:	4b07      	ldr	r3, [pc, #28]	@ (800bfc8 <prvInsertTimerInActiveList+0x80>)
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	3304      	adds	r3, #4
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	4610      	mov	r0, r2
 800bfb6:	f7fd fe19 	bl	8009bec <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bfba:	697b      	ldr	r3, [r7, #20]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3718      	adds	r7, #24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	2000116c 	.word	0x2000116c
 800bfc8:	20001168 	.word	0x20001168

0800bfcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b08e      	sub	sp, #56	@ 0x38
 800bfd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfd2:	e0ce      	b.n	800c172 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	da19      	bge.n	800c00e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bfda:	1d3b      	adds	r3, r7, #4
 800bfdc:	3304      	adds	r3, #4
 800bfde:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bfe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d10b      	bne.n	800bffe <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bfe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfea:	f383 8811 	msr	BASEPRI, r3
 800bfee:	f3bf 8f6f 	isb	sy
 800bff2:	f3bf 8f4f 	dsb	sy
 800bff6:	61fb      	str	r3, [r7, #28]
}
 800bff8:	bf00      	nop
 800bffa:	bf00      	nop
 800bffc:	e7fd      	b.n	800bffa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c004:	6850      	ldr	r0, [r2, #4]
 800c006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c008:	6892      	ldr	r2, [r2, #8]
 800c00a:	4611      	mov	r1, r2
 800c00c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2b00      	cmp	r3, #0
 800c012:	f2c0 80ae 	blt.w	800c172 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c01c:	695b      	ldr	r3, [r3, #20]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d004      	beq.n	800c02c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c024:	3304      	adds	r3, #4
 800c026:	4618      	mov	r0, r3
 800c028:	f7fd fe19 	bl	8009c5e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c02c:	463b      	mov	r3, r7
 800c02e:	4618      	mov	r0, r3
 800c030:	f7ff ff6a 	bl	800bf08 <prvSampleTimeNow>
 800c034:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2b09      	cmp	r3, #9
 800c03a:	f200 8097 	bhi.w	800c16c <prvProcessReceivedCommands+0x1a0>
 800c03e:	a201      	add	r2, pc, #4	@ (adr r2, 800c044 <prvProcessReceivedCommands+0x78>)
 800c040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c044:	0800c06d 	.word	0x0800c06d
 800c048:	0800c06d 	.word	0x0800c06d
 800c04c:	0800c06d 	.word	0x0800c06d
 800c050:	0800c0e3 	.word	0x0800c0e3
 800c054:	0800c0f7 	.word	0x0800c0f7
 800c058:	0800c143 	.word	0x0800c143
 800c05c:	0800c06d 	.word	0x0800c06d
 800c060:	0800c06d 	.word	0x0800c06d
 800c064:	0800c0e3 	.word	0x0800c0e3
 800c068:	0800c0f7 	.word	0x0800c0f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c06e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c072:	f043 0301 	orr.w	r3, r3, #1
 800c076:	b2da      	uxtb	r2, r3
 800c078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c07a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c082:	699b      	ldr	r3, [r3, #24]
 800c084:	18d1      	adds	r1, r2, r3
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c08a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c08c:	f7ff ff5c 	bl	800bf48 <prvInsertTimerInActiveList>
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d06c      	beq.n	800c170 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c098:	6a1b      	ldr	r3, [r3, #32]
 800c09a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c09c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0a4:	f003 0304 	and.w	r3, r3, #4
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d061      	beq.n	800c170 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c0ac:	68ba      	ldr	r2, [r7, #8]
 800c0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b0:	699b      	ldr	r3, [r3, #24]
 800c0b2:	441a      	add	r2, r3
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	2100      	movs	r1, #0
 800c0bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0be:	f7ff fe01 	bl	800bcc4 <xTimerGenericCommand>
 800c0c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c0c4:	6a3b      	ldr	r3, [r7, #32]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d152      	bne.n	800c170 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ce:	f383 8811 	msr	BASEPRI, r3
 800c0d2:	f3bf 8f6f 	isb	sy
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	61bb      	str	r3, [r7, #24]
}
 800c0dc:	bf00      	nop
 800c0de:	bf00      	nop
 800c0e0:	e7fd      	b.n	800c0de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0e8:	f023 0301 	bic.w	r3, r3, #1
 800c0ec:	b2da      	uxtb	r2, r3
 800c0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c0f4:	e03d      	b.n	800c172 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0fc:	f043 0301 	orr.w	r3, r3, #1
 800c100:	b2da      	uxtb	r2, r3
 800c102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c104:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c108:	68ba      	ldr	r2, [r7, #8]
 800c10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c10c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c110:	699b      	ldr	r3, [r3, #24]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d10b      	bne.n	800c12e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c11a:	f383 8811 	msr	BASEPRI, r3
 800c11e:	f3bf 8f6f 	isb	sy
 800c122:	f3bf 8f4f 	dsb	sy
 800c126:	617b      	str	r3, [r7, #20]
}
 800c128:	bf00      	nop
 800c12a:	bf00      	nop
 800c12c:	e7fd      	b.n	800c12a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c130:	699a      	ldr	r2, [r3, #24]
 800c132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c134:	18d1      	adds	r1, r2, r3
 800c136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c13a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c13c:	f7ff ff04 	bl	800bf48 <prvInsertTimerInActiveList>
					break;
 800c140:	e017      	b.n	800c172 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c144:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c148:	f003 0302 	and.w	r3, r3, #2
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d103      	bne.n	800c158 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c150:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c152:	f000 fbe9 	bl	800c928 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c156:	e00c      	b.n	800c172 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c15a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c15e:	f023 0301 	bic.w	r3, r3, #1
 800c162:	b2da      	uxtb	r2, r3
 800c164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c166:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c16a:	e002      	b.n	800c172 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c16c:	bf00      	nop
 800c16e:	e000      	b.n	800c172 <prvProcessReceivedCommands+0x1a6>
					break;
 800c170:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c172:	4b08      	ldr	r3, [pc, #32]	@ (800c194 <prvProcessReceivedCommands+0x1c8>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	1d39      	adds	r1, r7, #4
 800c178:	2200      	movs	r2, #0
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fe f880 	bl	800a280 <xQueueReceive>
 800c180:	4603      	mov	r3, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	f47f af26 	bne.w	800bfd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c188:	bf00      	nop
 800c18a:	bf00      	nop
 800c18c:	3730      	adds	r7, #48	@ 0x30
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	20001170 	.word	0x20001170

0800c198 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b088      	sub	sp, #32
 800c19c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c19e:	e049      	b.n	800c234 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1a0:	4b2e      	ldr	r3, [pc, #184]	@ (800c25c <prvSwitchTimerLists+0xc4>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1aa:	4b2c      	ldr	r3, [pc, #176]	@ (800c25c <prvSwitchTimerLists+0xc4>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	68db      	ldr	r3, [r3, #12]
 800c1b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	3304      	adds	r3, #4
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7fd fd50 	bl	8009c5e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	6a1b      	ldr	r3, [r3, #32]
 800c1c2:	68f8      	ldr	r0, [r7, #12]
 800c1c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1cc:	f003 0304 	and.w	r3, r3, #4
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d02f      	beq.n	800c234 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	699b      	ldr	r3, [r3, #24]
 800c1d8:	693a      	ldr	r2, [r7, #16]
 800c1da:	4413      	add	r3, r2
 800c1dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c1de:	68ba      	ldr	r2, [r7, #8]
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d90e      	bls.n	800c204 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	68fa      	ldr	r2, [r7, #12]
 800c1f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1f2:	4b1a      	ldr	r3, [pc, #104]	@ (800c25c <prvSwitchTimerLists+0xc4>)
 800c1f4:	681a      	ldr	r2, [r3, #0]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	3304      	adds	r3, #4
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	4610      	mov	r0, r2
 800c1fe:	f7fd fcf5 	bl	8009bec <vListInsert>
 800c202:	e017      	b.n	800c234 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c204:	2300      	movs	r3, #0
 800c206:	9300      	str	r3, [sp, #0]
 800c208:	2300      	movs	r3, #0
 800c20a:	693a      	ldr	r2, [r7, #16]
 800c20c:	2100      	movs	r1, #0
 800c20e:	68f8      	ldr	r0, [r7, #12]
 800c210:	f7ff fd58 	bl	800bcc4 <xTimerGenericCommand>
 800c214:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d10b      	bne.n	800c234 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c220:	f383 8811 	msr	BASEPRI, r3
 800c224:	f3bf 8f6f 	isb	sy
 800c228:	f3bf 8f4f 	dsb	sy
 800c22c:	603b      	str	r3, [r7, #0]
}
 800c22e:	bf00      	nop
 800c230:	bf00      	nop
 800c232:	e7fd      	b.n	800c230 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c234:	4b09      	ldr	r3, [pc, #36]	@ (800c25c <prvSwitchTimerLists+0xc4>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d1b0      	bne.n	800c1a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c23e:	4b07      	ldr	r3, [pc, #28]	@ (800c25c <prvSwitchTimerLists+0xc4>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c244:	4b06      	ldr	r3, [pc, #24]	@ (800c260 <prvSwitchTimerLists+0xc8>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	4a04      	ldr	r2, [pc, #16]	@ (800c25c <prvSwitchTimerLists+0xc4>)
 800c24a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c24c:	4a04      	ldr	r2, [pc, #16]	@ (800c260 <prvSwitchTimerLists+0xc8>)
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	6013      	str	r3, [r2, #0]
}
 800c252:	bf00      	nop
 800c254:	3718      	adds	r7, #24
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	20001168 	.word	0x20001168
 800c260:	2000116c 	.word	0x2000116c

0800c264 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c26a:	f000 f96d 	bl	800c548 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c26e:	4b15      	ldr	r3, [pc, #84]	@ (800c2c4 <prvCheckForValidListAndQueue+0x60>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d120      	bne.n	800c2b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c276:	4814      	ldr	r0, [pc, #80]	@ (800c2c8 <prvCheckForValidListAndQueue+0x64>)
 800c278:	f7fd fc67 	bl	8009b4a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c27c:	4813      	ldr	r0, [pc, #76]	@ (800c2cc <prvCheckForValidListAndQueue+0x68>)
 800c27e:	f7fd fc64 	bl	8009b4a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c282:	4b13      	ldr	r3, [pc, #76]	@ (800c2d0 <prvCheckForValidListAndQueue+0x6c>)
 800c284:	4a10      	ldr	r2, [pc, #64]	@ (800c2c8 <prvCheckForValidListAndQueue+0x64>)
 800c286:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c288:	4b12      	ldr	r3, [pc, #72]	@ (800c2d4 <prvCheckForValidListAndQueue+0x70>)
 800c28a:	4a10      	ldr	r2, [pc, #64]	@ (800c2cc <prvCheckForValidListAndQueue+0x68>)
 800c28c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c28e:	2300      	movs	r3, #0
 800c290:	9300      	str	r3, [sp, #0]
 800c292:	4b11      	ldr	r3, [pc, #68]	@ (800c2d8 <prvCheckForValidListAndQueue+0x74>)
 800c294:	4a11      	ldr	r2, [pc, #68]	@ (800c2dc <prvCheckForValidListAndQueue+0x78>)
 800c296:	2110      	movs	r1, #16
 800c298:	200a      	movs	r0, #10
 800c29a:	f7fd fd75 	bl	8009d88 <xQueueGenericCreateStatic>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	4a08      	ldr	r2, [pc, #32]	@ (800c2c4 <prvCheckForValidListAndQueue+0x60>)
 800c2a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c2a4:	4b07      	ldr	r3, [pc, #28]	@ (800c2c4 <prvCheckForValidListAndQueue+0x60>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d005      	beq.n	800c2b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c2ac:	4b05      	ldr	r3, [pc, #20]	@ (800c2c4 <prvCheckForValidListAndQueue+0x60>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	490b      	ldr	r1, [pc, #44]	@ (800c2e0 <prvCheckForValidListAndQueue+0x7c>)
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7fe fa58 	bl	800a768 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2b8:	f000 f978 	bl	800c5ac <vPortExitCritical>
}
 800c2bc:	bf00      	nop
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	20001170 	.word	0x20001170
 800c2c8:	20001140 	.word	0x20001140
 800c2cc:	20001154 	.word	0x20001154
 800c2d0:	20001168 	.word	0x20001168
 800c2d4:	2000116c 	.word	0x2000116c
 800c2d8:	2000121c 	.word	0x2000121c
 800c2dc:	2000117c 	.word	0x2000117c
 800c2e0:	0800e63c 	.word	0x0800e63c

0800c2e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	60b9      	str	r1, [r7, #8]
 800c2ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	3b04      	subs	r3, #4
 800c2f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c2fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	3b04      	subs	r3, #4
 800c302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	f023 0201 	bic.w	r2, r3, #1
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	3b04      	subs	r3, #4
 800c312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c314:	4a0c      	ldr	r2, [pc, #48]	@ (800c348 <pxPortInitialiseStack+0x64>)
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	3b14      	subs	r3, #20
 800c31e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c320:	687a      	ldr	r2, [r7, #4]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	3b04      	subs	r3, #4
 800c32a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f06f 0202 	mvn.w	r2, #2
 800c332:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	3b20      	subs	r3, #32
 800c338:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c33a:	68fb      	ldr	r3, [r7, #12]
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3714      	adds	r7, #20
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr
 800c348:	0800c34d 	.word	0x0800c34d

0800c34c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c352:	2300      	movs	r3, #0
 800c354:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c356:	4b13      	ldr	r3, [pc, #76]	@ (800c3a4 <prvTaskExitError+0x58>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c35e:	d00b      	beq.n	800c378 <prvTaskExitError+0x2c>
	__asm volatile
 800c360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c364:	f383 8811 	msr	BASEPRI, r3
 800c368:	f3bf 8f6f 	isb	sy
 800c36c:	f3bf 8f4f 	dsb	sy
 800c370:	60fb      	str	r3, [r7, #12]
}
 800c372:	bf00      	nop
 800c374:	bf00      	nop
 800c376:	e7fd      	b.n	800c374 <prvTaskExitError+0x28>
	__asm volatile
 800c378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37c:	f383 8811 	msr	BASEPRI, r3
 800c380:	f3bf 8f6f 	isb	sy
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	60bb      	str	r3, [r7, #8]
}
 800c38a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c38c:	bf00      	nop
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d0fc      	beq.n	800c38e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c394:	bf00      	nop
 800c396:	bf00      	nop
 800c398:	3714      	adds	r7, #20
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	200000a4 	.word	0x200000a4
	...

0800c3b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c3b0:	4b07      	ldr	r3, [pc, #28]	@ (800c3d0 <pxCurrentTCBConst2>)
 800c3b2:	6819      	ldr	r1, [r3, #0]
 800c3b4:	6808      	ldr	r0, [r1, #0]
 800c3b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ba:	f380 8809 	msr	PSP, r0
 800c3be:	f3bf 8f6f 	isb	sy
 800c3c2:	f04f 0000 	mov.w	r0, #0
 800c3c6:	f380 8811 	msr	BASEPRI, r0
 800c3ca:	4770      	bx	lr
 800c3cc:	f3af 8000 	nop.w

0800c3d0 <pxCurrentTCBConst2>:
 800c3d0:	20000c40 	.word	0x20000c40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c3d4:	bf00      	nop
 800c3d6:	bf00      	nop

0800c3d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c3d8:	4808      	ldr	r0, [pc, #32]	@ (800c3fc <prvPortStartFirstTask+0x24>)
 800c3da:	6800      	ldr	r0, [r0, #0]
 800c3dc:	6800      	ldr	r0, [r0, #0]
 800c3de:	f380 8808 	msr	MSP, r0
 800c3e2:	f04f 0000 	mov.w	r0, #0
 800c3e6:	f380 8814 	msr	CONTROL, r0
 800c3ea:	b662      	cpsie	i
 800c3ec:	b661      	cpsie	f
 800c3ee:	f3bf 8f4f 	dsb	sy
 800c3f2:	f3bf 8f6f 	isb	sy
 800c3f6:	df00      	svc	0
 800c3f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c3fa:	bf00      	nop
 800c3fc:	e000ed08 	.word	0xe000ed08

0800c400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b086      	sub	sp, #24
 800c404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c406:	4b47      	ldr	r3, [pc, #284]	@ (800c524 <xPortStartScheduler+0x124>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a47      	ldr	r2, [pc, #284]	@ (800c528 <xPortStartScheduler+0x128>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d10b      	bne.n	800c428 <xPortStartScheduler+0x28>
	__asm volatile
 800c410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c414:	f383 8811 	msr	BASEPRI, r3
 800c418:	f3bf 8f6f 	isb	sy
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	613b      	str	r3, [r7, #16]
}
 800c422:	bf00      	nop
 800c424:	bf00      	nop
 800c426:	e7fd      	b.n	800c424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c428:	4b3e      	ldr	r3, [pc, #248]	@ (800c524 <xPortStartScheduler+0x124>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a3f      	ldr	r2, [pc, #252]	@ (800c52c <xPortStartScheduler+0x12c>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d10b      	bne.n	800c44a <xPortStartScheduler+0x4a>
	__asm volatile
 800c432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c436:	f383 8811 	msr	BASEPRI, r3
 800c43a:	f3bf 8f6f 	isb	sy
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	60fb      	str	r3, [r7, #12]
}
 800c444:	bf00      	nop
 800c446:	bf00      	nop
 800c448:	e7fd      	b.n	800c446 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c44a:	4b39      	ldr	r3, [pc, #228]	@ (800c530 <xPortStartScheduler+0x130>)
 800c44c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	b2db      	uxtb	r3, r3
 800c454:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	22ff      	movs	r2, #255	@ 0xff
 800c45a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	b2db      	uxtb	r3, r3
 800c462:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c464:	78fb      	ldrb	r3, [r7, #3]
 800c466:	b2db      	uxtb	r3, r3
 800c468:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c46c:	b2da      	uxtb	r2, r3
 800c46e:	4b31      	ldr	r3, [pc, #196]	@ (800c534 <xPortStartScheduler+0x134>)
 800c470:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c472:	4b31      	ldr	r3, [pc, #196]	@ (800c538 <xPortStartScheduler+0x138>)
 800c474:	2207      	movs	r2, #7
 800c476:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c478:	e009      	b.n	800c48e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c47a:	4b2f      	ldr	r3, [pc, #188]	@ (800c538 <xPortStartScheduler+0x138>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	3b01      	subs	r3, #1
 800c480:	4a2d      	ldr	r2, [pc, #180]	@ (800c538 <xPortStartScheduler+0x138>)
 800c482:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c484:	78fb      	ldrb	r3, [r7, #3]
 800c486:	b2db      	uxtb	r3, r3
 800c488:	005b      	lsls	r3, r3, #1
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c48e:	78fb      	ldrb	r3, [r7, #3]
 800c490:	b2db      	uxtb	r3, r3
 800c492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c496:	2b80      	cmp	r3, #128	@ 0x80
 800c498:	d0ef      	beq.n	800c47a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c49a:	4b27      	ldr	r3, [pc, #156]	@ (800c538 <xPortStartScheduler+0x138>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f1c3 0307 	rsb	r3, r3, #7
 800c4a2:	2b04      	cmp	r3, #4
 800c4a4:	d00b      	beq.n	800c4be <xPortStartScheduler+0xbe>
	__asm volatile
 800c4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4aa:	f383 8811 	msr	BASEPRI, r3
 800c4ae:	f3bf 8f6f 	isb	sy
 800c4b2:	f3bf 8f4f 	dsb	sy
 800c4b6:	60bb      	str	r3, [r7, #8]
}
 800c4b8:	bf00      	nop
 800c4ba:	bf00      	nop
 800c4bc:	e7fd      	b.n	800c4ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c4be:	4b1e      	ldr	r3, [pc, #120]	@ (800c538 <xPortStartScheduler+0x138>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	021b      	lsls	r3, r3, #8
 800c4c4:	4a1c      	ldr	r2, [pc, #112]	@ (800c538 <xPortStartScheduler+0x138>)
 800c4c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c4c8:	4b1b      	ldr	r3, [pc, #108]	@ (800c538 <xPortStartScheduler+0x138>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c4d0:	4a19      	ldr	r2, [pc, #100]	@ (800c538 <xPortStartScheduler+0x138>)
 800c4d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	b2da      	uxtb	r2, r3
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4dc:	4b17      	ldr	r3, [pc, #92]	@ (800c53c <xPortStartScheduler+0x13c>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a16      	ldr	r2, [pc, #88]	@ (800c53c <xPortStartScheduler+0x13c>)
 800c4e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c4e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c4e8:	4b14      	ldr	r3, [pc, #80]	@ (800c53c <xPortStartScheduler+0x13c>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a13      	ldr	r2, [pc, #76]	@ (800c53c <xPortStartScheduler+0x13c>)
 800c4ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c4f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c4f4:	f000 f8da 	bl	800c6ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c4f8:	4b11      	ldr	r3, [pc, #68]	@ (800c540 <xPortStartScheduler+0x140>)
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c4fe:	f000 f8f9 	bl	800c6f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c502:	4b10      	ldr	r3, [pc, #64]	@ (800c544 <xPortStartScheduler+0x144>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a0f      	ldr	r2, [pc, #60]	@ (800c544 <xPortStartScheduler+0x144>)
 800c508:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c50c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c50e:	f7ff ff63 	bl	800c3d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c512:	f7fe fe3d 	bl	800b190 <vTaskSwitchContext>
	prvTaskExitError();
 800c516:	f7ff ff19 	bl	800c34c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3718      	adds	r7, #24
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	e000ed00 	.word	0xe000ed00
 800c528:	410fc271 	.word	0x410fc271
 800c52c:	410fc270 	.word	0x410fc270
 800c530:	e000e400 	.word	0xe000e400
 800c534:	2000126c 	.word	0x2000126c
 800c538:	20001270 	.word	0x20001270
 800c53c:	e000ed20 	.word	0xe000ed20
 800c540:	200000a4 	.word	0x200000a4
 800c544:	e000ef34 	.word	0xe000ef34

0800c548 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c548:	b480      	push	{r7}
 800c54a:	b083      	sub	sp, #12
 800c54c:	af00      	add	r7, sp, #0
	__asm volatile
 800c54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c552:	f383 8811 	msr	BASEPRI, r3
 800c556:	f3bf 8f6f 	isb	sy
 800c55a:	f3bf 8f4f 	dsb	sy
 800c55e:	607b      	str	r3, [r7, #4]
}
 800c560:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c562:	4b10      	ldr	r3, [pc, #64]	@ (800c5a4 <vPortEnterCritical+0x5c>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	3301      	adds	r3, #1
 800c568:	4a0e      	ldr	r2, [pc, #56]	@ (800c5a4 <vPortEnterCritical+0x5c>)
 800c56a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c56c:	4b0d      	ldr	r3, [pc, #52]	@ (800c5a4 <vPortEnterCritical+0x5c>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2b01      	cmp	r3, #1
 800c572:	d110      	bne.n	800c596 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c574:	4b0c      	ldr	r3, [pc, #48]	@ (800c5a8 <vPortEnterCritical+0x60>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00b      	beq.n	800c596 <vPortEnterCritical+0x4e>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	603b      	str	r3, [r7, #0]
}
 800c590:	bf00      	nop
 800c592:	bf00      	nop
 800c594:	e7fd      	b.n	800c592 <vPortEnterCritical+0x4a>
	}
}
 800c596:	bf00      	nop
 800c598:	370c      	adds	r7, #12
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr
 800c5a2:	bf00      	nop
 800c5a4:	200000a4 	.word	0x200000a4
 800c5a8:	e000ed04 	.word	0xe000ed04

0800c5ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b083      	sub	sp, #12
 800c5b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5b2:	4b12      	ldr	r3, [pc, #72]	@ (800c5fc <vPortExitCritical+0x50>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d10b      	bne.n	800c5d2 <vPortExitCritical+0x26>
	__asm volatile
 800c5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5be:	f383 8811 	msr	BASEPRI, r3
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	607b      	str	r3, [r7, #4]
}
 800c5cc:	bf00      	nop
 800c5ce:	bf00      	nop
 800c5d0:	e7fd      	b.n	800c5ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c5d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c5fc <vPortExitCritical+0x50>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	3b01      	subs	r3, #1
 800c5d8:	4a08      	ldr	r2, [pc, #32]	@ (800c5fc <vPortExitCritical+0x50>)
 800c5da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c5dc:	4b07      	ldr	r3, [pc, #28]	@ (800c5fc <vPortExitCritical+0x50>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d105      	bne.n	800c5f0 <vPortExitCritical+0x44>
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	f383 8811 	msr	BASEPRI, r3
}
 800c5ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c5f0:	bf00      	nop
 800c5f2:	370c      	adds	r7, #12
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr
 800c5fc:	200000a4 	.word	0x200000a4

0800c600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c600:	f3ef 8009 	mrs	r0, PSP
 800c604:	f3bf 8f6f 	isb	sy
 800c608:	4b15      	ldr	r3, [pc, #84]	@ (800c660 <pxCurrentTCBConst>)
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	f01e 0f10 	tst.w	lr, #16
 800c610:	bf08      	it	eq
 800c612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61a:	6010      	str	r0, [r2, #0]
 800c61c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c620:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c624:	f380 8811 	msr	BASEPRI, r0
 800c628:	f3bf 8f4f 	dsb	sy
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	f7fe fdae 	bl	800b190 <vTaskSwitchContext>
 800c634:	f04f 0000 	mov.w	r0, #0
 800c638:	f380 8811 	msr	BASEPRI, r0
 800c63c:	bc09      	pop	{r0, r3}
 800c63e:	6819      	ldr	r1, [r3, #0]
 800c640:	6808      	ldr	r0, [r1, #0]
 800c642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c646:	f01e 0f10 	tst.w	lr, #16
 800c64a:	bf08      	it	eq
 800c64c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c650:	f380 8809 	msr	PSP, r0
 800c654:	f3bf 8f6f 	isb	sy
 800c658:	4770      	bx	lr
 800c65a:	bf00      	nop
 800c65c:	f3af 8000 	nop.w

0800c660 <pxCurrentTCBConst>:
 800c660:	20000c40 	.word	0x20000c40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c664:	bf00      	nop
 800c666:	bf00      	nop

0800c668 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
	__asm volatile
 800c66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c672:	f383 8811 	msr	BASEPRI, r3
 800c676:	f3bf 8f6f 	isb	sy
 800c67a:	f3bf 8f4f 	dsb	sy
 800c67e:	607b      	str	r3, [r7, #4]
}
 800c680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c682:	f7fe fccb 	bl	800b01c <xTaskIncrementTick>
 800c686:	4603      	mov	r3, r0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d003      	beq.n	800c694 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c68c:	4b06      	ldr	r3, [pc, #24]	@ (800c6a8 <xPortSysTickHandler+0x40>)
 800c68e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	2300      	movs	r3, #0
 800c696:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	f383 8811 	msr	BASEPRI, r3
}
 800c69e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c6a0:	bf00      	nop
 800c6a2:	3708      	adds	r7, #8
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	e000ed04 	.word	0xe000ed04

0800c6ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c6b0:	4b0b      	ldr	r3, [pc, #44]	@ (800c6e0 <vPortSetupTimerInterrupt+0x34>)
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6b6:	4b0b      	ldr	r3, [pc, #44]	@ (800c6e4 <vPortSetupTimerInterrupt+0x38>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c6bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c6e8 <vPortSetupTimerInterrupt+0x3c>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a0a      	ldr	r2, [pc, #40]	@ (800c6ec <vPortSetupTimerInterrupt+0x40>)
 800c6c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6c6:	099b      	lsrs	r3, r3, #6
 800c6c8:	4a09      	ldr	r2, [pc, #36]	@ (800c6f0 <vPortSetupTimerInterrupt+0x44>)
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c6ce:	4b04      	ldr	r3, [pc, #16]	@ (800c6e0 <vPortSetupTimerInterrupt+0x34>)
 800c6d0:	2207      	movs	r2, #7
 800c6d2:	601a      	str	r2, [r3, #0]
}
 800c6d4:	bf00      	nop
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop
 800c6e0:	e000e010 	.word	0xe000e010
 800c6e4:	e000e018 	.word	0xe000e018
 800c6e8:	2000000c 	.word	0x2000000c
 800c6ec:	10624dd3 	.word	0x10624dd3
 800c6f0:	e000e014 	.word	0xe000e014

0800c6f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c6f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c704 <vPortEnableVFP+0x10>
 800c6f8:	6801      	ldr	r1, [r0, #0]
 800c6fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c6fe:	6001      	str	r1, [r0, #0]
 800c700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c702:	bf00      	nop
 800c704:	e000ed88 	.word	0xe000ed88

0800c708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c708:	b480      	push	{r7}
 800c70a:	b085      	sub	sp, #20
 800c70c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c70e:	f3ef 8305 	mrs	r3, IPSR
 800c712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2b0f      	cmp	r3, #15
 800c718:	d915      	bls.n	800c746 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c71a:	4a18      	ldr	r2, [pc, #96]	@ (800c77c <vPortValidateInterruptPriority+0x74>)
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	4413      	add	r3, r2
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c724:	4b16      	ldr	r3, [pc, #88]	@ (800c780 <vPortValidateInterruptPriority+0x78>)
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	7afa      	ldrb	r2, [r7, #11]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d20b      	bcs.n	800c746 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c732:	f383 8811 	msr	BASEPRI, r3
 800c736:	f3bf 8f6f 	isb	sy
 800c73a:	f3bf 8f4f 	dsb	sy
 800c73e:	607b      	str	r3, [r7, #4]
}
 800c740:	bf00      	nop
 800c742:	bf00      	nop
 800c744:	e7fd      	b.n	800c742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c746:	4b0f      	ldr	r3, [pc, #60]	@ (800c784 <vPortValidateInterruptPriority+0x7c>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c74e:	4b0e      	ldr	r3, [pc, #56]	@ (800c788 <vPortValidateInterruptPriority+0x80>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	429a      	cmp	r2, r3
 800c754:	d90b      	bls.n	800c76e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c75a:	f383 8811 	msr	BASEPRI, r3
 800c75e:	f3bf 8f6f 	isb	sy
 800c762:	f3bf 8f4f 	dsb	sy
 800c766:	603b      	str	r3, [r7, #0]
}
 800c768:	bf00      	nop
 800c76a:	bf00      	nop
 800c76c:	e7fd      	b.n	800c76a <vPortValidateInterruptPriority+0x62>
	}
 800c76e:	bf00      	nop
 800c770:	3714      	adds	r7, #20
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	e000e3f0 	.word	0xe000e3f0
 800c780:	2000126c 	.word	0x2000126c
 800c784:	e000ed0c 	.word	0xe000ed0c
 800c788:	20001270 	.word	0x20001270

0800c78c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b08a      	sub	sp, #40	@ 0x28
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c794:	2300      	movs	r3, #0
 800c796:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c798:	f7fe fb84 	bl	800aea4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c79c:	4b5c      	ldr	r3, [pc, #368]	@ (800c910 <pvPortMalloc+0x184>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d101      	bne.n	800c7a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c7a4:	f000 f924 	bl	800c9f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c7a8:	4b5a      	ldr	r3, [pc, #360]	@ (800c914 <pvPortMalloc+0x188>)
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f040 8095 	bne.w	800c8e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d01e      	beq.n	800c7fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c7bc:	2208      	movs	r2, #8
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f003 0307 	and.w	r3, r3, #7
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d015      	beq.n	800c7fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f023 0307 	bic.w	r3, r3, #7
 800c7d4:	3308      	adds	r3, #8
 800c7d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f003 0307 	and.w	r3, r3, #7
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d00b      	beq.n	800c7fa <pvPortMalloc+0x6e>
	__asm volatile
 800c7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e6:	f383 8811 	msr	BASEPRI, r3
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	617b      	str	r3, [r7, #20]
}
 800c7f4:	bf00      	nop
 800c7f6:	bf00      	nop
 800c7f8:	e7fd      	b.n	800c7f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d06f      	beq.n	800c8e0 <pvPortMalloc+0x154>
 800c800:	4b45      	ldr	r3, [pc, #276]	@ (800c918 <pvPortMalloc+0x18c>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	429a      	cmp	r2, r3
 800c808:	d86a      	bhi.n	800c8e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c80a:	4b44      	ldr	r3, [pc, #272]	@ (800c91c <pvPortMalloc+0x190>)
 800c80c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c80e:	4b43      	ldr	r3, [pc, #268]	@ (800c91c <pvPortMalloc+0x190>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c814:	e004      	b.n	800c820 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c818:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	429a      	cmp	r2, r3
 800c828:	d903      	bls.n	800c832 <pvPortMalloc+0xa6>
 800c82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d1f1      	bne.n	800c816 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c832:	4b37      	ldr	r3, [pc, #220]	@ (800c910 <pvPortMalloc+0x184>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c838:	429a      	cmp	r2, r3
 800c83a:	d051      	beq.n	800c8e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c83c:	6a3b      	ldr	r3, [r7, #32]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2208      	movs	r2, #8
 800c842:	4413      	add	r3, r2
 800c844:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	6a3b      	ldr	r3, [r7, #32]
 800c84c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c850:	685a      	ldr	r2, [r3, #4]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	1ad2      	subs	r2, r2, r3
 800c856:	2308      	movs	r3, #8
 800c858:	005b      	lsls	r3, r3, #1
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d920      	bls.n	800c8a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c85e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4413      	add	r3, r2
 800c864:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	f003 0307 	and.w	r3, r3, #7
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00b      	beq.n	800c888 <pvPortMalloc+0xfc>
	__asm volatile
 800c870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	613b      	str	r3, [r7, #16]
}
 800c882:	bf00      	nop
 800c884:	bf00      	nop
 800c886:	e7fd      	b.n	800c884 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c88a:	685a      	ldr	r2, [r3, #4]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	1ad2      	subs	r2, r2, r3
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c89a:	69b8      	ldr	r0, [r7, #24]
 800c89c:	f000 f90a 	bl	800cab4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c8a0:	4b1d      	ldr	r3, [pc, #116]	@ (800c918 <pvPortMalloc+0x18c>)
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	1ad3      	subs	r3, r2, r3
 800c8aa:	4a1b      	ldr	r2, [pc, #108]	@ (800c918 <pvPortMalloc+0x18c>)
 800c8ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c8ae:	4b1a      	ldr	r3, [pc, #104]	@ (800c918 <pvPortMalloc+0x18c>)
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	4b1b      	ldr	r3, [pc, #108]	@ (800c920 <pvPortMalloc+0x194>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d203      	bcs.n	800c8c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c8ba:	4b17      	ldr	r3, [pc, #92]	@ (800c918 <pvPortMalloc+0x18c>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a18      	ldr	r2, [pc, #96]	@ (800c920 <pvPortMalloc+0x194>)
 800c8c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c4:	685a      	ldr	r2, [r3, #4]
 800c8c6:	4b13      	ldr	r3, [pc, #76]	@ (800c914 <pvPortMalloc+0x188>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	431a      	orrs	r2, r3
 800c8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c8d6:	4b13      	ldr	r3, [pc, #76]	@ (800c924 <pvPortMalloc+0x198>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	4a11      	ldr	r2, [pc, #68]	@ (800c924 <pvPortMalloc+0x198>)
 800c8de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c8e0:	f7fe faee 	bl	800aec0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	f003 0307 	and.w	r3, r3, #7
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00b      	beq.n	800c906 <pvPortMalloc+0x17a>
	__asm volatile
 800c8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f2:	f383 8811 	msr	BASEPRI, r3
 800c8f6:	f3bf 8f6f 	isb	sy
 800c8fa:	f3bf 8f4f 	dsb	sy
 800c8fe:	60fb      	str	r3, [r7, #12]
}
 800c900:	bf00      	nop
 800c902:	bf00      	nop
 800c904:	e7fd      	b.n	800c902 <pvPortMalloc+0x176>
	return pvReturn;
 800c906:	69fb      	ldr	r3, [r7, #28]
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3728      	adds	r7, #40	@ 0x28
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	20004e7c 	.word	0x20004e7c
 800c914:	20004e90 	.word	0x20004e90
 800c918:	20004e80 	.word	0x20004e80
 800c91c:	20004e74 	.word	0x20004e74
 800c920:	20004e84 	.word	0x20004e84
 800c924:	20004e88 	.word	0x20004e88

0800c928 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b086      	sub	sp, #24
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d04f      	beq.n	800c9da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c93a:	2308      	movs	r3, #8
 800c93c:	425b      	negs	r3, r3
 800c93e:	697a      	ldr	r2, [r7, #20]
 800c940:	4413      	add	r3, r2
 800c942:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	685a      	ldr	r2, [r3, #4]
 800c94c:	4b25      	ldr	r3, [pc, #148]	@ (800c9e4 <vPortFree+0xbc>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4013      	ands	r3, r2
 800c952:	2b00      	cmp	r3, #0
 800c954:	d10b      	bne.n	800c96e <vPortFree+0x46>
	__asm volatile
 800c956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c95a:	f383 8811 	msr	BASEPRI, r3
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f3bf 8f4f 	dsb	sy
 800c966:	60fb      	str	r3, [r7, #12]
}
 800c968:	bf00      	nop
 800c96a:	bf00      	nop
 800c96c:	e7fd      	b.n	800c96a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00b      	beq.n	800c98e <vPortFree+0x66>
	__asm volatile
 800c976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c97a:	f383 8811 	msr	BASEPRI, r3
 800c97e:	f3bf 8f6f 	isb	sy
 800c982:	f3bf 8f4f 	dsb	sy
 800c986:	60bb      	str	r3, [r7, #8]
}
 800c988:	bf00      	nop
 800c98a:	bf00      	nop
 800c98c:	e7fd      	b.n	800c98a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	685a      	ldr	r2, [r3, #4]
 800c992:	4b14      	ldr	r3, [pc, #80]	@ (800c9e4 <vPortFree+0xbc>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4013      	ands	r3, r2
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d01e      	beq.n	800c9da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d11a      	bne.n	800c9da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	685a      	ldr	r2, [r3, #4]
 800c9a8:	4b0e      	ldr	r3, [pc, #56]	@ (800c9e4 <vPortFree+0xbc>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	43db      	mvns	r3, r3
 800c9ae:	401a      	ands	r2, r3
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c9b4:	f7fe fa76 	bl	800aea4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c9e8 <vPortFree+0xc0>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	4a09      	ldr	r2, [pc, #36]	@ (800c9e8 <vPortFree+0xc0>)
 800c9c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c9c6:	6938      	ldr	r0, [r7, #16]
 800c9c8:	f000 f874 	bl	800cab4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c9cc:	4b07      	ldr	r3, [pc, #28]	@ (800c9ec <vPortFree+0xc4>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	4a06      	ldr	r2, [pc, #24]	@ (800c9ec <vPortFree+0xc4>)
 800c9d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c9d6:	f7fe fa73 	bl	800aec0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c9da:	bf00      	nop
 800c9dc:	3718      	adds	r7, #24
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	20004e90 	.word	0x20004e90
 800c9e8:	20004e80 	.word	0x20004e80
 800c9ec:	20004e8c 	.word	0x20004e8c

0800c9f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c9f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c9fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c9fc:	4b27      	ldr	r3, [pc, #156]	@ (800ca9c <prvHeapInit+0xac>)
 800c9fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f003 0307 	and.w	r3, r3, #7
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d00c      	beq.n	800ca24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	3307      	adds	r3, #7
 800ca0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f023 0307 	bic.w	r3, r3, #7
 800ca16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca18:	68ba      	ldr	r2, [r7, #8]
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	1ad3      	subs	r3, r2, r3
 800ca1e:	4a1f      	ldr	r2, [pc, #124]	@ (800ca9c <prvHeapInit+0xac>)
 800ca20:	4413      	add	r3, r2
 800ca22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca28:	4a1d      	ldr	r2, [pc, #116]	@ (800caa0 <prvHeapInit+0xb0>)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca2e:	4b1c      	ldr	r3, [pc, #112]	@ (800caa0 <prvHeapInit+0xb0>)
 800ca30:	2200      	movs	r2, #0
 800ca32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	68ba      	ldr	r2, [r7, #8]
 800ca38:	4413      	add	r3, r2
 800ca3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca3c:	2208      	movs	r2, #8
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	1a9b      	subs	r3, r3, r2
 800ca42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f023 0307 	bic.w	r3, r3, #7
 800ca4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	4a15      	ldr	r2, [pc, #84]	@ (800caa4 <prvHeapInit+0xb4>)
 800ca50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca52:	4b14      	ldr	r3, [pc, #80]	@ (800caa4 <prvHeapInit+0xb4>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2200      	movs	r2, #0
 800ca58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca5a:	4b12      	ldr	r3, [pc, #72]	@ (800caa4 <prvHeapInit+0xb4>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	1ad2      	subs	r2, r2, r3
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca70:	4b0c      	ldr	r3, [pc, #48]	@ (800caa4 <prvHeapInit+0xb4>)
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	4a0a      	ldr	r2, [pc, #40]	@ (800caa8 <prvHeapInit+0xb8>)
 800ca7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	4a09      	ldr	r2, [pc, #36]	@ (800caac <prvHeapInit+0xbc>)
 800ca86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca88:	4b09      	ldr	r3, [pc, #36]	@ (800cab0 <prvHeapInit+0xc0>)
 800ca8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ca8e:	601a      	str	r2, [r3, #0]
}
 800ca90:	bf00      	nop
 800ca92:	3714      	adds	r7, #20
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr
 800ca9c:	20001274 	.word	0x20001274
 800caa0:	20004e74 	.word	0x20004e74
 800caa4:	20004e7c 	.word	0x20004e7c
 800caa8:	20004e84 	.word	0x20004e84
 800caac:	20004e80 	.word	0x20004e80
 800cab0:	20004e90 	.word	0x20004e90

0800cab4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cab4:	b480      	push	{r7}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cabc:	4b28      	ldr	r3, [pc, #160]	@ (800cb60 <prvInsertBlockIntoFreeList+0xac>)
 800cabe:	60fb      	str	r3, [r7, #12]
 800cac0:	e002      	b.n	800cac8 <prvInsertBlockIntoFreeList+0x14>
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	60fb      	str	r3, [r7, #12]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	429a      	cmp	r2, r3
 800cad0:	d8f7      	bhi.n	800cac2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	68ba      	ldr	r2, [r7, #8]
 800cadc:	4413      	add	r3, r2
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d108      	bne.n	800caf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	685a      	ldr	r2, [r3, #4]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	441a      	add	r2, r3
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	68ba      	ldr	r2, [r7, #8]
 800cb00:	441a      	add	r2, r3
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d118      	bne.n	800cb3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	4b15      	ldr	r3, [pc, #84]	@ (800cb64 <prvInsertBlockIntoFreeList+0xb0>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d00d      	beq.n	800cb32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	685a      	ldr	r2, [r3, #4]
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	441a      	add	r2, r3
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	601a      	str	r2, [r3, #0]
 800cb30:	e008      	b.n	800cb44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb32:	4b0c      	ldr	r3, [pc, #48]	@ (800cb64 <prvInsertBlockIntoFreeList+0xb0>)
 800cb34:	681a      	ldr	r2, [r3, #0]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	601a      	str	r2, [r3, #0]
 800cb3a:	e003      	b.n	800cb44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb44:	68fa      	ldr	r2, [r7, #12]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d002      	beq.n	800cb52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb52:	bf00      	nop
 800cb54:	3714      	adds	r7, #20
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop
 800cb60:	20004e74 	.word	0x20004e74
 800cb64:	20004e7c 	.word	0x20004e7c

0800cb68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	4912      	ldr	r1, [pc, #72]	@ (800cbb8 <MX_USB_DEVICE_Init+0x50>)
 800cb70:	4812      	ldr	r0, [pc, #72]	@ (800cbbc <MX_USB_DEVICE_Init+0x54>)
 800cb72:	f7fb f911 	bl	8007d98 <USBD_Init>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d001      	beq.n	800cb80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cb7c:	f7f4 f8d6 	bl	8000d2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cb80:	490f      	ldr	r1, [pc, #60]	@ (800cbc0 <MX_USB_DEVICE_Init+0x58>)
 800cb82:	480e      	ldr	r0, [pc, #56]	@ (800cbbc <MX_USB_DEVICE_Init+0x54>)
 800cb84:	f7fb f938 	bl	8007df8 <USBD_RegisterClass>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d001      	beq.n	800cb92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cb8e:	f7f4 f8cd 	bl	8000d2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cb92:	490c      	ldr	r1, [pc, #48]	@ (800cbc4 <MX_USB_DEVICE_Init+0x5c>)
 800cb94:	4809      	ldr	r0, [pc, #36]	@ (800cbbc <MX_USB_DEVICE_Init+0x54>)
 800cb96:	f7fb f86f 	bl	8007c78 <USBD_CDC_RegisterInterface>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d001      	beq.n	800cba4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cba0:	f7f4 f8c4 	bl	8000d2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cba4:	4805      	ldr	r0, [pc, #20]	@ (800cbbc <MX_USB_DEVICE_Init+0x54>)
 800cba6:	f7fb f95d 	bl	8007e64 <USBD_Start>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d001      	beq.n	800cbb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cbb0:	f7f4 f8bc 	bl	8000d2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cbb4:	bf00      	nop
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	200000bc 	.word	0x200000bc
 800cbbc:	20004e94 	.word	0x20004e94
 800cbc0:	20000024 	.word	0x20000024
 800cbc4:	200000a8 	.word	0x200000a8

0800cbc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cbcc:	2200      	movs	r2, #0
 800cbce:	4905      	ldr	r1, [pc, #20]	@ (800cbe4 <CDC_Init_FS+0x1c>)
 800cbd0:	4805      	ldr	r0, [pc, #20]	@ (800cbe8 <CDC_Init_FS+0x20>)
 800cbd2:	f7fb f86b 	bl	8007cac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cbd6:	4905      	ldr	r1, [pc, #20]	@ (800cbec <CDC_Init_FS+0x24>)
 800cbd8:	4803      	ldr	r0, [pc, #12]	@ (800cbe8 <CDC_Init_FS+0x20>)
 800cbda:	f7fb f889 	bl	8007cf0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cbde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	20005970 	.word	0x20005970
 800cbe8:	20004e94 	.word	0x20004e94
 800cbec:	20005170 	.word	0x20005170

0800cbf0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cbf4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr

0800cc00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b083      	sub	sp, #12
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	4603      	mov	r3, r0
 800cc08:	6039      	str	r1, [r7, #0]
 800cc0a:	71fb      	strb	r3, [r7, #7]
 800cc0c:	4613      	mov	r3, r2
 800cc0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cc10:	79fb      	ldrb	r3, [r7, #7]
 800cc12:	2b23      	cmp	r3, #35	@ 0x23
 800cc14:	d84a      	bhi.n	800ccac <CDC_Control_FS+0xac>
 800cc16:	a201      	add	r2, pc, #4	@ (adr r2, 800cc1c <CDC_Control_FS+0x1c>)
 800cc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc1c:	0800ccad 	.word	0x0800ccad
 800cc20:	0800ccad 	.word	0x0800ccad
 800cc24:	0800ccad 	.word	0x0800ccad
 800cc28:	0800ccad 	.word	0x0800ccad
 800cc2c:	0800ccad 	.word	0x0800ccad
 800cc30:	0800ccad 	.word	0x0800ccad
 800cc34:	0800ccad 	.word	0x0800ccad
 800cc38:	0800ccad 	.word	0x0800ccad
 800cc3c:	0800ccad 	.word	0x0800ccad
 800cc40:	0800ccad 	.word	0x0800ccad
 800cc44:	0800ccad 	.word	0x0800ccad
 800cc48:	0800ccad 	.word	0x0800ccad
 800cc4c:	0800ccad 	.word	0x0800ccad
 800cc50:	0800ccad 	.word	0x0800ccad
 800cc54:	0800ccad 	.word	0x0800ccad
 800cc58:	0800ccad 	.word	0x0800ccad
 800cc5c:	0800ccad 	.word	0x0800ccad
 800cc60:	0800ccad 	.word	0x0800ccad
 800cc64:	0800ccad 	.word	0x0800ccad
 800cc68:	0800ccad 	.word	0x0800ccad
 800cc6c:	0800ccad 	.word	0x0800ccad
 800cc70:	0800ccad 	.word	0x0800ccad
 800cc74:	0800ccad 	.word	0x0800ccad
 800cc78:	0800ccad 	.word	0x0800ccad
 800cc7c:	0800ccad 	.word	0x0800ccad
 800cc80:	0800ccad 	.word	0x0800ccad
 800cc84:	0800ccad 	.word	0x0800ccad
 800cc88:	0800ccad 	.word	0x0800ccad
 800cc8c:	0800ccad 	.word	0x0800ccad
 800cc90:	0800ccad 	.word	0x0800ccad
 800cc94:	0800ccad 	.word	0x0800ccad
 800cc98:	0800ccad 	.word	0x0800ccad
 800cc9c:	0800ccad 	.word	0x0800ccad
 800cca0:	0800ccad 	.word	0x0800ccad
 800cca4:	0800ccad 	.word	0x0800ccad
 800cca8:	0800ccad 	.word	0x0800ccad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ccac:	bf00      	nop
  }

  return (USBD_OK);
 800ccae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr

0800ccbc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ccc6:	6879      	ldr	r1, [r7, #4]
 800ccc8:	4805      	ldr	r0, [pc, #20]	@ (800cce0 <CDC_Receive_FS+0x24>)
 800ccca:	f7fb f811 	bl	8007cf0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ccce:	4804      	ldr	r0, [pc, #16]	@ (800cce0 <CDC_Receive_FS+0x24>)
 800ccd0:	f7fb f82c 	bl	8007d2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ccd4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	20004e94 	.word	0x20004e94

0800cce4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b086      	sub	sp, #24
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	4613      	mov	r3, r2
 800ccf0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  usbTxReady = 1;
 800ccf6:	4b07      	ldr	r3, [pc, #28]	@ (800cd14 <CDC_TransmitCplt_FS+0x30>)
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800ccfc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800cd00:	4805      	ldr	r0, [pc, #20]	@ (800cd18 <CDC_TransmitCplt_FS+0x34>)
 800cd02:	f7f5 f9c8 	bl	8002096 <HAL_GPIO_TogglePin>
  /* USER CODE END 13 */
  return result;
 800cd06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3718      	adds	r7, #24
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	20000000 	.word	0x20000000
 800cd18:	40020c00 	.word	0x40020c00

0800cd1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b083      	sub	sp, #12
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	4603      	mov	r3, r0
 800cd24:	6039      	str	r1, [r7, #0]
 800cd26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	2212      	movs	r2, #18
 800cd2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cd2e:	4b03      	ldr	r3, [pc, #12]	@ (800cd3c <USBD_FS_DeviceDescriptor+0x20>)
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	370c      	adds	r7, #12
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr
 800cd3c:	200000d8 	.word	0x200000d8

0800cd40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b083      	sub	sp, #12
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	4603      	mov	r3, r0
 800cd48:	6039      	str	r1, [r7, #0]
 800cd4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	2204      	movs	r2, #4
 800cd50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cd52:	4b03      	ldr	r3, [pc, #12]	@ (800cd60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	370c      	adds	r7, #12
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr
 800cd60:	200000ec 	.word	0x200000ec

0800cd64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	6039      	str	r1, [r7, #0]
 800cd6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd70:	79fb      	ldrb	r3, [r7, #7]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d105      	bne.n	800cd82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd76:	683a      	ldr	r2, [r7, #0]
 800cd78:	4907      	ldr	r1, [pc, #28]	@ (800cd98 <USBD_FS_ProductStrDescriptor+0x34>)
 800cd7a:	4808      	ldr	r0, [pc, #32]	@ (800cd9c <USBD_FS_ProductStrDescriptor+0x38>)
 800cd7c:	f7fc fa22 	bl	80091c4 <USBD_GetString>
 800cd80:	e004      	b.n	800cd8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd82:	683a      	ldr	r2, [r7, #0]
 800cd84:	4904      	ldr	r1, [pc, #16]	@ (800cd98 <USBD_FS_ProductStrDescriptor+0x34>)
 800cd86:	4805      	ldr	r0, [pc, #20]	@ (800cd9c <USBD_FS_ProductStrDescriptor+0x38>)
 800cd88:	f7fc fa1c 	bl	80091c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd8c:	4b02      	ldr	r3, [pc, #8]	@ (800cd98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3708      	adds	r7, #8
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	20006170 	.word	0x20006170
 800cd9c:	0800e644 	.word	0x0800e644

0800cda0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	4603      	mov	r3, r0
 800cda8:	6039      	str	r1, [r7, #0]
 800cdaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cdac:	683a      	ldr	r2, [r7, #0]
 800cdae:	4904      	ldr	r1, [pc, #16]	@ (800cdc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cdb0:	4804      	ldr	r0, [pc, #16]	@ (800cdc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cdb2:	f7fc fa07 	bl	80091c4 <USBD_GetString>
  return USBD_StrDesc;
 800cdb6:	4b02      	ldr	r3, [pc, #8]	@ (800cdc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3708      	adds	r7, #8
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	20006170 	.word	0x20006170
 800cdc4:	0800e65c 	.word	0x0800e65c

0800cdc8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	4603      	mov	r3, r0
 800cdd0:	6039      	str	r1, [r7, #0]
 800cdd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	221a      	movs	r2, #26
 800cdd8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cdda:	f000 f843 	bl	800ce64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cdde:	4b02      	ldr	r3, [pc, #8]	@ (800cde8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3708      	adds	r7, #8
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	200000f0 	.word	0x200000f0

0800cdec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	6039      	str	r1, [r7, #0]
 800cdf6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cdf8:	79fb      	ldrb	r3, [r7, #7]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d105      	bne.n	800ce0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cdfe:	683a      	ldr	r2, [r7, #0]
 800ce00:	4907      	ldr	r1, [pc, #28]	@ (800ce20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce02:	4808      	ldr	r0, [pc, #32]	@ (800ce24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce04:	f7fc f9de 	bl	80091c4 <USBD_GetString>
 800ce08:	e004      	b.n	800ce14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce0a:	683a      	ldr	r2, [r7, #0]
 800ce0c:	4904      	ldr	r1, [pc, #16]	@ (800ce20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce0e:	4805      	ldr	r0, [pc, #20]	@ (800ce24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce10:	f7fc f9d8 	bl	80091c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce14:	4b02      	ldr	r3, [pc, #8]	@ (800ce20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3708      	adds	r7, #8
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	20006170 	.word	0x20006170
 800ce24:	0800e670 	.word	0x0800e670

0800ce28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	4603      	mov	r3, r0
 800ce30:	6039      	str	r1, [r7, #0]
 800ce32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce34:	79fb      	ldrb	r3, [r7, #7]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d105      	bne.n	800ce46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce3a:	683a      	ldr	r2, [r7, #0]
 800ce3c:	4907      	ldr	r1, [pc, #28]	@ (800ce5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce3e:	4808      	ldr	r0, [pc, #32]	@ (800ce60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce40:	f7fc f9c0 	bl	80091c4 <USBD_GetString>
 800ce44:	e004      	b.n	800ce50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce46:	683a      	ldr	r2, [r7, #0]
 800ce48:	4904      	ldr	r1, [pc, #16]	@ (800ce5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce4a:	4805      	ldr	r0, [pc, #20]	@ (800ce60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce4c:	f7fc f9ba 	bl	80091c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce50:	4b02      	ldr	r3, [pc, #8]	@ (800ce5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3708      	adds	r7, #8
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	20006170 	.word	0x20006170
 800ce60:	0800e67c 	.word	0x0800e67c

0800ce64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ce6a:	4b0f      	ldr	r3, [pc, #60]	@ (800cea8 <Get_SerialNum+0x44>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ce70:	4b0e      	ldr	r3, [pc, #56]	@ (800ceac <Get_SerialNum+0x48>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ce76:	4b0e      	ldr	r3, [pc, #56]	@ (800ceb0 <Get_SerialNum+0x4c>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ce7c:	68fa      	ldr	r2, [r7, #12]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	4413      	add	r3, r2
 800ce82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d009      	beq.n	800ce9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ce8a:	2208      	movs	r2, #8
 800ce8c:	4909      	ldr	r1, [pc, #36]	@ (800ceb4 <Get_SerialNum+0x50>)
 800ce8e:	68f8      	ldr	r0, [r7, #12]
 800ce90:	f000 f814 	bl	800cebc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ce94:	2204      	movs	r2, #4
 800ce96:	4908      	ldr	r1, [pc, #32]	@ (800ceb8 <Get_SerialNum+0x54>)
 800ce98:	68b8      	ldr	r0, [r7, #8]
 800ce9a:	f000 f80f 	bl	800cebc <IntToUnicode>
  }
}
 800ce9e:	bf00      	nop
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	1fff7a10 	.word	0x1fff7a10
 800ceac:	1fff7a14 	.word	0x1fff7a14
 800ceb0:	1fff7a18 	.word	0x1fff7a18
 800ceb4:	200000f2 	.word	0x200000f2
 800ceb8:	20000102 	.word	0x20000102

0800cebc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b087      	sub	sp, #28
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	4613      	mov	r3, r2
 800cec8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ceca:	2300      	movs	r3, #0
 800cecc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cece:	2300      	movs	r3, #0
 800ced0:	75fb      	strb	r3, [r7, #23]
 800ced2:	e027      	b.n	800cf24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	0f1b      	lsrs	r3, r3, #28
 800ced8:	2b09      	cmp	r3, #9
 800ceda:	d80b      	bhi.n	800cef4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	0f1b      	lsrs	r3, r3, #28
 800cee0:	b2da      	uxtb	r2, r3
 800cee2:	7dfb      	ldrb	r3, [r7, #23]
 800cee4:	005b      	lsls	r3, r3, #1
 800cee6:	4619      	mov	r1, r3
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	440b      	add	r3, r1
 800ceec:	3230      	adds	r2, #48	@ 0x30
 800ceee:	b2d2      	uxtb	r2, r2
 800cef0:	701a      	strb	r2, [r3, #0]
 800cef2:	e00a      	b.n	800cf0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	0f1b      	lsrs	r3, r3, #28
 800cef8:	b2da      	uxtb	r2, r3
 800cefa:	7dfb      	ldrb	r3, [r7, #23]
 800cefc:	005b      	lsls	r3, r3, #1
 800cefe:	4619      	mov	r1, r3
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	440b      	add	r3, r1
 800cf04:	3237      	adds	r2, #55	@ 0x37
 800cf06:	b2d2      	uxtb	r2, r2
 800cf08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	011b      	lsls	r3, r3, #4
 800cf0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cf10:	7dfb      	ldrb	r3, [r7, #23]
 800cf12:	005b      	lsls	r3, r3, #1
 800cf14:	3301      	adds	r3, #1
 800cf16:	68ba      	ldr	r2, [r7, #8]
 800cf18:	4413      	add	r3, r2
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cf1e:	7dfb      	ldrb	r3, [r7, #23]
 800cf20:	3301      	adds	r3, #1
 800cf22:	75fb      	strb	r3, [r7, #23]
 800cf24:	7dfa      	ldrb	r2, [r7, #23]
 800cf26:	79fb      	ldrb	r3, [r7, #7]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d3d3      	bcc.n	800ced4 <IntToUnicode+0x18>
  }
}
 800cf2c:	bf00      	nop
 800cf2e:	bf00      	nop
 800cf30:	371c      	adds	r7, #28
 800cf32:	46bd      	mov	sp, r7
 800cf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf38:	4770      	bx	lr
	...

0800cf3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b08a      	sub	sp, #40	@ 0x28
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf44:	f107 0314 	add.w	r3, r7, #20
 800cf48:	2200      	movs	r2, #0
 800cf4a:	601a      	str	r2, [r3, #0]
 800cf4c:	605a      	str	r2, [r3, #4]
 800cf4e:	609a      	str	r2, [r3, #8]
 800cf50:	60da      	str	r2, [r3, #12]
 800cf52:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cf5c:	d158      	bne.n	800d010 <HAL_PCD_MspInit+0xd4>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf5e:	2300      	movs	r3, #0
 800cf60:	613b      	str	r3, [r7, #16]
 800cf62:	4b2d      	ldr	r3, [pc, #180]	@ (800d018 <HAL_PCD_MspInit+0xdc>)
 800cf64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf66:	4a2c      	ldr	r2, [pc, #176]	@ (800d018 <HAL_PCD_MspInit+0xdc>)
 800cf68:	f043 0301 	orr.w	r3, r3, #1
 800cf6c:	6313      	str	r3, [r2, #48]	@ 0x30
 800cf6e:	4b2a      	ldr	r3, [pc, #168]	@ (800d018 <HAL_PCD_MspInit+0xdc>)
 800cf70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf72:	f003 0301 	and.w	r3, r3, #1
 800cf76:	613b      	str	r3, [r7, #16]
 800cf78:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800cf7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cf7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cf80:	2300      	movs	r3, #0
 800cf82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf84:	2300      	movs	r3, #0
 800cf86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800cf88:	f107 0314 	add.w	r3, r7, #20
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	4823      	ldr	r0, [pc, #140]	@ (800d01c <HAL_PCD_MspInit+0xe0>)
 800cf90:	f7f4 fecc 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin;
 800cf94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf9a:	2302      	movs	r3, #2
 800cf9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cfa6:	230a      	movs	r3, #10
 800cfa8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(OTG_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800cfaa:	f107 0314 	add.w	r3, r7, #20
 800cfae:	4619      	mov	r1, r3
 800cfb0:	481a      	ldr	r0, [pc, #104]	@ (800d01c <HAL_PCD_MspInit+0xe0>)
 800cfb2:	f7f4 febb 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cfb6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800cfba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cfbc:	2302      	movs	r3, #2
 800cfbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cfc4:	2303      	movs	r3, #3
 800cfc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cfc8:	230a      	movs	r3, #10
 800cfca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cfcc:	f107 0314 	add.w	r3, r7, #20
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	4812      	ldr	r0, [pc, #72]	@ (800d01c <HAL_PCD_MspInit+0xe0>)
 800cfd4:	f7f4 feaa 	bl	8001d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cfd8:	4b0f      	ldr	r3, [pc, #60]	@ (800d018 <HAL_PCD_MspInit+0xdc>)
 800cfda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfdc:	4a0e      	ldr	r2, [pc, #56]	@ (800d018 <HAL_PCD_MspInit+0xdc>)
 800cfde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfe2:	6353      	str	r3, [r2, #52]	@ 0x34
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	60fb      	str	r3, [r7, #12]
 800cfe8:	4b0b      	ldr	r3, [pc, #44]	@ (800d018 <HAL_PCD_MspInit+0xdc>)
 800cfea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfec:	4a0a      	ldr	r2, [pc, #40]	@ (800d018 <HAL_PCD_MspInit+0xdc>)
 800cfee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cff2:	6453      	str	r3, [r2, #68]	@ 0x44
 800cff4:	4b08      	ldr	r3, [pc, #32]	@ (800d018 <HAL_PCD_MspInit+0xdc>)
 800cff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cff8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cffc:	60fb      	str	r3, [r7, #12]
 800cffe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d000:	2200      	movs	r2, #0
 800d002:	2105      	movs	r1, #5
 800d004:	2043      	movs	r0, #67	@ 0x43
 800d006:	f7f4 fadb 	bl	80015c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d00a:	2043      	movs	r0, #67	@ 0x43
 800d00c:	f7f4 faf4 	bl	80015f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d010:	bf00      	nop
 800d012:	3728      	adds	r7, #40	@ 0x28
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	40023800 	.word	0x40023800
 800d01c:	40020000 	.word	0x40020000

0800d020 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d034:	4619      	mov	r1, r3
 800d036:	4610      	mov	r0, r2
 800d038:	f7fa ff61 	bl	8007efe <USBD_LL_SetupStage>
}
 800d03c:	bf00      	nop
 800d03e:	3708      	adds	r7, #8
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	460b      	mov	r3, r1
 800d04e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d056:	78fa      	ldrb	r2, [r7, #3]
 800d058:	6879      	ldr	r1, [r7, #4]
 800d05a:	4613      	mov	r3, r2
 800d05c:	00db      	lsls	r3, r3, #3
 800d05e:	4413      	add	r3, r2
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	440b      	add	r3, r1
 800d064:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	78fb      	ldrb	r3, [r7, #3]
 800d06c:	4619      	mov	r1, r3
 800d06e:	f7fa ff9b 	bl	8007fa8 <USBD_LL_DataOutStage>
}
 800d072:	bf00      	nop
 800d074:	3708      	adds	r7, #8
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}

0800d07a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d07a:	b580      	push	{r7, lr}
 800d07c:	b082      	sub	sp, #8
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
 800d082:	460b      	mov	r3, r1
 800d084:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d08c:	78fa      	ldrb	r2, [r7, #3]
 800d08e:	6879      	ldr	r1, [r7, #4]
 800d090:	4613      	mov	r3, r2
 800d092:	00db      	lsls	r3, r3, #3
 800d094:	4413      	add	r3, r2
 800d096:	009b      	lsls	r3, r3, #2
 800d098:	440b      	add	r3, r1
 800d09a:	3320      	adds	r3, #32
 800d09c:	681a      	ldr	r2, [r3, #0]
 800d09e:	78fb      	ldrb	r3, [r7, #3]
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	f7fb f834 	bl	800810e <USBD_LL_DataInStage>
}
 800d0a6:	bf00      	nop
 800d0a8:	3708      	adds	r7, #8
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}

0800d0ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0ae:	b580      	push	{r7, lr}
 800d0b0:	b082      	sub	sp, #8
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7fb f96e 	bl	800839e <USBD_LL_SOF>
}
 800d0c2:	bf00      	nop
 800d0c4:	3708      	adds	r7, #8
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0ca:	b580      	push	{r7, lr}
 800d0cc:	b084      	sub	sp, #16
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	79db      	ldrb	r3, [r3, #7]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d102      	bne.n	800d0e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	73fb      	strb	r3, [r7, #15]
 800d0e2:	e008      	b.n	800d0f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	79db      	ldrb	r3, [r3, #7]
 800d0e8:	2b02      	cmp	r3, #2
 800d0ea:	d102      	bne.n	800d0f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	73fb      	strb	r3, [r7, #15]
 800d0f0:	e001      	b.n	800d0f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d0f2:	f7f3 fe1b 	bl	8000d2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d0fc:	7bfa      	ldrb	r2, [r7, #15]
 800d0fe:	4611      	mov	r1, r2
 800d100:	4618      	mov	r0, r3
 800d102:	f7fb f908 	bl	8008316 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7fb f8b0 	bl	8008272 <USBD_LL_Reset>
}
 800d112:	bf00      	nop
 800d114:	3710      	adds	r7, #16
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
	...

0800d11c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7fb f903 	bl	8008336 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	687a      	ldr	r2, [r7, #4]
 800d13c:	6812      	ldr	r2, [r2, #0]
 800d13e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d142:	f043 0301 	orr.w	r3, r3, #1
 800d146:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	7adb      	ldrb	r3, [r3, #11]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d005      	beq.n	800d15c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d150:	4b04      	ldr	r3, [pc, #16]	@ (800d164 <HAL_PCD_SuspendCallback+0x48>)
 800d152:	691b      	ldr	r3, [r3, #16]
 800d154:	4a03      	ldr	r2, [pc, #12]	@ (800d164 <HAL_PCD_SuspendCallback+0x48>)
 800d156:	f043 0306 	orr.w	r3, r3, #6
 800d15a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d15c:	bf00      	nop
 800d15e:	3708      	adds	r7, #8
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	e000ed00 	.word	0xe000ed00

0800d168 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d176:	4618      	mov	r0, r3
 800d178:	f7fb f8f9 	bl	800836e <USBD_LL_Resume>
}
 800d17c:	bf00      	nop
 800d17e:	3708      	adds	r7, #8
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	460b      	mov	r3, r1
 800d18e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d196:	78fa      	ldrb	r2, [r7, #3]
 800d198:	4611      	mov	r1, r2
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7fb f951 	bl	8008442 <USBD_LL_IsoOUTIncomplete>
}
 800d1a0:	bf00      	nop
 800d1a2:	3708      	adds	r7, #8
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1ba:	78fa      	ldrb	r2, [r7, #3]
 800d1bc:	4611      	mov	r1, r2
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fb f90d 	bl	80083de <USBD_LL_IsoINIncomplete>
}
 800d1c4:	bf00      	nop
 800d1c6:	3708      	adds	r7, #8
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7fb f963 	bl	80084a6 <USBD_LL_DevConnected>
}
 800d1e0:	bf00      	nop
 800d1e2:	3708      	adds	r7, #8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7fb f960 	bl	80084bc <USBD_LL_DevDisconnected>
}
 800d1fc:	bf00      	nop
 800d1fe:	3708      	adds	r7, #8
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d13c      	bne.n	800d28e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d214:	4a20      	ldr	r2, [pc, #128]	@ (800d298 <USBD_LL_Init+0x94>)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	4a1e      	ldr	r2, [pc, #120]	@ (800d298 <USBD_LL_Init+0x94>)
 800d220:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d224:	4b1c      	ldr	r3, [pc, #112]	@ (800d298 <USBD_LL_Init+0x94>)
 800d226:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d22a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d22c:	4b1a      	ldr	r3, [pc, #104]	@ (800d298 <USBD_LL_Init+0x94>)
 800d22e:	2204      	movs	r2, #4
 800d230:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d232:	4b19      	ldr	r3, [pc, #100]	@ (800d298 <USBD_LL_Init+0x94>)
 800d234:	2202      	movs	r2, #2
 800d236:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d238:	4b17      	ldr	r3, [pc, #92]	@ (800d298 <USBD_LL_Init+0x94>)
 800d23a:	2200      	movs	r2, #0
 800d23c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d23e:	4b16      	ldr	r3, [pc, #88]	@ (800d298 <USBD_LL_Init+0x94>)
 800d240:	2202      	movs	r2, #2
 800d242:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d244:	4b14      	ldr	r3, [pc, #80]	@ (800d298 <USBD_LL_Init+0x94>)
 800d246:	2200      	movs	r2, #0
 800d248:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d24a:	4b13      	ldr	r3, [pc, #76]	@ (800d298 <USBD_LL_Init+0x94>)
 800d24c:	2200      	movs	r2, #0
 800d24e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d250:	4b11      	ldr	r3, [pc, #68]	@ (800d298 <USBD_LL_Init+0x94>)
 800d252:	2200      	movs	r2, #0
 800d254:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d256:	4b10      	ldr	r3, [pc, #64]	@ (800d298 <USBD_LL_Init+0x94>)
 800d258:	2200      	movs	r2, #0
 800d25a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d25c:	4b0e      	ldr	r3, [pc, #56]	@ (800d298 <USBD_LL_Init+0x94>)
 800d25e:	2200      	movs	r2, #0
 800d260:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d262:	480d      	ldr	r0, [pc, #52]	@ (800d298 <USBD_LL_Init+0x94>)
 800d264:	f7f5 fce0 	bl	8002c28 <HAL_PCD_Init>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d001      	beq.n	800d272 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d26e:	f7f3 fd5d 	bl	8000d2c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d272:	2180      	movs	r1, #128	@ 0x80
 800d274:	4808      	ldr	r0, [pc, #32]	@ (800d298 <USBD_LL_Init+0x94>)
 800d276:	f7f6 ff0c 	bl	8004092 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d27a:	2240      	movs	r2, #64	@ 0x40
 800d27c:	2100      	movs	r1, #0
 800d27e:	4806      	ldr	r0, [pc, #24]	@ (800d298 <USBD_LL_Init+0x94>)
 800d280:	f7f6 fec0 	bl	8004004 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d284:	2280      	movs	r2, #128	@ 0x80
 800d286:	2101      	movs	r1, #1
 800d288:	4803      	ldr	r0, [pc, #12]	@ (800d298 <USBD_LL_Init+0x94>)
 800d28a:	f7f6 febb 	bl	8004004 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d28e:	2300      	movs	r3, #0
}
 800d290:	4618      	mov	r0, r3
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	20006370 	.word	0x20006370

0800d29c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7f5 fdc7 	bl	8002e46 <HAL_PCD_Start>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2bc:	7bfb      	ldrb	r3, [r7, #15]
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f000 f942 	bl	800d548 <USBD_Get_USB_Status>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3710      	adds	r7, #16
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}

0800d2d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d2d2:	b580      	push	{r7, lr}
 800d2d4:	b084      	sub	sp, #16
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
 800d2da:	4608      	mov	r0, r1
 800d2dc:	4611      	mov	r1, r2
 800d2de:	461a      	mov	r2, r3
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	70fb      	strb	r3, [r7, #3]
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	70bb      	strb	r3, [r7, #2]
 800d2e8:	4613      	mov	r3, r2
 800d2ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d2fa:	78bb      	ldrb	r3, [r7, #2]
 800d2fc:	883a      	ldrh	r2, [r7, #0]
 800d2fe:	78f9      	ldrb	r1, [r7, #3]
 800d300:	f7f6 fa9b 	bl	800383a <HAL_PCD_EP_Open>
 800d304:	4603      	mov	r3, r0
 800d306:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d308:	7bfb      	ldrb	r3, [r7, #15]
 800d30a:	4618      	mov	r0, r3
 800d30c:	f000 f91c 	bl	800d548 <USBD_Get_USB_Status>
 800d310:	4603      	mov	r3, r0
 800d312:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d314:	7bbb      	ldrb	r3, [r7, #14]
}
 800d316:	4618      	mov	r0, r3
 800d318:	3710      	adds	r7, #16
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}

0800d31e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d31e:	b580      	push	{r7, lr}
 800d320:	b084      	sub	sp, #16
 800d322:	af00      	add	r7, sp, #0
 800d324:	6078      	str	r0, [r7, #4]
 800d326:	460b      	mov	r3, r1
 800d328:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d32a:	2300      	movs	r3, #0
 800d32c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d32e:	2300      	movs	r3, #0
 800d330:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d338:	78fa      	ldrb	r2, [r7, #3]
 800d33a:	4611      	mov	r1, r2
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7f6 fae6 	bl	800390e <HAL_PCD_EP_Close>
 800d342:	4603      	mov	r3, r0
 800d344:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d346:	7bfb      	ldrb	r3, [r7, #15]
 800d348:	4618      	mov	r0, r3
 800d34a:	f000 f8fd 	bl	800d548 <USBD_Get_USB_Status>
 800d34e:	4603      	mov	r3, r0
 800d350:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d352:	7bbb      	ldrb	r3, [r7, #14]
}
 800d354:	4618      	mov	r0, r3
 800d356:	3710      	adds	r7, #16
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b084      	sub	sp, #16
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	460b      	mov	r3, r1
 800d366:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d368:	2300      	movs	r3, #0
 800d36a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d36c:	2300      	movs	r3, #0
 800d36e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d376:	78fa      	ldrb	r2, [r7, #3]
 800d378:	4611      	mov	r1, r2
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7f6 fb9e 	bl	8003abc <HAL_PCD_EP_SetStall>
 800d380:	4603      	mov	r3, r0
 800d382:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d384:	7bfb      	ldrb	r3, [r7, #15]
 800d386:	4618      	mov	r0, r3
 800d388:	f000 f8de 	bl	800d548 <USBD_Get_USB_Status>
 800d38c:	4603      	mov	r3, r0
 800d38e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d390:	7bbb      	ldrb	r3, [r7, #14]
}
 800d392:	4618      	mov	r0, r3
 800d394:	3710      	adds	r7, #16
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}

0800d39a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d39a:	b580      	push	{r7, lr}
 800d39c:	b084      	sub	sp, #16
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	6078      	str	r0, [r7, #4]
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d3b4:	78fa      	ldrb	r2, [r7, #3]
 800d3b6:	4611      	mov	r1, r2
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7f6 fbe2 	bl	8003b82 <HAL_PCD_EP_ClrStall>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3c2:	7bfb      	ldrb	r3, [r7, #15]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f000 f8bf 	bl	800d548 <USBD_Get_USB_Status>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3710      	adds	r7, #16
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b085      	sub	sp, #20
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d3ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d3ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	da0b      	bge.n	800d40c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d3f4:	78fb      	ldrb	r3, [r7, #3]
 800d3f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d3fa:	68f9      	ldr	r1, [r7, #12]
 800d3fc:	4613      	mov	r3, r2
 800d3fe:	00db      	lsls	r3, r3, #3
 800d400:	4413      	add	r3, r2
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	440b      	add	r3, r1
 800d406:	3316      	adds	r3, #22
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	e00b      	b.n	800d424 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d40c:	78fb      	ldrb	r3, [r7, #3]
 800d40e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d412:	68f9      	ldr	r1, [r7, #12]
 800d414:	4613      	mov	r3, r2
 800d416:	00db      	lsls	r3, r3, #3
 800d418:	4413      	add	r3, r2
 800d41a:	009b      	lsls	r3, r3, #2
 800d41c:	440b      	add	r3, r1
 800d41e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d422:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d424:	4618      	mov	r0, r3
 800d426:	3714      	adds	r7, #20
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	460b      	mov	r3, r1
 800d43a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d43c:	2300      	movs	r3, #0
 800d43e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d440:	2300      	movs	r3, #0
 800d442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d44a:	78fa      	ldrb	r2, [r7, #3]
 800d44c:	4611      	mov	r1, r2
 800d44e:	4618      	mov	r0, r3
 800d450:	f7f6 f9cf 	bl	80037f2 <HAL_PCD_SetAddress>
 800d454:	4603      	mov	r3, r0
 800d456:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d458:	7bfb      	ldrb	r3, [r7, #15]
 800d45a:	4618      	mov	r0, r3
 800d45c:	f000 f874 	bl	800d548 <USBD_Get_USB_Status>
 800d460:	4603      	mov	r3, r0
 800d462:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d464:	7bbb      	ldrb	r3, [r7, #14]
}
 800d466:	4618      	mov	r0, r3
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d46e:	b580      	push	{r7, lr}
 800d470:	b086      	sub	sp, #24
 800d472:	af00      	add	r7, sp, #0
 800d474:	60f8      	str	r0, [r7, #12]
 800d476:	607a      	str	r2, [r7, #4]
 800d478:	603b      	str	r3, [r7, #0]
 800d47a:	460b      	mov	r3, r1
 800d47c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d47e:	2300      	movs	r3, #0
 800d480:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d482:	2300      	movs	r3, #0
 800d484:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d48c:	7af9      	ldrb	r1, [r7, #11]
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	f7f6 fad9 	bl	8003a48 <HAL_PCD_EP_Transmit>
 800d496:	4603      	mov	r3, r0
 800d498:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d49a:	7dfb      	ldrb	r3, [r7, #23]
 800d49c:	4618      	mov	r0, r3
 800d49e:	f000 f853 	bl	800d548 <USBD_Get_USB_Status>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d4a6:	7dbb      	ldrb	r3, [r7, #22]
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3718      	adds	r7, #24
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b086      	sub	sp, #24
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	60f8      	str	r0, [r7, #12]
 800d4b8:	607a      	str	r2, [r7, #4]
 800d4ba:	603b      	str	r3, [r7, #0]
 800d4bc:	460b      	mov	r3, r1
 800d4be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d4ce:	7af9      	ldrb	r1, [r7, #11]
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	f7f6 fa65 	bl	80039a2 <HAL_PCD_EP_Receive>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4dc:	7dfb      	ldrb	r3, [r7, #23]
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f000 f832 	bl	800d548 <USBD_Get_USB_Status>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d4e8:	7dbb      	ldrb	r3, [r7, #22]
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3718      	adds	r7, #24
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}

0800d4f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b082      	sub	sp, #8
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
 800d4fa:	460b      	mov	r3, r1
 800d4fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d504:	78fa      	ldrb	r2, [r7, #3]
 800d506:	4611      	mov	r1, r2
 800d508:	4618      	mov	r0, r3
 800d50a:	f7f6 fa85 	bl	8003a18 <HAL_PCD_EP_GetRxCount>
 800d50e:	4603      	mov	r3, r0
}
 800d510:	4618      	mov	r0, r3
 800d512:	3708      	adds	r7, #8
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d520:	4b03      	ldr	r3, [pc, #12]	@ (800d530 <USBD_static_malloc+0x18>)
}
 800d522:	4618      	mov	r0, r3
 800d524:	370c      	adds	r7, #12
 800d526:	46bd      	mov	sp, r7
 800d528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52c:	4770      	bx	lr
 800d52e:	bf00      	nop
 800d530:	20006854 	.word	0x20006854

0800d534 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d534:	b480      	push	{r7}
 800d536:	b083      	sub	sp, #12
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]

}
 800d53c:	bf00      	nop
 800d53e:	370c      	adds	r7, #12
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr

0800d548 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d548:	b480      	push	{r7}
 800d54a:	b085      	sub	sp, #20
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	4603      	mov	r3, r0
 800d550:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d552:	2300      	movs	r3, #0
 800d554:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d556:	79fb      	ldrb	r3, [r7, #7]
 800d558:	2b03      	cmp	r3, #3
 800d55a:	d817      	bhi.n	800d58c <USBD_Get_USB_Status+0x44>
 800d55c:	a201      	add	r2, pc, #4	@ (adr r2, 800d564 <USBD_Get_USB_Status+0x1c>)
 800d55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d562:	bf00      	nop
 800d564:	0800d575 	.word	0x0800d575
 800d568:	0800d57b 	.word	0x0800d57b
 800d56c:	0800d581 	.word	0x0800d581
 800d570:	0800d587 	.word	0x0800d587
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d574:	2300      	movs	r3, #0
 800d576:	73fb      	strb	r3, [r7, #15]
    break;
 800d578:	e00b      	b.n	800d592 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d57a:	2303      	movs	r3, #3
 800d57c:	73fb      	strb	r3, [r7, #15]
    break;
 800d57e:	e008      	b.n	800d592 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d580:	2301      	movs	r3, #1
 800d582:	73fb      	strb	r3, [r7, #15]
    break;
 800d584:	e005      	b.n	800d592 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d586:	2303      	movs	r3, #3
 800d588:	73fb      	strb	r3, [r7, #15]
    break;
 800d58a:	e002      	b.n	800d592 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d58c:	2303      	movs	r3, #3
 800d58e:	73fb      	strb	r3, [r7, #15]
    break;
 800d590:	bf00      	nop
  }
  return usb_status;
 800d592:	7bfb      	ldrb	r3, [r7, #15]
}
 800d594:	4618      	mov	r0, r3
 800d596:	3714      	adds	r7, #20
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr

0800d5a0 <std>:
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	b510      	push	{r4, lr}
 800d5a4:	4604      	mov	r4, r0
 800d5a6:	e9c0 3300 	strd	r3, r3, [r0]
 800d5aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d5ae:	6083      	str	r3, [r0, #8]
 800d5b0:	8181      	strh	r1, [r0, #12]
 800d5b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800d5b4:	81c2      	strh	r2, [r0, #14]
 800d5b6:	6183      	str	r3, [r0, #24]
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	2208      	movs	r2, #8
 800d5bc:	305c      	adds	r0, #92	@ 0x5c
 800d5be:	f000 f9f9 	bl	800d9b4 <memset>
 800d5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800d5f8 <std+0x58>)
 800d5c4:	6263      	str	r3, [r4, #36]	@ 0x24
 800d5c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d5fc <std+0x5c>)
 800d5c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d5ca:	4b0d      	ldr	r3, [pc, #52]	@ (800d600 <std+0x60>)
 800d5cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d5ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d604 <std+0x64>)
 800d5d0:	6323      	str	r3, [r4, #48]	@ 0x30
 800d5d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d608 <std+0x68>)
 800d5d4:	6224      	str	r4, [r4, #32]
 800d5d6:	429c      	cmp	r4, r3
 800d5d8:	d006      	beq.n	800d5e8 <std+0x48>
 800d5da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d5de:	4294      	cmp	r4, r2
 800d5e0:	d002      	beq.n	800d5e8 <std+0x48>
 800d5e2:	33d0      	adds	r3, #208	@ 0xd0
 800d5e4:	429c      	cmp	r4, r3
 800d5e6:	d105      	bne.n	800d5f4 <std+0x54>
 800d5e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5f0:	f000 baae 	b.w	800db50 <__retarget_lock_init_recursive>
 800d5f4:	bd10      	pop	{r4, pc}
 800d5f6:	bf00      	nop
 800d5f8:	0800d805 	.word	0x0800d805
 800d5fc:	0800d827 	.word	0x0800d827
 800d600:	0800d85f 	.word	0x0800d85f
 800d604:	0800d883 	.word	0x0800d883
 800d608:	20006a74 	.word	0x20006a74

0800d60c <stdio_exit_handler>:
 800d60c:	4a02      	ldr	r2, [pc, #8]	@ (800d618 <stdio_exit_handler+0xc>)
 800d60e:	4903      	ldr	r1, [pc, #12]	@ (800d61c <stdio_exit_handler+0x10>)
 800d610:	4803      	ldr	r0, [pc, #12]	@ (800d620 <stdio_exit_handler+0x14>)
 800d612:	f000 b869 	b.w	800d6e8 <_fwalk_sglue>
 800d616:	bf00      	nop
 800d618:	2000010c 	.word	0x2000010c
 800d61c:	0800e40d 	.word	0x0800e40d
 800d620:	2000011c 	.word	0x2000011c

0800d624 <cleanup_stdio>:
 800d624:	6841      	ldr	r1, [r0, #4]
 800d626:	4b0c      	ldr	r3, [pc, #48]	@ (800d658 <cleanup_stdio+0x34>)
 800d628:	4299      	cmp	r1, r3
 800d62a:	b510      	push	{r4, lr}
 800d62c:	4604      	mov	r4, r0
 800d62e:	d001      	beq.n	800d634 <cleanup_stdio+0x10>
 800d630:	f000 feec 	bl	800e40c <_fflush_r>
 800d634:	68a1      	ldr	r1, [r4, #8]
 800d636:	4b09      	ldr	r3, [pc, #36]	@ (800d65c <cleanup_stdio+0x38>)
 800d638:	4299      	cmp	r1, r3
 800d63a:	d002      	beq.n	800d642 <cleanup_stdio+0x1e>
 800d63c:	4620      	mov	r0, r4
 800d63e:	f000 fee5 	bl	800e40c <_fflush_r>
 800d642:	68e1      	ldr	r1, [r4, #12]
 800d644:	4b06      	ldr	r3, [pc, #24]	@ (800d660 <cleanup_stdio+0x3c>)
 800d646:	4299      	cmp	r1, r3
 800d648:	d004      	beq.n	800d654 <cleanup_stdio+0x30>
 800d64a:	4620      	mov	r0, r4
 800d64c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d650:	f000 bedc 	b.w	800e40c <_fflush_r>
 800d654:	bd10      	pop	{r4, pc}
 800d656:	bf00      	nop
 800d658:	20006a74 	.word	0x20006a74
 800d65c:	20006adc 	.word	0x20006adc
 800d660:	20006b44 	.word	0x20006b44

0800d664 <global_stdio_init.part.0>:
 800d664:	b510      	push	{r4, lr}
 800d666:	4b0b      	ldr	r3, [pc, #44]	@ (800d694 <global_stdio_init.part.0+0x30>)
 800d668:	4c0b      	ldr	r4, [pc, #44]	@ (800d698 <global_stdio_init.part.0+0x34>)
 800d66a:	4a0c      	ldr	r2, [pc, #48]	@ (800d69c <global_stdio_init.part.0+0x38>)
 800d66c:	601a      	str	r2, [r3, #0]
 800d66e:	4620      	mov	r0, r4
 800d670:	2200      	movs	r2, #0
 800d672:	2104      	movs	r1, #4
 800d674:	f7ff ff94 	bl	800d5a0 <std>
 800d678:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d67c:	2201      	movs	r2, #1
 800d67e:	2109      	movs	r1, #9
 800d680:	f7ff ff8e 	bl	800d5a0 <std>
 800d684:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d688:	2202      	movs	r2, #2
 800d68a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d68e:	2112      	movs	r1, #18
 800d690:	f7ff bf86 	b.w	800d5a0 <std>
 800d694:	20006bac 	.word	0x20006bac
 800d698:	20006a74 	.word	0x20006a74
 800d69c:	0800d60d 	.word	0x0800d60d

0800d6a0 <__sfp_lock_acquire>:
 800d6a0:	4801      	ldr	r0, [pc, #4]	@ (800d6a8 <__sfp_lock_acquire+0x8>)
 800d6a2:	f000 ba56 	b.w	800db52 <__retarget_lock_acquire_recursive>
 800d6a6:	bf00      	nop
 800d6a8:	20006bb5 	.word	0x20006bb5

0800d6ac <__sfp_lock_release>:
 800d6ac:	4801      	ldr	r0, [pc, #4]	@ (800d6b4 <__sfp_lock_release+0x8>)
 800d6ae:	f000 ba51 	b.w	800db54 <__retarget_lock_release_recursive>
 800d6b2:	bf00      	nop
 800d6b4:	20006bb5 	.word	0x20006bb5

0800d6b8 <__sinit>:
 800d6b8:	b510      	push	{r4, lr}
 800d6ba:	4604      	mov	r4, r0
 800d6bc:	f7ff fff0 	bl	800d6a0 <__sfp_lock_acquire>
 800d6c0:	6a23      	ldr	r3, [r4, #32]
 800d6c2:	b11b      	cbz	r3, 800d6cc <__sinit+0x14>
 800d6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6c8:	f7ff bff0 	b.w	800d6ac <__sfp_lock_release>
 800d6cc:	4b04      	ldr	r3, [pc, #16]	@ (800d6e0 <__sinit+0x28>)
 800d6ce:	6223      	str	r3, [r4, #32]
 800d6d0:	4b04      	ldr	r3, [pc, #16]	@ (800d6e4 <__sinit+0x2c>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d1f5      	bne.n	800d6c4 <__sinit+0xc>
 800d6d8:	f7ff ffc4 	bl	800d664 <global_stdio_init.part.0>
 800d6dc:	e7f2      	b.n	800d6c4 <__sinit+0xc>
 800d6de:	bf00      	nop
 800d6e0:	0800d625 	.word	0x0800d625
 800d6e4:	20006bac 	.word	0x20006bac

0800d6e8 <_fwalk_sglue>:
 800d6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6ec:	4607      	mov	r7, r0
 800d6ee:	4688      	mov	r8, r1
 800d6f0:	4614      	mov	r4, r2
 800d6f2:	2600      	movs	r6, #0
 800d6f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d6f8:	f1b9 0901 	subs.w	r9, r9, #1
 800d6fc:	d505      	bpl.n	800d70a <_fwalk_sglue+0x22>
 800d6fe:	6824      	ldr	r4, [r4, #0]
 800d700:	2c00      	cmp	r4, #0
 800d702:	d1f7      	bne.n	800d6f4 <_fwalk_sglue+0xc>
 800d704:	4630      	mov	r0, r6
 800d706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d70a:	89ab      	ldrh	r3, [r5, #12]
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d907      	bls.n	800d720 <_fwalk_sglue+0x38>
 800d710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d714:	3301      	adds	r3, #1
 800d716:	d003      	beq.n	800d720 <_fwalk_sglue+0x38>
 800d718:	4629      	mov	r1, r5
 800d71a:	4638      	mov	r0, r7
 800d71c:	47c0      	blx	r8
 800d71e:	4306      	orrs	r6, r0
 800d720:	3568      	adds	r5, #104	@ 0x68
 800d722:	e7e9      	b.n	800d6f8 <_fwalk_sglue+0x10>

0800d724 <iprintf>:
 800d724:	b40f      	push	{r0, r1, r2, r3}
 800d726:	b507      	push	{r0, r1, r2, lr}
 800d728:	4906      	ldr	r1, [pc, #24]	@ (800d744 <iprintf+0x20>)
 800d72a:	ab04      	add	r3, sp, #16
 800d72c:	6808      	ldr	r0, [r1, #0]
 800d72e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d732:	6881      	ldr	r1, [r0, #8]
 800d734:	9301      	str	r3, [sp, #4]
 800d736:	f000 fb3f 	bl	800ddb8 <_vfiprintf_r>
 800d73a:	b003      	add	sp, #12
 800d73c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d740:	b004      	add	sp, #16
 800d742:	4770      	bx	lr
 800d744:	20000118 	.word	0x20000118

0800d748 <_puts_r>:
 800d748:	6a03      	ldr	r3, [r0, #32]
 800d74a:	b570      	push	{r4, r5, r6, lr}
 800d74c:	6884      	ldr	r4, [r0, #8]
 800d74e:	4605      	mov	r5, r0
 800d750:	460e      	mov	r6, r1
 800d752:	b90b      	cbnz	r3, 800d758 <_puts_r+0x10>
 800d754:	f7ff ffb0 	bl	800d6b8 <__sinit>
 800d758:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d75a:	07db      	lsls	r3, r3, #31
 800d75c:	d405      	bmi.n	800d76a <_puts_r+0x22>
 800d75e:	89a3      	ldrh	r3, [r4, #12]
 800d760:	0598      	lsls	r0, r3, #22
 800d762:	d402      	bmi.n	800d76a <_puts_r+0x22>
 800d764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d766:	f000 f9f4 	bl	800db52 <__retarget_lock_acquire_recursive>
 800d76a:	89a3      	ldrh	r3, [r4, #12]
 800d76c:	0719      	lsls	r1, r3, #28
 800d76e:	d502      	bpl.n	800d776 <_puts_r+0x2e>
 800d770:	6923      	ldr	r3, [r4, #16]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d135      	bne.n	800d7e2 <_puts_r+0x9a>
 800d776:	4621      	mov	r1, r4
 800d778:	4628      	mov	r0, r5
 800d77a:	f000 f8c5 	bl	800d908 <__swsetup_r>
 800d77e:	b380      	cbz	r0, 800d7e2 <_puts_r+0x9a>
 800d780:	f04f 35ff 	mov.w	r5, #4294967295
 800d784:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d786:	07da      	lsls	r2, r3, #31
 800d788:	d405      	bmi.n	800d796 <_puts_r+0x4e>
 800d78a:	89a3      	ldrh	r3, [r4, #12]
 800d78c:	059b      	lsls	r3, r3, #22
 800d78e:	d402      	bmi.n	800d796 <_puts_r+0x4e>
 800d790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d792:	f000 f9df 	bl	800db54 <__retarget_lock_release_recursive>
 800d796:	4628      	mov	r0, r5
 800d798:	bd70      	pop	{r4, r5, r6, pc}
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	da04      	bge.n	800d7a8 <_puts_r+0x60>
 800d79e:	69a2      	ldr	r2, [r4, #24]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	dc17      	bgt.n	800d7d4 <_puts_r+0x8c>
 800d7a4:	290a      	cmp	r1, #10
 800d7a6:	d015      	beq.n	800d7d4 <_puts_r+0x8c>
 800d7a8:	6823      	ldr	r3, [r4, #0]
 800d7aa:	1c5a      	adds	r2, r3, #1
 800d7ac:	6022      	str	r2, [r4, #0]
 800d7ae:	7019      	strb	r1, [r3, #0]
 800d7b0:	68a3      	ldr	r3, [r4, #8]
 800d7b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d7b6:	3b01      	subs	r3, #1
 800d7b8:	60a3      	str	r3, [r4, #8]
 800d7ba:	2900      	cmp	r1, #0
 800d7bc:	d1ed      	bne.n	800d79a <_puts_r+0x52>
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	da11      	bge.n	800d7e6 <_puts_r+0x9e>
 800d7c2:	4622      	mov	r2, r4
 800d7c4:	210a      	movs	r1, #10
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	f000 f85f 	bl	800d88a <__swbuf_r>
 800d7cc:	3001      	adds	r0, #1
 800d7ce:	d0d7      	beq.n	800d780 <_puts_r+0x38>
 800d7d0:	250a      	movs	r5, #10
 800d7d2:	e7d7      	b.n	800d784 <_puts_r+0x3c>
 800d7d4:	4622      	mov	r2, r4
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	f000 f857 	bl	800d88a <__swbuf_r>
 800d7dc:	3001      	adds	r0, #1
 800d7de:	d1e7      	bne.n	800d7b0 <_puts_r+0x68>
 800d7e0:	e7ce      	b.n	800d780 <_puts_r+0x38>
 800d7e2:	3e01      	subs	r6, #1
 800d7e4:	e7e4      	b.n	800d7b0 <_puts_r+0x68>
 800d7e6:	6823      	ldr	r3, [r4, #0]
 800d7e8:	1c5a      	adds	r2, r3, #1
 800d7ea:	6022      	str	r2, [r4, #0]
 800d7ec:	220a      	movs	r2, #10
 800d7ee:	701a      	strb	r2, [r3, #0]
 800d7f0:	e7ee      	b.n	800d7d0 <_puts_r+0x88>
	...

0800d7f4 <puts>:
 800d7f4:	4b02      	ldr	r3, [pc, #8]	@ (800d800 <puts+0xc>)
 800d7f6:	4601      	mov	r1, r0
 800d7f8:	6818      	ldr	r0, [r3, #0]
 800d7fa:	f7ff bfa5 	b.w	800d748 <_puts_r>
 800d7fe:	bf00      	nop
 800d800:	20000118 	.word	0x20000118

0800d804 <__sread>:
 800d804:	b510      	push	{r4, lr}
 800d806:	460c      	mov	r4, r1
 800d808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d80c:	f000 f952 	bl	800dab4 <_read_r>
 800d810:	2800      	cmp	r0, #0
 800d812:	bfab      	itete	ge
 800d814:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d816:	89a3      	ldrhlt	r3, [r4, #12]
 800d818:	181b      	addge	r3, r3, r0
 800d81a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d81e:	bfac      	ite	ge
 800d820:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d822:	81a3      	strhlt	r3, [r4, #12]
 800d824:	bd10      	pop	{r4, pc}

0800d826 <__swrite>:
 800d826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d82a:	461f      	mov	r7, r3
 800d82c:	898b      	ldrh	r3, [r1, #12]
 800d82e:	05db      	lsls	r3, r3, #23
 800d830:	4605      	mov	r5, r0
 800d832:	460c      	mov	r4, r1
 800d834:	4616      	mov	r6, r2
 800d836:	d505      	bpl.n	800d844 <__swrite+0x1e>
 800d838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d83c:	2302      	movs	r3, #2
 800d83e:	2200      	movs	r2, #0
 800d840:	f000 f926 	bl	800da90 <_lseek_r>
 800d844:	89a3      	ldrh	r3, [r4, #12]
 800d846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d84a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d84e:	81a3      	strh	r3, [r4, #12]
 800d850:	4632      	mov	r2, r6
 800d852:	463b      	mov	r3, r7
 800d854:	4628      	mov	r0, r5
 800d856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d85a:	f000 b93d 	b.w	800dad8 <_write_r>

0800d85e <__sseek>:
 800d85e:	b510      	push	{r4, lr}
 800d860:	460c      	mov	r4, r1
 800d862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d866:	f000 f913 	bl	800da90 <_lseek_r>
 800d86a:	1c43      	adds	r3, r0, #1
 800d86c:	89a3      	ldrh	r3, [r4, #12]
 800d86e:	bf15      	itete	ne
 800d870:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d872:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d876:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d87a:	81a3      	strheq	r3, [r4, #12]
 800d87c:	bf18      	it	ne
 800d87e:	81a3      	strhne	r3, [r4, #12]
 800d880:	bd10      	pop	{r4, pc}

0800d882 <__sclose>:
 800d882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d886:	f000 b89d 	b.w	800d9c4 <_close_r>

0800d88a <__swbuf_r>:
 800d88a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d88c:	460e      	mov	r6, r1
 800d88e:	4614      	mov	r4, r2
 800d890:	4605      	mov	r5, r0
 800d892:	b118      	cbz	r0, 800d89c <__swbuf_r+0x12>
 800d894:	6a03      	ldr	r3, [r0, #32]
 800d896:	b90b      	cbnz	r3, 800d89c <__swbuf_r+0x12>
 800d898:	f7ff ff0e 	bl	800d6b8 <__sinit>
 800d89c:	69a3      	ldr	r3, [r4, #24]
 800d89e:	60a3      	str	r3, [r4, #8]
 800d8a0:	89a3      	ldrh	r3, [r4, #12]
 800d8a2:	071a      	lsls	r2, r3, #28
 800d8a4:	d501      	bpl.n	800d8aa <__swbuf_r+0x20>
 800d8a6:	6923      	ldr	r3, [r4, #16]
 800d8a8:	b943      	cbnz	r3, 800d8bc <__swbuf_r+0x32>
 800d8aa:	4621      	mov	r1, r4
 800d8ac:	4628      	mov	r0, r5
 800d8ae:	f000 f82b 	bl	800d908 <__swsetup_r>
 800d8b2:	b118      	cbz	r0, 800d8bc <__swbuf_r+0x32>
 800d8b4:	f04f 37ff 	mov.w	r7, #4294967295
 800d8b8:	4638      	mov	r0, r7
 800d8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8bc:	6823      	ldr	r3, [r4, #0]
 800d8be:	6922      	ldr	r2, [r4, #16]
 800d8c0:	1a98      	subs	r0, r3, r2
 800d8c2:	6963      	ldr	r3, [r4, #20]
 800d8c4:	b2f6      	uxtb	r6, r6
 800d8c6:	4283      	cmp	r3, r0
 800d8c8:	4637      	mov	r7, r6
 800d8ca:	dc05      	bgt.n	800d8d8 <__swbuf_r+0x4e>
 800d8cc:	4621      	mov	r1, r4
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	f000 fd9c 	bl	800e40c <_fflush_r>
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	d1ed      	bne.n	800d8b4 <__swbuf_r+0x2a>
 800d8d8:	68a3      	ldr	r3, [r4, #8]
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	60a3      	str	r3, [r4, #8]
 800d8de:	6823      	ldr	r3, [r4, #0]
 800d8e0:	1c5a      	adds	r2, r3, #1
 800d8e2:	6022      	str	r2, [r4, #0]
 800d8e4:	701e      	strb	r6, [r3, #0]
 800d8e6:	6962      	ldr	r2, [r4, #20]
 800d8e8:	1c43      	adds	r3, r0, #1
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d004      	beq.n	800d8f8 <__swbuf_r+0x6e>
 800d8ee:	89a3      	ldrh	r3, [r4, #12]
 800d8f0:	07db      	lsls	r3, r3, #31
 800d8f2:	d5e1      	bpl.n	800d8b8 <__swbuf_r+0x2e>
 800d8f4:	2e0a      	cmp	r6, #10
 800d8f6:	d1df      	bne.n	800d8b8 <__swbuf_r+0x2e>
 800d8f8:	4621      	mov	r1, r4
 800d8fa:	4628      	mov	r0, r5
 800d8fc:	f000 fd86 	bl	800e40c <_fflush_r>
 800d900:	2800      	cmp	r0, #0
 800d902:	d0d9      	beq.n	800d8b8 <__swbuf_r+0x2e>
 800d904:	e7d6      	b.n	800d8b4 <__swbuf_r+0x2a>
	...

0800d908 <__swsetup_r>:
 800d908:	b538      	push	{r3, r4, r5, lr}
 800d90a:	4b29      	ldr	r3, [pc, #164]	@ (800d9b0 <__swsetup_r+0xa8>)
 800d90c:	4605      	mov	r5, r0
 800d90e:	6818      	ldr	r0, [r3, #0]
 800d910:	460c      	mov	r4, r1
 800d912:	b118      	cbz	r0, 800d91c <__swsetup_r+0x14>
 800d914:	6a03      	ldr	r3, [r0, #32]
 800d916:	b90b      	cbnz	r3, 800d91c <__swsetup_r+0x14>
 800d918:	f7ff fece 	bl	800d6b8 <__sinit>
 800d91c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d920:	0719      	lsls	r1, r3, #28
 800d922:	d422      	bmi.n	800d96a <__swsetup_r+0x62>
 800d924:	06da      	lsls	r2, r3, #27
 800d926:	d407      	bmi.n	800d938 <__swsetup_r+0x30>
 800d928:	2209      	movs	r2, #9
 800d92a:	602a      	str	r2, [r5, #0]
 800d92c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d930:	81a3      	strh	r3, [r4, #12]
 800d932:	f04f 30ff 	mov.w	r0, #4294967295
 800d936:	e033      	b.n	800d9a0 <__swsetup_r+0x98>
 800d938:	0758      	lsls	r0, r3, #29
 800d93a:	d512      	bpl.n	800d962 <__swsetup_r+0x5a>
 800d93c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d93e:	b141      	cbz	r1, 800d952 <__swsetup_r+0x4a>
 800d940:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d944:	4299      	cmp	r1, r3
 800d946:	d002      	beq.n	800d94e <__swsetup_r+0x46>
 800d948:	4628      	mov	r0, r5
 800d94a:	f000 f913 	bl	800db74 <_free_r>
 800d94e:	2300      	movs	r3, #0
 800d950:	6363      	str	r3, [r4, #52]	@ 0x34
 800d952:	89a3      	ldrh	r3, [r4, #12]
 800d954:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d958:	81a3      	strh	r3, [r4, #12]
 800d95a:	2300      	movs	r3, #0
 800d95c:	6063      	str	r3, [r4, #4]
 800d95e:	6923      	ldr	r3, [r4, #16]
 800d960:	6023      	str	r3, [r4, #0]
 800d962:	89a3      	ldrh	r3, [r4, #12]
 800d964:	f043 0308 	orr.w	r3, r3, #8
 800d968:	81a3      	strh	r3, [r4, #12]
 800d96a:	6923      	ldr	r3, [r4, #16]
 800d96c:	b94b      	cbnz	r3, 800d982 <__swsetup_r+0x7a>
 800d96e:	89a3      	ldrh	r3, [r4, #12]
 800d970:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d978:	d003      	beq.n	800d982 <__swsetup_r+0x7a>
 800d97a:	4621      	mov	r1, r4
 800d97c:	4628      	mov	r0, r5
 800d97e:	f000 fd93 	bl	800e4a8 <__smakebuf_r>
 800d982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d986:	f013 0201 	ands.w	r2, r3, #1
 800d98a:	d00a      	beq.n	800d9a2 <__swsetup_r+0x9a>
 800d98c:	2200      	movs	r2, #0
 800d98e:	60a2      	str	r2, [r4, #8]
 800d990:	6962      	ldr	r2, [r4, #20]
 800d992:	4252      	negs	r2, r2
 800d994:	61a2      	str	r2, [r4, #24]
 800d996:	6922      	ldr	r2, [r4, #16]
 800d998:	b942      	cbnz	r2, 800d9ac <__swsetup_r+0xa4>
 800d99a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d99e:	d1c5      	bne.n	800d92c <__swsetup_r+0x24>
 800d9a0:	bd38      	pop	{r3, r4, r5, pc}
 800d9a2:	0799      	lsls	r1, r3, #30
 800d9a4:	bf58      	it	pl
 800d9a6:	6962      	ldrpl	r2, [r4, #20]
 800d9a8:	60a2      	str	r2, [r4, #8]
 800d9aa:	e7f4      	b.n	800d996 <__swsetup_r+0x8e>
 800d9ac:	2000      	movs	r0, #0
 800d9ae:	e7f7      	b.n	800d9a0 <__swsetup_r+0x98>
 800d9b0:	20000118 	.word	0x20000118

0800d9b4 <memset>:
 800d9b4:	4402      	add	r2, r0
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	d100      	bne.n	800d9be <memset+0xa>
 800d9bc:	4770      	bx	lr
 800d9be:	f803 1b01 	strb.w	r1, [r3], #1
 800d9c2:	e7f9      	b.n	800d9b8 <memset+0x4>

0800d9c4 <_close_r>:
 800d9c4:	b538      	push	{r3, r4, r5, lr}
 800d9c6:	4d06      	ldr	r5, [pc, #24]	@ (800d9e0 <_close_r+0x1c>)
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	4604      	mov	r4, r0
 800d9cc:	4608      	mov	r0, r1
 800d9ce:	602b      	str	r3, [r5, #0]
 800d9d0:	f7f3 fc31 	bl	8001236 <_close>
 800d9d4:	1c43      	adds	r3, r0, #1
 800d9d6:	d102      	bne.n	800d9de <_close_r+0x1a>
 800d9d8:	682b      	ldr	r3, [r5, #0]
 800d9da:	b103      	cbz	r3, 800d9de <_close_r+0x1a>
 800d9dc:	6023      	str	r3, [r4, #0]
 800d9de:	bd38      	pop	{r3, r4, r5, pc}
 800d9e0:	20006bb0 	.word	0x20006bb0

0800d9e4 <_reclaim_reent>:
 800d9e4:	4b29      	ldr	r3, [pc, #164]	@ (800da8c <_reclaim_reent+0xa8>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4283      	cmp	r3, r0
 800d9ea:	b570      	push	{r4, r5, r6, lr}
 800d9ec:	4604      	mov	r4, r0
 800d9ee:	d04b      	beq.n	800da88 <_reclaim_reent+0xa4>
 800d9f0:	69c3      	ldr	r3, [r0, #28]
 800d9f2:	b1ab      	cbz	r3, 800da20 <_reclaim_reent+0x3c>
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	b16b      	cbz	r3, 800da14 <_reclaim_reent+0x30>
 800d9f8:	2500      	movs	r5, #0
 800d9fa:	69e3      	ldr	r3, [r4, #28]
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	5959      	ldr	r1, [r3, r5]
 800da00:	2900      	cmp	r1, #0
 800da02:	d13b      	bne.n	800da7c <_reclaim_reent+0x98>
 800da04:	3504      	adds	r5, #4
 800da06:	2d80      	cmp	r5, #128	@ 0x80
 800da08:	d1f7      	bne.n	800d9fa <_reclaim_reent+0x16>
 800da0a:	69e3      	ldr	r3, [r4, #28]
 800da0c:	4620      	mov	r0, r4
 800da0e:	68d9      	ldr	r1, [r3, #12]
 800da10:	f000 f8b0 	bl	800db74 <_free_r>
 800da14:	69e3      	ldr	r3, [r4, #28]
 800da16:	6819      	ldr	r1, [r3, #0]
 800da18:	b111      	cbz	r1, 800da20 <_reclaim_reent+0x3c>
 800da1a:	4620      	mov	r0, r4
 800da1c:	f000 f8aa 	bl	800db74 <_free_r>
 800da20:	6961      	ldr	r1, [r4, #20]
 800da22:	b111      	cbz	r1, 800da2a <_reclaim_reent+0x46>
 800da24:	4620      	mov	r0, r4
 800da26:	f000 f8a5 	bl	800db74 <_free_r>
 800da2a:	69e1      	ldr	r1, [r4, #28]
 800da2c:	b111      	cbz	r1, 800da34 <_reclaim_reent+0x50>
 800da2e:	4620      	mov	r0, r4
 800da30:	f000 f8a0 	bl	800db74 <_free_r>
 800da34:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800da36:	b111      	cbz	r1, 800da3e <_reclaim_reent+0x5a>
 800da38:	4620      	mov	r0, r4
 800da3a:	f000 f89b 	bl	800db74 <_free_r>
 800da3e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da40:	b111      	cbz	r1, 800da48 <_reclaim_reent+0x64>
 800da42:	4620      	mov	r0, r4
 800da44:	f000 f896 	bl	800db74 <_free_r>
 800da48:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800da4a:	b111      	cbz	r1, 800da52 <_reclaim_reent+0x6e>
 800da4c:	4620      	mov	r0, r4
 800da4e:	f000 f891 	bl	800db74 <_free_r>
 800da52:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800da54:	b111      	cbz	r1, 800da5c <_reclaim_reent+0x78>
 800da56:	4620      	mov	r0, r4
 800da58:	f000 f88c 	bl	800db74 <_free_r>
 800da5c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800da5e:	b111      	cbz	r1, 800da66 <_reclaim_reent+0x82>
 800da60:	4620      	mov	r0, r4
 800da62:	f000 f887 	bl	800db74 <_free_r>
 800da66:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800da68:	b111      	cbz	r1, 800da70 <_reclaim_reent+0x8c>
 800da6a:	4620      	mov	r0, r4
 800da6c:	f000 f882 	bl	800db74 <_free_r>
 800da70:	6a23      	ldr	r3, [r4, #32]
 800da72:	b14b      	cbz	r3, 800da88 <_reclaim_reent+0xa4>
 800da74:	4620      	mov	r0, r4
 800da76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800da7a:	4718      	bx	r3
 800da7c:	680e      	ldr	r6, [r1, #0]
 800da7e:	4620      	mov	r0, r4
 800da80:	f000 f878 	bl	800db74 <_free_r>
 800da84:	4631      	mov	r1, r6
 800da86:	e7bb      	b.n	800da00 <_reclaim_reent+0x1c>
 800da88:	bd70      	pop	{r4, r5, r6, pc}
 800da8a:	bf00      	nop
 800da8c:	20000118 	.word	0x20000118

0800da90 <_lseek_r>:
 800da90:	b538      	push	{r3, r4, r5, lr}
 800da92:	4d07      	ldr	r5, [pc, #28]	@ (800dab0 <_lseek_r+0x20>)
 800da94:	4604      	mov	r4, r0
 800da96:	4608      	mov	r0, r1
 800da98:	4611      	mov	r1, r2
 800da9a:	2200      	movs	r2, #0
 800da9c:	602a      	str	r2, [r5, #0]
 800da9e:	461a      	mov	r2, r3
 800daa0:	f7f3 fbf0 	bl	8001284 <_lseek>
 800daa4:	1c43      	adds	r3, r0, #1
 800daa6:	d102      	bne.n	800daae <_lseek_r+0x1e>
 800daa8:	682b      	ldr	r3, [r5, #0]
 800daaa:	b103      	cbz	r3, 800daae <_lseek_r+0x1e>
 800daac:	6023      	str	r3, [r4, #0]
 800daae:	bd38      	pop	{r3, r4, r5, pc}
 800dab0:	20006bb0 	.word	0x20006bb0

0800dab4 <_read_r>:
 800dab4:	b538      	push	{r3, r4, r5, lr}
 800dab6:	4d07      	ldr	r5, [pc, #28]	@ (800dad4 <_read_r+0x20>)
 800dab8:	4604      	mov	r4, r0
 800daba:	4608      	mov	r0, r1
 800dabc:	4611      	mov	r1, r2
 800dabe:	2200      	movs	r2, #0
 800dac0:	602a      	str	r2, [r5, #0]
 800dac2:	461a      	mov	r2, r3
 800dac4:	f7f3 fb7e 	bl	80011c4 <_read>
 800dac8:	1c43      	adds	r3, r0, #1
 800daca:	d102      	bne.n	800dad2 <_read_r+0x1e>
 800dacc:	682b      	ldr	r3, [r5, #0]
 800dace:	b103      	cbz	r3, 800dad2 <_read_r+0x1e>
 800dad0:	6023      	str	r3, [r4, #0]
 800dad2:	bd38      	pop	{r3, r4, r5, pc}
 800dad4:	20006bb0 	.word	0x20006bb0

0800dad8 <_write_r>:
 800dad8:	b538      	push	{r3, r4, r5, lr}
 800dada:	4d07      	ldr	r5, [pc, #28]	@ (800daf8 <_write_r+0x20>)
 800dadc:	4604      	mov	r4, r0
 800dade:	4608      	mov	r0, r1
 800dae0:	4611      	mov	r1, r2
 800dae2:	2200      	movs	r2, #0
 800dae4:	602a      	str	r2, [r5, #0]
 800dae6:	461a      	mov	r2, r3
 800dae8:	f7f3 fb89 	bl	80011fe <_write>
 800daec:	1c43      	adds	r3, r0, #1
 800daee:	d102      	bne.n	800daf6 <_write_r+0x1e>
 800daf0:	682b      	ldr	r3, [r5, #0]
 800daf2:	b103      	cbz	r3, 800daf6 <_write_r+0x1e>
 800daf4:	6023      	str	r3, [r4, #0]
 800daf6:	bd38      	pop	{r3, r4, r5, pc}
 800daf8:	20006bb0 	.word	0x20006bb0

0800dafc <__errno>:
 800dafc:	4b01      	ldr	r3, [pc, #4]	@ (800db04 <__errno+0x8>)
 800dafe:	6818      	ldr	r0, [r3, #0]
 800db00:	4770      	bx	lr
 800db02:	bf00      	nop
 800db04:	20000118 	.word	0x20000118

0800db08 <__libc_init_array>:
 800db08:	b570      	push	{r4, r5, r6, lr}
 800db0a:	4d0d      	ldr	r5, [pc, #52]	@ (800db40 <__libc_init_array+0x38>)
 800db0c:	4c0d      	ldr	r4, [pc, #52]	@ (800db44 <__libc_init_array+0x3c>)
 800db0e:	1b64      	subs	r4, r4, r5
 800db10:	10a4      	asrs	r4, r4, #2
 800db12:	2600      	movs	r6, #0
 800db14:	42a6      	cmp	r6, r4
 800db16:	d109      	bne.n	800db2c <__libc_init_array+0x24>
 800db18:	4d0b      	ldr	r5, [pc, #44]	@ (800db48 <__libc_init_array+0x40>)
 800db1a:	4c0c      	ldr	r4, [pc, #48]	@ (800db4c <__libc_init_array+0x44>)
 800db1c:	f000 fd32 	bl	800e584 <_init>
 800db20:	1b64      	subs	r4, r4, r5
 800db22:	10a4      	asrs	r4, r4, #2
 800db24:	2600      	movs	r6, #0
 800db26:	42a6      	cmp	r6, r4
 800db28:	d105      	bne.n	800db36 <__libc_init_array+0x2e>
 800db2a:	bd70      	pop	{r4, r5, r6, pc}
 800db2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800db30:	4798      	blx	r3
 800db32:	3601      	adds	r6, #1
 800db34:	e7ee      	b.n	800db14 <__libc_init_array+0xc>
 800db36:	f855 3b04 	ldr.w	r3, [r5], #4
 800db3a:	4798      	blx	r3
 800db3c:	3601      	adds	r6, #1
 800db3e:	e7f2      	b.n	800db26 <__libc_init_array+0x1e>
 800db40:	0800e77c 	.word	0x0800e77c
 800db44:	0800e77c 	.word	0x0800e77c
 800db48:	0800e77c 	.word	0x0800e77c
 800db4c:	0800e780 	.word	0x0800e780

0800db50 <__retarget_lock_init_recursive>:
 800db50:	4770      	bx	lr

0800db52 <__retarget_lock_acquire_recursive>:
 800db52:	4770      	bx	lr

0800db54 <__retarget_lock_release_recursive>:
 800db54:	4770      	bx	lr

0800db56 <memcpy>:
 800db56:	440a      	add	r2, r1
 800db58:	4291      	cmp	r1, r2
 800db5a:	f100 33ff 	add.w	r3, r0, #4294967295
 800db5e:	d100      	bne.n	800db62 <memcpy+0xc>
 800db60:	4770      	bx	lr
 800db62:	b510      	push	{r4, lr}
 800db64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db6c:	4291      	cmp	r1, r2
 800db6e:	d1f9      	bne.n	800db64 <memcpy+0xe>
 800db70:	bd10      	pop	{r4, pc}
	...

0800db74 <_free_r>:
 800db74:	b538      	push	{r3, r4, r5, lr}
 800db76:	4605      	mov	r5, r0
 800db78:	2900      	cmp	r1, #0
 800db7a:	d041      	beq.n	800dc00 <_free_r+0x8c>
 800db7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db80:	1f0c      	subs	r4, r1, #4
 800db82:	2b00      	cmp	r3, #0
 800db84:	bfb8      	it	lt
 800db86:	18e4      	addlt	r4, r4, r3
 800db88:	f000 f8e0 	bl	800dd4c <__malloc_lock>
 800db8c:	4a1d      	ldr	r2, [pc, #116]	@ (800dc04 <_free_r+0x90>)
 800db8e:	6813      	ldr	r3, [r2, #0]
 800db90:	b933      	cbnz	r3, 800dba0 <_free_r+0x2c>
 800db92:	6063      	str	r3, [r4, #4]
 800db94:	6014      	str	r4, [r2, #0]
 800db96:	4628      	mov	r0, r5
 800db98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db9c:	f000 b8dc 	b.w	800dd58 <__malloc_unlock>
 800dba0:	42a3      	cmp	r3, r4
 800dba2:	d908      	bls.n	800dbb6 <_free_r+0x42>
 800dba4:	6820      	ldr	r0, [r4, #0]
 800dba6:	1821      	adds	r1, r4, r0
 800dba8:	428b      	cmp	r3, r1
 800dbaa:	bf01      	itttt	eq
 800dbac:	6819      	ldreq	r1, [r3, #0]
 800dbae:	685b      	ldreq	r3, [r3, #4]
 800dbb0:	1809      	addeq	r1, r1, r0
 800dbb2:	6021      	streq	r1, [r4, #0]
 800dbb4:	e7ed      	b.n	800db92 <_free_r+0x1e>
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	b10b      	cbz	r3, 800dbc0 <_free_r+0x4c>
 800dbbc:	42a3      	cmp	r3, r4
 800dbbe:	d9fa      	bls.n	800dbb6 <_free_r+0x42>
 800dbc0:	6811      	ldr	r1, [r2, #0]
 800dbc2:	1850      	adds	r0, r2, r1
 800dbc4:	42a0      	cmp	r0, r4
 800dbc6:	d10b      	bne.n	800dbe0 <_free_r+0x6c>
 800dbc8:	6820      	ldr	r0, [r4, #0]
 800dbca:	4401      	add	r1, r0
 800dbcc:	1850      	adds	r0, r2, r1
 800dbce:	4283      	cmp	r3, r0
 800dbd0:	6011      	str	r1, [r2, #0]
 800dbd2:	d1e0      	bne.n	800db96 <_free_r+0x22>
 800dbd4:	6818      	ldr	r0, [r3, #0]
 800dbd6:	685b      	ldr	r3, [r3, #4]
 800dbd8:	6053      	str	r3, [r2, #4]
 800dbda:	4408      	add	r0, r1
 800dbdc:	6010      	str	r0, [r2, #0]
 800dbde:	e7da      	b.n	800db96 <_free_r+0x22>
 800dbe0:	d902      	bls.n	800dbe8 <_free_r+0x74>
 800dbe2:	230c      	movs	r3, #12
 800dbe4:	602b      	str	r3, [r5, #0]
 800dbe6:	e7d6      	b.n	800db96 <_free_r+0x22>
 800dbe8:	6820      	ldr	r0, [r4, #0]
 800dbea:	1821      	adds	r1, r4, r0
 800dbec:	428b      	cmp	r3, r1
 800dbee:	bf04      	itt	eq
 800dbf0:	6819      	ldreq	r1, [r3, #0]
 800dbf2:	685b      	ldreq	r3, [r3, #4]
 800dbf4:	6063      	str	r3, [r4, #4]
 800dbf6:	bf04      	itt	eq
 800dbf8:	1809      	addeq	r1, r1, r0
 800dbfa:	6021      	streq	r1, [r4, #0]
 800dbfc:	6054      	str	r4, [r2, #4]
 800dbfe:	e7ca      	b.n	800db96 <_free_r+0x22>
 800dc00:	bd38      	pop	{r3, r4, r5, pc}
 800dc02:	bf00      	nop
 800dc04:	20006bbc 	.word	0x20006bbc

0800dc08 <sbrk_aligned>:
 800dc08:	b570      	push	{r4, r5, r6, lr}
 800dc0a:	4e0f      	ldr	r6, [pc, #60]	@ (800dc48 <sbrk_aligned+0x40>)
 800dc0c:	460c      	mov	r4, r1
 800dc0e:	6831      	ldr	r1, [r6, #0]
 800dc10:	4605      	mov	r5, r0
 800dc12:	b911      	cbnz	r1, 800dc1a <sbrk_aligned+0x12>
 800dc14:	f000 fca6 	bl	800e564 <_sbrk_r>
 800dc18:	6030      	str	r0, [r6, #0]
 800dc1a:	4621      	mov	r1, r4
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	f000 fca1 	bl	800e564 <_sbrk_r>
 800dc22:	1c43      	adds	r3, r0, #1
 800dc24:	d103      	bne.n	800dc2e <sbrk_aligned+0x26>
 800dc26:	f04f 34ff 	mov.w	r4, #4294967295
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	bd70      	pop	{r4, r5, r6, pc}
 800dc2e:	1cc4      	adds	r4, r0, #3
 800dc30:	f024 0403 	bic.w	r4, r4, #3
 800dc34:	42a0      	cmp	r0, r4
 800dc36:	d0f8      	beq.n	800dc2a <sbrk_aligned+0x22>
 800dc38:	1a21      	subs	r1, r4, r0
 800dc3a:	4628      	mov	r0, r5
 800dc3c:	f000 fc92 	bl	800e564 <_sbrk_r>
 800dc40:	3001      	adds	r0, #1
 800dc42:	d1f2      	bne.n	800dc2a <sbrk_aligned+0x22>
 800dc44:	e7ef      	b.n	800dc26 <sbrk_aligned+0x1e>
 800dc46:	bf00      	nop
 800dc48:	20006bb8 	.word	0x20006bb8

0800dc4c <_malloc_r>:
 800dc4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc50:	1ccd      	adds	r5, r1, #3
 800dc52:	f025 0503 	bic.w	r5, r5, #3
 800dc56:	3508      	adds	r5, #8
 800dc58:	2d0c      	cmp	r5, #12
 800dc5a:	bf38      	it	cc
 800dc5c:	250c      	movcc	r5, #12
 800dc5e:	2d00      	cmp	r5, #0
 800dc60:	4606      	mov	r6, r0
 800dc62:	db01      	blt.n	800dc68 <_malloc_r+0x1c>
 800dc64:	42a9      	cmp	r1, r5
 800dc66:	d904      	bls.n	800dc72 <_malloc_r+0x26>
 800dc68:	230c      	movs	r3, #12
 800dc6a:	6033      	str	r3, [r6, #0]
 800dc6c:	2000      	movs	r0, #0
 800dc6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dd48 <_malloc_r+0xfc>
 800dc76:	f000 f869 	bl	800dd4c <__malloc_lock>
 800dc7a:	f8d8 3000 	ldr.w	r3, [r8]
 800dc7e:	461c      	mov	r4, r3
 800dc80:	bb44      	cbnz	r4, 800dcd4 <_malloc_r+0x88>
 800dc82:	4629      	mov	r1, r5
 800dc84:	4630      	mov	r0, r6
 800dc86:	f7ff ffbf 	bl	800dc08 <sbrk_aligned>
 800dc8a:	1c43      	adds	r3, r0, #1
 800dc8c:	4604      	mov	r4, r0
 800dc8e:	d158      	bne.n	800dd42 <_malloc_r+0xf6>
 800dc90:	f8d8 4000 	ldr.w	r4, [r8]
 800dc94:	4627      	mov	r7, r4
 800dc96:	2f00      	cmp	r7, #0
 800dc98:	d143      	bne.n	800dd22 <_malloc_r+0xd6>
 800dc9a:	2c00      	cmp	r4, #0
 800dc9c:	d04b      	beq.n	800dd36 <_malloc_r+0xea>
 800dc9e:	6823      	ldr	r3, [r4, #0]
 800dca0:	4639      	mov	r1, r7
 800dca2:	4630      	mov	r0, r6
 800dca4:	eb04 0903 	add.w	r9, r4, r3
 800dca8:	f000 fc5c 	bl	800e564 <_sbrk_r>
 800dcac:	4581      	cmp	r9, r0
 800dcae:	d142      	bne.n	800dd36 <_malloc_r+0xea>
 800dcb0:	6821      	ldr	r1, [r4, #0]
 800dcb2:	1a6d      	subs	r5, r5, r1
 800dcb4:	4629      	mov	r1, r5
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	f7ff ffa6 	bl	800dc08 <sbrk_aligned>
 800dcbc:	3001      	adds	r0, #1
 800dcbe:	d03a      	beq.n	800dd36 <_malloc_r+0xea>
 800dcc0:	6823      	ldr	r3, [r4, #0]
 800dcc2:	442b      	add	r3, r5
 800dcc4:	6023      	str	r3, [r4, #0]
 800dcc6:	f8d8 3000 	ldr.w	r3, [r8]
 800dcca:	685a      	ldr	r2, [r3, #4]
 800dccc:	bb62      	cbnz	r2, 800dd28 <_malloc_r+0xdc>
 800dcce:	f8c8 7000 	str.w	r7, [r8]
 800dcd2:	e00f      	b.n	800dcf4 <_malloc_r+0xa8>
 800dcd4:	6822      	ldr	r2, [r4, #0]
 800dcd6:	1b52      	subs	r2, r2, r5
 800dcd8:	d420      	bmi.n	800dd1c <_malloc_r+0xd0>
 800dcda:	2a0b      	cmp	r2, #11
 800dcdc:	d917      	bls.n	800dd0e <_malloc_r+0xc2>
 800dcde:	1961      	adds	r1, r4, r5
 800dce0:	42a3      	cmp	r3, r4
 800dce2:	6025      	str	r5, [r4, #0]
 800dce4:	bf18      	it	ne
 800dce6:	6059      	strne	r1, [r3, #4]
 800dce8:	6863      	ldr	r3, [r4, #4]
 800dcea:	bf08      	it	eq
 800dcec:	f8c8 1000 	streq.w	r1, [r8]
 800dcf0:	5162      	str	r2, [r4, r5]
 800dcf2:	604b      	str	r3, [r1, #4]
 800dcf4:	4630      	mov	r0, r6
 800dcf6:	f000 f82f 	bl	800dd58 <__malloc_unlock>
 800dcfa:	f104 000b 	add.w	r0, r4, #11
 800dcfe:	1d23      	adds	r3, r4, #4
 800dd00:	f020 0007 	bic.w	r0, r0, #7
 800dd04:	1ac2      	subs	r2, r0, r3
 800dd06:	bf1c      	itt	ne
 800dd08:	1a1b      	subne	r3, r3, r0
 800dd0a:	50a3      	strne	r3, [r4, r2]
 800dd0c:	e7af      	b.n	800dc6e <_malloc_r+0x22>
 800dd0e:	6862      	ldr	r2, [r4, #4]
 800dd10:	42a3      	cmp	r3, r4
 800dd12:	bf0c      	ite	eq
 800dd14:	f8c8 2000 	streq.w	r2, [r8]
 800dd18:	605a      	strne	r2, [r3, #4]
 800dd1a:	e7eb      	b.n	800dcf4 <_malloc_r+0xa8>
 800dd1c:	4623      	mov	r3, r4
 800dd1e:	6864      	ldr	r4, [r4, #4]
 800dd20:	e7ae      	b.n	800dc80 <_malloc_r+0x34>
 800dd22:	463c      	mov	r4, r7
 800dd24:	687f      	ldr	r7, [r7, #4]
 800dd26:	e7b6      	b.n	800dc96 <_malloc_r+0x4a>
 800dd28:	461a      	mov	r2, r3
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	42a3      	cmp	r3, r4
 800dd2e:	d1fb      	bne.n	800dd28 <_malloc_r+0xdc>
 800dd30:	2300      	movs	r3, #0
 800dd32:	6053      	str	r3, [r2, #4]
 800dd34:	e7de      	b.n	800dcf4 <_malloc_r+0xa8>
 800dd36:	230c      	movs	r3, #12
 800dd38:	6033      	str	r3, [r6, #0]
 800dd3a:	4630      	mov	r0, r6
 800dd3c:	f000 f80c 	bl	800dd58 <__malloc_unlock>
 800dd40:	e794      	b.n	800dc6c <_malloc_r+0x20>
 800dd42:	6005      	str	r5, [r0, #0]
 800dd44:	e7d6      	b.n	800dcf4 <_malloc_r+0xa8>
 800dd46:	bf00      	nop
 800dd48:	20006bbc 	.word	0x20006bbc

0800dd4c <__malloc_lock>:
 800dd4c:	4801      	ldr	r0, [pc, #4]	@ (800dd54 <__malloc_lock+0x8>)
 800dd4e:	f7ff bf00 	b.w	800db52 <__retarget_lock_acquire_recursive>
 800dd52:	bf00      	nop
 800dd54:	20006bb4 	.word	0x20006bb4

0800dd58 <__malloc_unlock>:
 800dd58:	4801      	ldr	r0, [pc, #4]	@ (800dd60 <__malloc_unlock+0x8>)
 800dd5a:	f7ff befb 	b.w	800db54 <__retarget_lock_release_recursive>
 800dd5e:	bf00      	nop
 800dd60:	20006bb4 	.word	0x20006bb4

0800dd64 <__sfputc_r>:
 800dd64:	6893      	ldr	r3, [r2, #8]
 800dd66:	3b01      	subs	r3, #1
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	b410      	push	{r4}
 800dd6c:	6093      	str	r3, [r2, #8]
 800dd6e:	da08      	bge.n	800dd82 <__sfputc_r+0x1e>
 800dd70:	6994      	ldr	r4, [r2, #24]
 800dd72:	42a3      	cmp	r3, r4
 800dd74:	db01      	blt.n	800dd7a <__sfputc_r+0x16>
 800dd76:	290a      	cmp	r1, #10
 800dd78:	d103      	bne.n	800dd82 <__sfputc_r+0x1e>
 800dd7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd7e:	f7ff bd84 	b.w	800d88a <__swbuf_r>
 800dd82:	6813      	ldr	r3, [r2, #0]
 800dd84:	1c58      	adds	r0, r3, #1
 800dd86:	6010      	str	r0, [r2, #0]
 800dd88:	7019      	strb	r1, [r3, #0]
 800dd8a:	4608      	mov	r0, r1
 800dd8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd90:	4770      	bx	lr

0800dd92 <__sfputs_r>:
 800dd92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd94:	4606      	mov	r6, r0
 800dd96:	460f      	mov	r7, r1
 800dd98:	4614      	mov	r4, r2
 800dd9a:	18d5      	adds	r5, r2, r3
 800dd9c:	42ac      	cmp	r4, r5
 800dd9e:	d101      	bne.n	800dda4 <__sfputs_r+0x12>
 800dda0:	2000      	movs	r0, #0
 800dda2:	e007      	b.n	800ddb4 <__sfputs_r+0x22>
 800dda4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dda8:	463a      	mov	r2, r7
 800ddaa:	4630      	mov	r0, r6
 800ddac:	f7ff ffda 	bl	800dd64 <__sfputc_r>
 800ddb0:	1c43      	adds	r3, r0, #1
 800ddb2:	d1f3      	bne.n	800dd9c <__sfputs_r+0xa>
 800ddb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ddb8 <_vfiprintf_r>:
 800ddb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddbc:	460d      	mov	r5, r1
 800ddbe:	b09d      	sub	sp, #116	@ 0x74
 800ddc0:	4614      	mov	r4, r2
 800ddc2:	4698      	mov	r8, r3
 800ddc4:	4606      	mov	r6, r0
 800ddc6:	b118      	cbz	r0, 800ddd0 <_vfiprintf_r+0x18>
 800ddc8:	6a03      	ldr	r3, [r0, #32]
 800ddca:	b90b      	cbnz	r3, 800ddd0 <_vfiprintf_r+0x18>
 800ddcc:	f7ff fc74 	bl	800d6b8 <__sinit>
 800ddd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ddd2:	07d9      	lsls	r1, r3, #31
 800ddd4:	d405      	bmi.n	800dde2 <_vfiprintf_r+0x2a>
 800ddd6:	89ab      	ldrh	r3, [r5, #12]
 800ddd8:	059a      	lsls	r2, r3, #22
 800ddda:	d402      	bmi.n	800dde2 <_vfiprintf_r+0x2a>
 800dddc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ddde:	f7ff feb8 	bl	800db52 <__retarget_lock_acquire_recursive>
 800dde2:	89ab      	ldrh	r3, [r5, #12]
 800dde4:	071b      	lsls	r3, r3, #28
 800dde6:	d501      	bpl.n	800ddec <_vfiprintf_r+0x34>
 800dde8:	692b      	ldr	r3, [r5, #16]
 800ddea:	b99b      	cbnz	r3, 800de14 <_vfiprintf_r+0x5c>
 800ddec:	4629      	mov	r1, r5
 800ddee:	4630      	mov	r0, r6
 800ddf0:	f7ff fd8a 	bl	800d908 <__swsetup_r>
 800ddf4:	b170      	cbz	r0, 800de14 <_vfiprintf_r+0x5c>
 800ddf6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ddf8:	07dc      	lsls	r4, r3, #31
 800ddfa:	d504      	bpl.n	800de06 <_vfiprintf_r+0x4e>
 800ddfc:	f04f 30ff 	mov.w	r0, #4294967295
 800de00:	b01d      	add	sp, #116	@ 0x74
 800de02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de06:	89ab      	ldrh	r3, [r5, #12]
 800de08:	0598      	lsls	r0, r3, #22
 800de0a:	d4f7      	bmi.n	800ddfc <_vfiprintf_r+0x44>
 800de0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de0e:	f7ff fea1 	bl	800db54 <__retarget_lock_release_recursive>
 800de12:	e7f3      	b.n	800ddfc <_vfiprintf_r+0x44>
 800de14:	2300      	movs	r3, #0
 800de16:	9309      	str	r3, [sp, #36]	@ 0x24
 800de18:	2320      	movs	r3, #32
 800de1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800de1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800de22:	2330      	movs	r3, #48	@ 0x30
 800de24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dfd4 <_vfiprintf_r+0x21c>
 800de28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de2c:	f04f 0901 	mov.w	r9, #1
 800de30:	4623      	mov	r3, r4
 800de32:	469a      	mov	sl, r3
 800de34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de38:	b10a      	cbz	r2, 800de3e <_vfiprintf_r+0x86>
 800de3a:	2a25      	cmp	r2, #37	@ 0x25
 800de3c:	d1f9      	bne.n	800de32 <_vfiprintf_r+0x7a>
 800de3e:	ebba 0b04 	subs.w	fp, sl, r4
 800de42:	d00b      	beq.n	800de5c <_vfiprintf_r+0xa4>
 800de44:	465b      	mov	r3, fp
 800de46:	4622      	mov	r2, r4
 800de48:	4629      	mov	r1, r5
 800de4a:	4630      	mov	r0, r6
 800de4c:	f7ff ffa1 	bl	800dd92 <__sfputs_r>
 800de50:	3001      	adds	r0, #1
 800de52:	f000 80a7 	beq.w	800dfa4 <_vfiprintf_r+0x1ec>
 800de56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de58:	445a      	add	r2, fp
 800de5a:	9209      	str	r2, [sp, #36]	@ 0x24
 800de5c:	f89a 3000 	ldrb.w	r3, [sl]
 800de60:	2b00      	cmp	r3, #0
 800de62:	f000 809f 	beq.w	800dfa4 <_vfiprintf_r+0x1ec>
 800de66:	2300      	movs	r3, #0
 800de68:	f04f 32ff 	mov.w	r2, #4294967295
 800de6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de70:	f10a 0a01 	add.w	sl, sl, #1
 800de74:	9304      	str	r3, [sp, #16]
 800de76:	9307      	str	r3, [sp, #28]
 800de78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800de7c:	931a      	str	r3, [sp, #104]	@ 0x68
 800de7e:	4654      	mov	r4, sl
 800de80:	2205      	movs	r2, #5
 800de82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de86:	4853      	ldr	r0, [pc, #332]	@ (800dfd4 <_vfiprintf_r+0x21c>)
 800de88:	f7f2 f9a2 	bl	80001d0 <memchr>
 800de8c:	9a04      	ldr	r2, [sp, #16]
 800de8e:	b9d8      	cbnz	r0, 800dec8 <_vfiprintf_r+0x110>
 800de90:	06d1      	lsls	r1, r2, #27
 800de92:	bf44      	itt	mi
 800de94:	2320      	movmi	r3, #32
 800de96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de9a:	0713      	lsls	r3, r2, #28
 800de9c:	bf44      	itt	mi
 800de9e:	232b      	movmi	r3, #43	@ 0x2b
 800dea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dea4:	f89a 3000 	ldrb.w	r3, [sl]
 800dea8:	2b2a      	cmp	r3, #42	@ 0x2a
 800deaa:	d015      	beq.n	800ded8 <_vfiprintf_r+0x120>
 800deac:	9a07      	ldr	r2, [sp, #28]
 800deae:	4654      	mov	r4, sl
 800deb0:	2000      	movs	r0, #0
 800deb2:	f04f 0c0a 	mov.w	ip, #10
 800deb6:	4621      	mov	r1, r4
 800deb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800debc:	3b30      	subs	r3, #48	@ 0x30
 800debe:	2b09      	cmp	r3, #9
 800dec0:	d94b      	bls.n	800df5a <_vfiprintf_r+0x1a2>
 800dec2:	b1b0      	cbz	r0, 800def2 <_vfiprintf_r+0x13a>
 800dec4:	9207      	str	r2, [sp, #28]
 800dec6:	e014      	b.n	800def2 <_vfiprintf_r+0x13a>
 800dec8:	eba0 0308 	sub.w	r3, r0, r8
 800decc:	fa09 f303 	lsl.w	r3, r9, r3
 800ded0:	4313      	orrs	r3, r2
 800ded2:	9304      	str	r3, [sp, #16]
 800ded4:	46a2      	mov	sl, r4
 800ded6:	e7d2      	b.n	800de7e <_vfiprintf_r+0xc6>
 800ded8:	9b03      	ldr	r3, [sp, #12]
 800deda:	1d19      	adds	r1, r3, #4
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	9103      	str	r1, [sp, #12]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	bfbb      	ittet	lt
 800dee4:	425b      	neglt	r3, r3
 800dee6:	f042 0202 	orrlt.w	r2, r2, #2
 800deea:	9307      	strge	r3, [sp, #28]
 800deec:	9307      	strlt	r3, [sp, #28]
 800deee:	bfb8      	it	lt
 800def0:	9204      	strlt	r2, [sp, #16]
 800def2:	7823      	ldrb	r3, [r4, #0]
 800def4:	2b2e      	cmp	r3, #46	@ 0x2e
 800def6:	d10a      	bne.n	800df0e <_vfiprintf_r+0x156>
 800def8:	7863      	ldrb	r3, [r4, #1]
 800defa:	2b2a      	cmp	r3, #42	@ 0x2a
 800defc:	d132      	bne.n	800df64 <_vfiprintf_r+0x1ac>
 800defe:	9b03      	ldr	r3, [sp, #12]
 800df00:	1d1a      	adds	r2, r3, #4
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	9203      	str	r2, [sp, #12]
 800df06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800df0a:	3402      	adds	r4, #2
 800df0c:	9305      	str	r3, [sp, #20]
 800df0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dfe4 <_vfiprintf_r+0x22c>
 800df12:	7821      	ldrb	r1, [r4, #0]
 800df14:	2203      	movs	r2, #3
 800df16:	4650      	mov	r0, sl
 800df18:	f7f2 f95a 	bl	80001d0 <memchr>
 800df1c:	b138      	cbz	r0, 800df2e <_vfiprintf_r+0x176>
 800df1e:	9b04      	ldr	r3, [sp, #16]
 800df20:	eba0 000a 	sub.w	r0, r0, sl
 800df24:	2240      	movs	r2, #64	@ 0x40
 800df26:	4082      	lsls	r2, r0
 800df28:	4313      	orrs	r3, r2
 800df2a:	3401      	adds	r4, #1
 800df2c:	9304      	str	r3, [sp, #16]
 800df2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df32:	4829      	ldr	r0, [pc, #164]	@ (800dfd8 <_vfiprintf_r+0x220>)
 800df34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800df38:	2206      	movs	r2, #6
 800df3a:	f7f2 f949 	bl	80001d0 <memchr>
 800df3e:	2800      	cmp	r0, #0
 800df40:	d03f      	beq.n	800dfc2 <_vfiprintf_r+0x20a>
 800df42:	4b26      	ldr	r3, [pc, #152]	@ (800dfdc <_vfiprintf_r+0x224>)
 800df44:	bb1b      	cbnz	r3, 800df8e <_vfiprintf_r+0x1d6>
 800df46:	9b03      	ldr	r3, [sp, #12]
 800df48:	3307      	adds	r3, #7
 800df4a:	f023 0307 	bic.w	r3, r3, #7
 800df4e:	3308      	adds	r3, #8
 800df50:	9303      	str	r3, [sp, #12]
 800df52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df54:	443b      	add	r3, r7
 800df56:	9309      	str	r3, [sp, #36]	@ 0x24
 800df58:	e76a      	b.n	800de30 <_vfiprintf_r+0x78>
 800df5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800df5e:	460c      	mov	r4, r1
 800df60:	2001      	movs	r0, #1
 800df62:	e7a8      	b.n	800deb6 <_vfiprintf_r+0xfe>
 800df64:	2300      	movs	r3, #0
 800df66:	3401      	adds	r4, #1
 800df68:	9305      	str	r3, [sp, #20]
 800df6a:	4619      	mov	r1, r3
 800df6c:	f04f 0c0a 	mov.w	ip, #10
 800df70:	4620      	mov	r0, r4
 800df72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df76:	3a30      	subs	r2, #48	@ 0x30
 800df78:	2a09      	cmp	r2, #9
 800df7a:	d903      	bls.n	800df84 <_vfiprintf_r+0x1cc>
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d0c6      	beq.n	800df0e <_vfiprintf_r+0x156>
 800df80:	9105      	str	r1, [sp, #20]
 800df82:	e7c4      	b.n	800df0e <_vfiprintf_r+0x156>
 800df84:	fb0c 2101 	mla	r1, ip, r1, r2
 800df88:	4604      	mov	r4, r0
 800df8a:	2301      	movs	r3, #1
 800df8c:	e7f0      	b.n	800df70 <_vfiprintf_r+0x1b8>
 800df8e:	ab03      	add	r3, sp, #12
 800df90:	9300      	str	r3, [sp, #0]
 800df92:	462a      	mov	r2, r5
 800df94:	4b12      	ldr	r3, [pc, #72]	@ (800dfe0 <_vfiprintf_r+0x228>)
 800df96:	a904      	add	r1, sp, #16
 800df98:	4630      	mov	r0, r6
 800df9a:	f3af 8000 	nop.w
 800df9e:	4607      	mov	r7, r0
 800dfa0:	1c78      	adds	r0, r7, #1
 800dfa2:	d1d6      	bne.n	800df52 <_vfiprintf_r+0x19a>
 800dfa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfa6:	07d9      	lsls	r1, r3, #31
 800dfa8:	d405      	bmi.n	800dfb6 <_vfiprintf_r+0x1fe>
 800dfaa:	89ab      	ldrh	r3, [r5, #12]
 800dfac:	059a      	lsls	r2, r3, #22
 800dfae:	d402      	bmi.n	800dfb6 <_vfiprintf_r+0x1fe>
 800dfb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfb2:	f7ff fdcf 	bl	800db54 <__retarget_lock_release_recursive>
 800dfb6:	89ab      	ldrh	r3, [r5, #12]
 800dfb8:	065b      	lsls	r3, r3, #25
 800dfba:	f53f af1f 	bmi.w	800ddfc <_vfiprintf_r+0x44>
 800dfbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dfc0:	e71e      	b.n	800de00 <_vfiprintf_r+0x48>
 800dfc2:	ab03      	add	r3, sp, #12
 800dfc4:	9300      	str	r3, [sp, #0]
 800dfc6:	462a      	mov	r2, r5
 800dfc8:	4b05      	ldr	r3, [pc, #20]	@ (800dfe0 <_vfiprintf_r+0x228>)
 800dfca:	a904      	add	r1, sp, #16
 800dfcc:	4630      	mov	r0, r6
 800dfce:	f000 f879 	bl	800e0c4 <_printf_i>
 800dfd2:	e7e4      	b.n	800df9e <_vfiprintf_r+0x1e6>
 800dfd4:	0800e740 	.word	0x0800e740
 800dfd8:	0800e74a 	.word	0x0800e74a
 800dfdc:	00000000 	.word	0x00000000
 800dfe0:	0800dd93 	.word	0x0800dd93
 800dfe4:	0800e746 	.word	0x0800e746

0800dfe8 <_printf_common>:
 800dfe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfec:	4616      	mov	r6, r2
 800dfee:	4698      	mov	r8, r3
 800dff0:	688a      	ldr	r2, [r1, #8]
 800dff2:	690b      	ldr	r3, [r1, #16]
 800dff4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dff8:	4293      	cmp	r3, r2
 800dffa:	bfb8      	it	lt
 800dffc:	4613      	movlt	r3, r2
 800dffe:	6033      	str	r3, [r6, #0]
 800e000:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e004:	4607      	mov	r7, r0
 800e006:	460c      	mov	r4, r1
 800e008:	b10a      	cbz	r2, 800e00e <_printf_common+0x26>
 800e00a:	3301      	adds	r3, #1
 800e00c:	6033      	str	r3, [r6, #0]
 800e00e:	6823      	ldr	r3, [r4, #0]
 800e010:	0699      	lsls	r1, r3, #26
 800e012:	bf42      	ittt	mi
 800e014:	6833      	ldrmi	r3, [r6, #0]
 800e016:	3302      	addmi	r3, #2
 800e018:	6033      	strmi	r3, [r6, #0]
 800e01a:	6825      	ldr	r5, [r4, #0]
 800e01c:	f015 0506 	ands.w	r5, r5, #6
 800e020:	d106      	bne.n	800e030 <_printf_common+0x48>
 800e022:	f104 0a19 	add.w	sl, r4, #25
 800e026:	68e3      	ldr	r3, [r4, #12]
 800e028:	6832      	ldr	r2, [r6, #0]
 800e02a:	1a9b      	subs	r3, r3, r2
 800e02c:	42ab      	cmp	r3, r5
 800e02e:	dc26      	bgt.n	800e07e <_printf_common+0x96>
 800e030:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e034:	6822      	ldr	r2, [r4, #0]
 800e036:	3b00      	subs	r3, #0
 800e038:	bf18      	it	ne
 800e03a:	2301      	movne	r3, #1
 800e03c:	0692      	lsls	r2, r2, #26
 800e03e:	d42b      	bmi.n	800e098 <_printf_common+0xb0>
 800e040:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e044:	4641      	mov	r1, r8
 800e046:	4638      	mov	r0, r7
 800e048:	47c8      	blx	r9
 800e04a:	3001      	adds	r0, #1
 800e04c:	d01e      	beq.n	800e08c <_printf_common+0xa4>
 800e04e:	6823      	ldr	r3, [r4, #0]
 800e050:	6922      	ldr	r2, [r4, #16]
 800e052:	f003 0306 	and.w	r3, r3, #6
 800e056:	2b04      	cmp	r3, #4
 800e058:	bf02      	ittt	eq
 800e05a:	68e5      	ldreq	r5, [r4, #12]
 800e05c:	6833      	ldreq	r3, [r6, #0]
 800e05e:	1aed      	subeq	r5, r5, r3
 800e060:	68a3      	ldr	r3, [r4, #8]
 800e062:	bf0c      	ite	eq
 800e064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e068:	2500      	movne	r5, #0
 800e06a:	4293      	cmp	r3, r2
 800e06c:	bfc4      	itt	gt
 800e06e:	1a9b      	subgt	r3, r3, r2
 800e070:	18ed      	addgt	r5, r5, r3
 800e072:	2600      	movs	r6, #0
 800e074:	341a      	adds	r4, #26
 800e076:	42b5      	cmp	r5, r6
 800e078:	d11a      	bne.n	800e0b0 <_printf_common+0xc8>
 800e07a:	2000      	movs	r0, #0
 800e07c:	e008      	b.n	800e090 <_printf_common+0xa8>
 800e07e:	2301      	movs	r3, #1
 800e080:	4652      	mov	r2, sl
 800e082:	4641      	mov	r1, r8
 800e084:	4638      	mov	r0, r7
 800e086:	47c8      	blx	r9
 800e088:	3001      	adds	r0, #1
 800e08a:	d103      	bne.n	800e094 <_printf_common+0xac>
 800e08c:	f04f 30ff 	mov.w	r0, #4294967295
 800e090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e094:	3501      	adds	r5, #1
 800e096:	e7c6      	b.n	800e026 <_printf_common+0x3e>
 800e098:	18e1      	adds	r1, r4, r3
 800e09a:	1c5a      	adds	r2, r3, #1
 800e09c:	2030      	movs	r0, #48	@ 0x30
 800e09e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e0a2:	4422      	add	r2, r4
 800e0a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e0a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e0ac:	3302      	adds	r3, #2
 800e0ae:	e7c7      	b.n	800e040 <_printf_common+0x58>
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	4622      	mov	r2, r4
 800e0b4:	4641      	mov	r1, r8
 800e0b6:	4638      	mov	r0, r7
 800e0b8:	47c8      	blx	r9
 800e0ba:	3001      	adds	r0, #1
 800e0bc:	d0e6      	beq.n	800e08c <_printf_common+0xa4>
 800e0be:	3601      	adds	r6, #1
 800e0c0:	e7d9      	b.n	800e076 <_printf_common+0x8e>
	...

0800e0c4 <_printf_i>:
 800e0c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0c8:	7e0f      	ldrb	r7, [r1, #24]
 800e0ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e0cc:	2f78      	cmp	r7, #120	@ 0x78
 800e0ce:	4691      	mov	r9, r2
 800e0d0:	4680      	mov	r8, r0
 800e0d2:	460c      	mov	r4, r1
 800e0d4:	469a      	mov	sl, r3
 800e0d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e0da:	d807      	bhi.n	800e0ec <_printf_i+0x28>
 800e0dc:	2f62      	cmp	r7, #98	@ 0x62
 800e0de:	d80a      	bhi.n	800e0f6 <_printf_i+0x32>
 800e0e0:	2f00      	cmp	r7, #0
 800e0e2:	f000 80d2 	beq.w	800e28a <_printf_i+0x1c6>
 800e0e6:	2f58      	cmp	r7, #88	@ 0x58
 800e0e8:	f000 80b9 	beq.w	800e25e <_printf_i+0x19a>
 800e0ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e0f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e0f4:	e03a      	b.n	800e16c <_printf_i+0xa8>
 800e0f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e0fa:	2b15      	cmp	r3, #21
 800e0fc:	d8f6      	bhi.n	800e0ec <_printf_i+0x28>
 800e0fe:	a101      	add	r1, pc, #4	@ (adr r1, 800e104 <_printf_i+0x40>)
 800e100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e104:	0800e15d 	.word	0x0800e15d
 800e108:	0800e171 	.word	0x0800e171
 800e10c:	0800e0ed 	.word	0x0800e0ed
 800e110:	0800e0ed 	.word	0x0800e0ed
 800e114:	0800e0ed 	.word	0x0800e0ed
 800e118:	0800e0ed 	.word	0x0800e0ed
 800e11c:	0800e171 	.word	0x0800e171
 800e120:	0800e0ed 	.word	0x0800e0ed
 800e124:	0800e0ed 	.word	0x0800e0ed
 800e128:	0800e0ed 	.word	0x0800e0ed
 800e12c:	0800e0ed 	.word	0x0800e0ed
 800e130:	0800e271 	.word	0x0800e271
 800e134:	0800e19b 	.word	0x0800e19b
 800e138:	0800e22b 	.word	0x0800e22b
 800e13c:	0800e0ed 	.word	0x0800e0ed
 800e140:	0800e0ed 	.word	0x0800e0ed
 800e144:	0800e293 	.word	0x0800e293
 800e148:	0800e0ed 	.word	0x0800e0ed
 800e14c:	0800e19b 	.word	0x0800e19b
 800e150:	0800e0ed 	.word	0x0800e0ed
 800e154:	0800e0ed 	.word	0x0800e0ed
 800e158:	0800e233 	.word	0x0800e233
 800e15c:	6833      	ldr	r3, [r6, #0]
 800e15e:	1d1a      	adds	r2, r3, #4
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	6032      	str	r2, [r6, #0]
 800e164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e168:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e16c:	2301      	movs	r3, #1
 800e16e:	e09d      	b.n	800e2ac <_printf_i+0x1e8>
 800e170:	6833      	ldr	r3, [r6, #0]
 800e172:	6820      	ldr	r0, [r4, #0]
 800e174:	1d19      	adds	r1, r3, #4
 800e176:	6031      	str	r1, [r6, #0]
 800e178:	0606      	lsls	r6, r0, #24
 800e17a:	d501      	bpl.n	800e180 <_printf_i+0xbc>
 800e17c:	681d      	ldr	r5, [r3, #0]
 800e17e:	e003      	b.n	800e188 <_printf_i+0xc4>
 800e180:	0645      	lsls	r5, r0, #25
 800e182:	d5fb      	bpl.n	800e17c <_printf_i+0xb8>
 800e184:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e188:	2d00      	cmp	r5, #0
 800e18a:	da03      	bge.n	800e194 <_printf_i+0xd0>
 800e18c:	232d      	movs	r3, #45	@ 0x2d
 800e18e:	426d      	negs	r5, r5
 800e190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e194:	4859      	ldr	r0, [pc, #356]	@ (800e2fc <_printf_i+0x238>)
 800e196:	230a      	movs	r3, #10
 800e198:	e011      	b.n	800e1be <_printf_i+0xfa>
 800e19a:	6821      	ldr	r1, [r4, #0]
 800e19c:	6833      	ldr	r3, [r6, #0]
 800e19e:	0608      	lsls	r0, r1, #24
 800e1a0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e1a4:	d402      	bmi.n	800e1ac <_printf_i+0xe8>
 800e1a6:	0649      	lsls	r1, r1, #25
 800e1a8:	bf48      	it	mi
 800e1aa:	b2ad      	uxthmi	r5, r5
 800e1ac:	2f6f      	cmp	r7, #111	@ 0x6f
 800e1ae:	4853      	ldr	r0, [pc, #332]	@ (800e2fc <_printf_i+0x238>)
 800e1b0:	6033      	str	r3, [r6, #0]
 800e1b2:	bf14      	ite	ne
 800e1b4:	230a      	movne	r3, #10
 800e1b6:	2308      	moveq	r3, #8
 800e1b8:	2100      	movs	r1, #0
 800e1ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e1be:	6866      	ldr	r6, [r4, #4]
 800e1c0:	60a6      	str	r6, [r4, #8]
 800e1c2:	2e00      	cmp	r6, #0
 800e1c4:	bfa2      	ittt	ge
 800e1c6:	6821      	ldrge	r1, [r4, #0]
 800e1c8:	f021 0104 	bicge.w	r1, r1, #4
 800e1cc:	6021      	strge	r1, [r4, #0]
 800e1ce:	b90d      	cbnz	r5, 800e1d4 <_printf_i+0x110>
 800e1d0:	2e00      	cmp	r6, #0
 800e1d2:	d04b      	beq.n	800e26c <_printf_i+0x1a8>
 800e1d4:	4616      	mov	r6, r2
 800e1d6:	fbb5 f1f3 	udiv	r1, r5, r3
 800e1da:	fb03 5711 	mls	r7, r3, r1, r5
 800e1de:	5dc7      	ldrb	r7, [r0, r7]
 800e1e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e1e4:	462f      	mov	r7, r5
 800e1e6:	42bb      	cmp	r3, r7
 800e1e8:	460d      	mov	r5, r1
 800e1ea:	d9f4      	bls.n	800e1d6 <_printf_i+0x112>
 800e1ec:	2b08      	cmp	r3, #8
 800e1ee:	d10b      	bne.n	800e208 <_printf_i+0x144>
 800e1f0:	6823      	ldr	r3, [r4, #0]
 800e1f2:	07df      	lsls	r7, r3, #31
 800e1f4:	d508      	bpl.n	800e208 <_printf_i+0x144>
 800e1f6:	6923      	ldr	r3, [r4, #16]
 800e1f8:	6861      	ldr	r1, [r4, #4]
 800e1fa:	4299      	cmp	r1, r3
 800e1fc:	bfde      	ittt	le
 800e1fe:	2330      	movle	r3, #48	@ 0x30
 800e200:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e204:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e208:	1b92      	subs	r2, r2, r6
 800e20a:	6122      	str	r2, [r4, #16]
 800e20c:	f8cd a000 	str.w	sl, [sp]
 800e210:	464b      	mov	r3, r9
 800e212:	aa03      	add	r2, sp, #12
 800e214:	4621      	mov	r1, r4
 800e216:	4640      	mov	r0, r8
 800e218:	f7ff fee6 	bl	800dfe8 <_printf_common>
 800e21c:	3001      	adds	r0, #1
 800e21e:	d14a      	bne.n	800e2b6 <_printf_i+0x1f2>
 800e220:	f04f 30ff 	mov.w	r0, #4294967295
 800e224:	b004      	add	sp, #16
 800e226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e22a:	6823      	ldr	r3, [r4, #0]
 800e22c:	f043 0320 	orr.w	r3, r3, #32
 800e230:	6023      	str	r3, [r4, #0]
 800e232:	4833      	ldr	r0, [pc, #204]	@ (800e300 <_printf_i+0x23c>)
 800e234:	2778      	movs	r7, #120	@ 0x78
 800e236:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e23a:	6823      	ldr	r3, [r4, #0]
 800e23c:	6831      	ldr	r1, [r6, #0]
 800e23e:	061f      	lsls	r7, r3, #24
 800e240:	f851 5b04 	ldr.w	r5, [r1], #4
 800e244:	d402      	bmi.n	800e24c <_printf_i+0x188>
 800e246:	065f      	lsls	r7, r3, #25
 800e248:	bf48      	it	mi
 800e24a:	b2ad      	uxthmi	r5, r5
 800e24c:	6031      	str	r1, [r6, #0]
 800e24e:	07d9      	lsls	r1, r3, #31
 800e250:	bf44      	itt	mi
 800e252:	f043 0320 	orrmi.w	r3, r3, #32
 800e256:	6023      	strmi	r3, [r4, #0]
 800e258:	b11d      	cbz	r5, 800e262 <_printf_i+0x19e>
 800e25a:	2310      	movs	r3, #16
 800e25c:	e7ac      	b.n	800e1b8 <_printf_i+0xf4>
 800e25e:	4827      	ldr	r0, [pc, #156]	@ (800e2fc <_printf_i+0x238>)
 800e260:	e7e9      	b.n	800e236 <_printf_i+0x172>
 800e262:	6823      	ldr	r3, [r4, #0]
 800e264:	f023 0320 	bic.w	r3, r3, #32
 800e268:	6023      	str	r3, [r4, #0]
 800e26a:	e7f6      	b.n	800e25a <_printf_i+0x196>
 800e26c:	4616      	mov	r6, r2
 800e26e:	e7bd      	b.n	800e1ec <_printf_i+0x128>
 800e270:	6833      	ldr	r3, [r6, #0]
 800e272:	6825      	ldr	r5, [r4, #0]
 800e274:	6961      	ldr	r1, [r4, #20]
 800e276:	1d18      	adds	r0, r3, #4
 800e278:	6030      	str	r0, [r6, #0]
 800e27a:	062e      	lsls	r6, r5, #24
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	d501      	bpl.n	800e284 <_printf_i+0x1c0>
 800e280:	6019      	str	r1, [r3, #0]
 800e282:	e002      	b.n	800e28a <_printf_i+0x1c6>
 800e284:	0668      	lsls	r0, r5, #25
 800e286:	d5fb      	bpl.n	800e280 <_printf_i+0x1bc>
 800e288:	8019      	strh	r1, [r3, #0]
 800e28a:	2300      	movs	r3, #0
 800e28c:	6123      	str	r3, [r4, #16]
 800e28e:	4616      	mov	r6, r2
 800e290:	e7bc      	b.n	800e20c <_printf_i+0x148>
 800e292:	6833      	ldr	r3, [r6, #0]
 800e294:	1d1a      	adds	r2, r3, #4
 800e296:	6032      	str	r2, [r6, #0]
 800e298:	681e      	ldr	r6, [r3, #0]
 800e29a:	6862      	ldr	r2, [r4, #4]
 800e29c:	2100      	movs	r1, #0
 800e29e:	4630      	mov	r0, r6
 800e2a0:	f7f1 ff96 	bl	80001d0 <memchr>
 800e2a4:	b108      	cbz	r0, 800e2aa <_printf_i+0x1e6>
 800e2a6:	1b80      	subs	r0, r0, r6
 800e2a8:	6060      	str	r0, [r4, #4]
 800e2aa:	6863      	ldr	r3, [r4, #4]
 800e2ac:	6123      	str	r3, [r4, #16]
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e2b4:	e7aa      	b.n	800e20c <_printf_i+0x148>
 800e2b6:	6923      	ldr	r3, [r4, #16]
 800e2b8:	4632      	mov	r2, r6
 800e2ba:	4649      	mov	r1, r9
 800e2bc:	4640      	mov	r0, r8
 800e2be:	47d0      	blx	sl
 800e2c0:	3001      	adds	r0, #1
 800e2c2:	d0ad      	beq.n	800e220 <_printf_i+0x15c>
 800e2c4:	6823      	ldr	r3, [r4, #0]
 800e2c6:	079b      	lsls	r3, r3, #30
 800e2c8:	d413      	bmi.n	800e2f2 <_printf_i+0x22e>
 800e2ca:	68e0      	ldr	r0, [r4, #12]
 800e2cc:	9b03      	ldr	r3, [sp, #12]
 800e2ce:	4298      	cmp	r0, r3
 800e2d0:	bfb8      	it	lt
 800e2d2:	4618      	movlt	r0, r3
 800e2d4:	e7a6      	b.n	800e224 <_printf_i+0x160>
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	4632      	mov	r2, r6
 800e2da:	4649      	mov	r1, r9
 800e2dc:	4640      	mov	r0, r8
 800e2de:	47d0      	blx	sl
 800e2e0:	3001      	adds	r0, #1
 800e2e2:	d09d      	beq.n	800e220 <_printf_i+0x15c>
 800e2e4:	3501      	adds	r5, #1
 800e2e6:	68e3      	ldr	r3, [r4, #12]
 800e2e8:	9903      	ldr	r1, [sp, #12]
 800e2ea:	1a5b      	subs	r3, r3, r1
 800e2ec:	42ab      	cmp	r3, r5
 800e2ee:	dcf2      	bgt.n	800e2d6 <_printf_i+0x212>
 800e2f0:	e7eb      	b.n	800e2ca <_printf_i+0x206>
 800e2f2:	2500      	movs	r5, #0
 800e2f4:	f104 0619 	add.w	r6, r4, #25
 800e2f8:	e7f5      	b.n	800e2e6 <_printf_i+0x222>
 800e2fa:	bf00      	nop
 800e2fc:	0800e751 	.word	0x0800e751
 800e300:	0800e762 	.word	0x0800e762

0800e304 <__sflush_r>:
 800e304:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e30c:	0716      	lsls	r6, r2, #28
 800e30e:	4605      	mov	r5, r0
 800e310:	460c      	mov	r4, r1
 800e312:	d454      	bmi.n	800e3be <__sflush_r+0xba>
 800e314:	684b      	ldr	r3, [r1, #4]
 800e316:	2b00      	cmp	r3, #0
 800e318:	dc02      	bgt.n	800e320 <__sflush_r+0x1c>
 800e31a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	dd48      	ble.n	800e3b2 <__sflush_r+0xae>
 800e320:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e322:	2e00      	cmp	r6, #0
 800e324:	d045      	beq.n	800e3b2 <__sflush_r+0xae>
 800e326:	2300      	movs	r3, #0
 800e328:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e32c:	682f      	ldr	r7, [r5, #0]
 800e32e:	6a21      	ldr	r1, [r4, #32]
 800e330:	602b      	str	r3, [r5, #0]
 800e332:	d030      	beq.n	800e396 <__sflush_r+0x92>
 800e334:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e336:	89a3      	ldrh	r3, [r4, #12]
 800e338:	0759      	lsls	r1, r3, #29
 800e33a:	d505      	bpl.n	800e348 <__sflush_r+0x44>
 800e33c:	6863      	ldr	r3, [r4, #4]
 800e33e:	1ad2      	subs	r2, r2, r3
 800e340:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e342:	b10b      	cbz	r3, 800e348 <__sflush_r+0x44>
 800e344:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e346:	1ad2      	subs	r2, r2, r3
 800e348:	2300      	movs	r3, #0
 800e34a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e34c:	6a21      	ldr	r1, [r4, #32]
 800e34e:	4628      	mov	r0, r5
 800e350:	47b0      	blx	r6
 800e352:	1c43      	adds	r3, r0, #1
 800e354:	89a3      	ldrh	r3, [r4, #12]
 800e356:	d106      	bne.n	800e366 <__sflush_r+0x62>
 800e358:	6829      	ldr	r1, [r5, #0]
 800e35a:	291d      	cmp	r1, #29
 800e35c:	d82b      	bhi.n	800e3b6 <__sflush_r+0xb2>
 800e35e:	4a2a      	ldr	r2, [pc, #168]	@ (800e408 <__sflush_r+0x104>)
 800e360:	410a      	asrs	r2, r1
 800e362:	07d6      	lsls	r6, r2, #31
 800e364:	d427      	bmi.n	800e3b6 <__sflush_r+0xb2>
 800e366:	2200      	movs	r2, #0
 800e368:	6062      	str	r2, [r4, #4]
 800e36a:	04d9      	lsls	r1, r3, #19
 800e36c:	6922      	ldr	r2, [r4, #16]
 800e36e:	6022      	str	r2, [r4, #0]
 800e370:	d504      	bpl.n	800e37c <__sflush_r+0x78>
 800e372:	1c42      	adds	r2, r0, #1
 800e374:	d101      	bne.n	800e37a <__sflush_r+0x76>
 800e376:	682b      	ldr	r3, [r5, #0]
 800e378:	b903      	cbnz	r3, 800e37c <__sflush_r+0x78>
 800e37a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e37c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e37e:	602f      	str	r7, [r5, #0]
 800e380:	b1b9      	cbz	r1, 800e3b2 <__sflush_r+0xae>
 800e382:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e386:	4299      	cmp	r1, r3
 800e388:	d002      	beq.n	800e390 <__sflush_r+0x8c>
 800e38a:	4628      	mov	r0, r5
 800e38c:	f7ff fbf2 	bl	800db74 <_free_r>
 800e390:	2300      	movs	r3, #0
 800e392:	6363      	str	r3, [r4, #52]	@ 0x34
 800e394:	e00d      	b.n	800e3b2 <__sflush_r+0xae>
 800e396:	2301      	movs	r3, #1
 800e398:	4628      	mov	r0, r5
 800e39a:	47b0      	blx	r6
 800e39c:	4602      	mov	r2, r0
 800e39e:	1c50      	adds	r0, r2, #1
 800e3a0:	d1c9      	bne.n	800e336 <__sflush_r+0x32>
 800e3a2:	682b      	ldr	r3, [r5, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d0c6      	beq.n	800e336 <__sflush_r+0x32>
 800e3a8:	2b1d      	cmp	r3, #29
 800e3aa:	d001      	beq.n	800e3b0 <__sflush_r+0xac>
 800e3ac:	2b16      	cmp	r3, #22
 800e3ae:	d11e      	bne.n	800e3ee <__sflush_r+0xea>
 800e3b0:	602f      	str	r7, [r5, #0]
 800e3b2:	2000      	movs	r0, #0
 800e3b4:	e022      	b.n	800e3fc <__sflush_r+0xf8>
 800e3b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3ba:	b21b      	sxth	r3, r3
 800e3bc:	e01b      	b.n	800e3f6 <__sflush_r+0xf2>
 800e3be:	690f      	ldr	r7, [r1, #16]
 800e3c0:	2f00      	cmp	r7, #0
 800e3c2:	d0f6      	beq.n	800e3b2 <__sflush_r+0xae>
 800e3c4:	0793      	lsls	r3, r2, #30
 800e3c6:	680e      	ldr	r6, [r1, #0]
 800e3c8:	bf08      	it	eq
 800e3ca:	694b      	ldreq	r3, [r1, #20]
 800e3cc:	600f      	str	r7, [r1, #0]
 800e3ce:	bf18      	it	ne
 800e3d0:	2300      	movne	r3, #0
 800e3d2:	eba6 0807 	sub.w	r8, r6, r7
 800e3d6:	608b      	str	r3, [r1, #8]
 800e3d8:	f1b8 0f00 	cmp.w	r8, #0
 800e3dc:	dde9      	ble.n	800e3b2 <__sflush_r+0xae>
 800e3de:	6a21      	ldr	r1, [r4, #32]
 800e3e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e3e2:	4643      	mov	r3, r8
 800e3e4:	463a      	mov	r2, r7
 800e3e6:	4628      	mov	r0, r5
 800e3e8:	47b0      	blx	r6
 800e3ea:	2800      	cmp	r0, #0
 800e3ec:	dc08      	bgt.n	800e400 <__sflush_r+0xfc>
 800e3ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3f6:	81a3      	strh	r3, [r4, #12]
 800e3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e400:	4407      	add	r7, r0
 800e402:	eba8 0800 	sub.w	r8, r8, r0
 800e406:	e7e7      	b.n	800e3d8 <__sflush_r+0xd4>
 800e408:	dfbffffe 	.word	0xdfbffffe

0800e40c <_fflush_r>:
 800e40c:	b538      	push	{r3, r4, r5, lr}
 800e40e:	690b      	ldr	r3, [r1, #16]
 800e410:	4605      	mov	r5, r0
 800e412:	460c      	mov	r4, r1
 800e414:	b913      	cbnz	r3, 800e41c <_fflush_r+0x10>
 800e416:	2500      	movs	r5, #0
 800e418:	4628      	mov	r0, r5
 800e41a:	bd38      	pop	{r3, r4, r5, pc}
 800e41c:	b118      	cbz	r0, 800e426 <_fflush_r+0x1a>
 800e41e:	6a03      	ldr	r3, [r0, #32]
 800e420:	b90b      	cbnz	r3, 800e426 <_fflush_r+0x1a>
 800e422:	f7ff f949 	bl	800d6b8 <__sinit>
 800e426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d0f3      	beq.n	800e416 <_fflush_r+0xa>
 800e42e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e430:	07d0      	lsls	r0, r2, #31
 800e432:	d404      	bmi.n	800e43e <_fflush_r+0x32>
 800e434:	0599      	lsls	r1, r3, #22
 800e436:	d402      	bmi.n	800e43e <_fflush_r+0x32>
 800e438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e43a:	f7ff fb8a 	bl	800db52 <__retarget_lock_acquire_recursive>
 800e43e:	4628      	mov	r0, r5
 800e440:	4621      	mov	r1, r4
 800e442:	f7ff ff5f 	bl	800e304 <__sflush_r>
 800e446:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e448:	07da      	lsls	r2, r3, #31
 800e44a:	4605      	mov	r5, r0
 800e44c:	d4e4      	bmi.n	800e418 <_fflush_r+0xc>
 800e44e:	89a3      	ldrh	r3, [r4, #12]
 800e450:	059b      	lsls	r3, r3, #22
 800e452:	d4e1      	bmi.n	800e418 <_fflush_r+0xc>
 800e454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e456:	f7ff fb7d 	bl	800db54 <__retarget_lock_release_recursive>
 800e45a:	e7dd      	b.n	800e418 <_fflush_r+0xc>

0800e45c <__swhatbuf_r>:
 800e45c:	b570      	push	{r4, r5, r6, lr}
 800e45e:	460c      	mov	r4, r1
 800e460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e464:	2900      	cmp	r1, #0
 800e466:	b096      	sub	sp, #88	@ 0x58
 800e468:	4615      	mov	r5, r2
 800e46a:	461e      	mov	r6, r3
 800e46c:	da0d      	bge.n	800e48a <__swhatbuf_r+0x2e>
 800e46e:	89a3      	ldrh	r3, [r4, #12]
 800e470:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e474:	f04f 0100 	mov.w	r1, #0
 800e478:	bf14      	ite	ne
 800e47a:	2340      	movne	r3, #64	@ 0x40
 800e47c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e480:	2000      	movs	r0, #0
 800e482:	6031      	str	r1, [r6, #0]
 800e484:	602b      	str	r3, [r5, #0]
 800e486:	b016      	add	sp, #88	@ 0x58
 800e488:	bd70      	pop	{r4, r5, r6, pc}
 800e48a:	466a      	mov	r2, sp
 800e48c:	f000 f848 	bl	800e520 <_fstat_r>
 800e490:	2800      	cmp	r0, #0
 800e492:	dbec      	blt.n	800e46e <__swhatbuf_r+0x12>
 800e494:	9901      	ldr	r1, [sp, #4]
 800e496:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e49a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e49e:	4259      	negs	r1, r3
 800e4a0:	4159      	adcs	r1, r3
 800e4a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e4a6:	e7eb      	b.n	800e480 <__swhatbuf_r+0x24>

0800e4a8 <__smakebuf_r>:
 800e4a8:	898b      	ldrh	r3, [r1, #12]
 800e4aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4ac:	079d      	lsls	r5, r3, #30
 800e4ae:	4606      	mov	r6, r0
 800e4b0:	460c      	mov	r4, r1
 800e4b2:	d507      	bpl.n	800e4c4 <__smakebuf_r+0x1c>
 800e4b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e4b8:	6023      	str	r3, [r4, #0]
 800e4ba:	6123      	str	r3, [r4, #16]
 800e4bc:	2301      	movs	r3, #1
 800e4be:	6163      	str	r3, [r4, #20]
 800e4c0:	b003      	add	sp, #12
 800e4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4c4:	ab01      	add	r3, sp, #4
 800e4c6:	466a      	mov	r2, sp
 800e4c8:	f7ff ffc8 	bl	800e45c <__swhatbuf_r>
 800e4cc:	9f00      	ldr	r7, [sp, #0]
 800e4ce:	4605      	mov	r5, r0
 800e4d0:	4639      	mov	r1, r7
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	f7ff fbba 	bl	800dc4c <_malloc_r>
 800e4d8:	b948      	cbnz	r0, 800e4ee <__smakebuf_r+0x46>
 800e4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4de:	059a      	lsls	r2, r3, #22
 800e4e0:	d4ee      	bmi.n	800e4c0 <__smakebuf_r+0x18>
 800e4e2:	f023 0303 	bic.w	r3, r3, #3
 800e4e6:	f043 0302 	orr.w	r3, r3, #2
 800e4ea:	81a3      	strh	r3, [r4, #12]
 800e4ec:	e7e2      	b.n	800e4b4 <__smakebuf_r+0xc>
 800e4ee:	89a3      	ldrh	r3, [r4, #12]
 800e4f0:	6020      	str	r0, [r4, #0]
 800e4f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4f6:	81a3      	strh	r3, [r4, #12]
 800e4f8:	9b01      	ldr	r3, [sp, #4]
 800e4fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e4fe:	b15b      	cbz	r3, 800e518 <__smakebuf_r+0x70>
 800e500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e504:	4630      	mov	r0, r6
 800e506:	f000 f81d 	bl	800e544 <_isatty_r>
 800e50a:	b128      	cbz	r0, 800e518 <__smakebuf_r+0x70>
 800e50c:	89a3      	ldrh	r3, [r4, #12]
 800e50e:	f023 0303 	bic.w	r3, r3, #3
 800e512:	f043 0301 	orr.w	r3, r3, #1
 800e516:	81a3      	strh	r3, [r4, #12]
 800e518:	89a3      	ldrh	r3, [r4, #12]
 800e51a:	431d      	orrs	r5, r3
 800e51c:	81a5      	strh	r5, [r4, #12]
 800e51e:	e7cf      	b.n	800e4c0 <__smakebuf_r+0x18>

0800e520 <_fstat_r>:
 800e520:	b538      	push	{r3, r4, r5, lr}
 800e522:	4d07      	ldr	r5, [pc, #28]	@ (800e540 <_fstat_r+0x20>)
 800e524:	2300      	movs	r3, #0
 800e526:	4604      	mov	r4, r0
 800e528:	4608      	mov	r0, r1
 800e52a:	4611      	mov	r1, r2
 800e52c:	602b      	str	r3, [r5, #0]
 800e52e:	f7f2 fe8e 	bl	800124e <_fstat>
 800e532:	1c43      	adds	r3, r0, #1
 800e534:	d102      	bne.n	800e53c <_fstat_r+0x1c>
 800e536:	682b      	ldr	r3, [r5, #0]
 800e538:	b103      	cbz	r3, 800e53c <_fstat_r+0x1c>
 800e53a:	6023      	str	r3, [r4, #0]
 800e53c:	bd38      	pop	{r3, r4, r5, pc}
 800e53e:	bf00      	nop
 800e540:	20006bb0 	.word	0x20006bb0

0800e544 <_isatty_r>:
 800e544:	b538      	push	{r3, r4, r5, lr}
 800e546:	4d06      	ldr	r5, [pc, #24]	@ (800e560 <_isatty_r+0x1c>)
 800e548:	2300      	movs	r3, #0
 800e54a:	4604      	mov	r4, r0
 800e54c:	4608      	mov	r0, r1
 800e54e:	602b      	str	r3, [r5, #0]
 800e550:	f7f2 fe8d 	bl	800126e <_isatty>
 800e554:	1c43      	adds	r3, r0, #1
 800e556:	d102      	bne.n	800e55e <_isatty_r+0x1a>
 800e558:	682b      	ldr	r3, [r5, #0]
 800e55a:	b103      	cbz	r3, 800e55e <_isatty_r+0x1a>
 800e55c:	6023      	str	r3, [r4, #0]
 800e55e:	bd38      	pop	{r3, r4, r5, pc}
 800e560:	20006bb0 	.word	0x20006bb0

0800e564 <_sbrk_r>:
 800e564:	b538      	push	{r3, r4, r5, lr}
 800e566:	4d06      	ldr	r5, [pc, #24]	@ (800e580 <_sbrk_r+0x1c>)
 800e568:	2300      	movs	r3, #0
 800e56a:	4604      	mov	r4, r0
 800e56c:	4608      	mov	r0, r1
 800e56e:	602b      	str	r3, [r5, #0]
 800e570:	f7f2 fe96 	bl	80012a0 <_sbrk>
 800e574:	1c43      	adds	r3, r0, #1
 800e576:	d102      	bne.n	800e57e <_sbrk_r+0x1a>
 800e578:	682b      	ldr	r3, [r5, #0]
 800e57a:	b103      	cbz	r3, 800e57e <_sbrk_r+0x1a>
 800e57c:	6023      	str	r3, [r4, #0]
 800e57e:	bd38      	pop	{r3, r4, r5, pc}
 800e580:	20006bb0 	.word	0x20006bb0

0800e584 <_init>:
 800e584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e586:	bf00      	nop
 800e588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e58a:	bc08      	pop	{r3}
 800e58c:	469e      	mov	lr, r3
 800e58e:	4770      	bx	lr

0800e590 <_fini>:
 800e590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e592:	bf00      	nop
 800e594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e596:	bc08      	pop	{r3}
 800e598:	469e      	mov	lr, r3
 800e59a:	4770      	bx	lr
