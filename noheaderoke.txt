/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <math.h>
#include "usb_device.h"
#include "CS5361.h"
#include "usbd_cdc.h"
#include <string.h>
#include <stdio.h>
#include <stdbool.h>
#include "usbd_cdc_if.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CRC_HandleTypeDef hcrc;

I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_rx;

TIM_HandleTypeDef htim4;

/* USER CODE BEGIN PV */
// pack buffer
#define FIFO_SIZE 	27011
#define USB_BUFFER_SIZE 2048
//uint32_t fifobuf[FIFO_SIZE];
volatile uint16_t fifo_w_ptr = 0;
volatile uint16_t fifo_r_ptr = 0;
uint8_t fifo_read_enabled = 0;
static uint32_t fifo_overflow_count = 0;
#define USB_PAYLOAD_SIZE 420
//uint8_t usbTxBuffer[USB_PAYLOAD_SIZE];
volatile uint8_t usbTxReady = 1;
#define PACKET_START_MARKER1 0xAA
#define PACKET_START_MARKER2 0x55
#define PACKET_HEADER_SIZE 4                                   // 2 start markers + 2 bytes length
#define AUDIO_BUFFER_SIZE 512                                 // sample
#define AUDIO_CHANNELS 2                                       // left and right (2), left or right (1)
#define SAMPLE_RATE 48000                                      // 48kHz sampling rate
uint16_t audio_buffer[AUDIO_BUFFER_SIZE * AUDIO_CHANNELS * 2]; // x2 vì 24-bit = 2 x uint16_t
volatile uint8_t buffer_ready_flag = 0;
volatile uint8_t current_buffer = 0; // 0 = ping, 1 = pong
typedef struct
{
  uint8_t b[3]; // MSB, MID, LSB
} Sample_t;
volatile Sample_t sample_fifo[FIFO_SIZE];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM4_Init(void);
static void MX_CRC_Init(void);
static void MX_I2S3_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Process_Audio_Data(uint16_t *buffer, uint16_t size);

void FifoWriteSample(uint8_t b1, uint8_t b2, uint8_t b3)
{
  uint16_t next = (fifo_w_ptr + 1) % FIFO_SIZE;
  uint16_t fifo_usage = (fifo_w_ptr - fifo_r_ptr + FIFO_SIZE) % FIFO_SIZE;
  if (next == fifo_r_ptr)
  {
    // FIFO đầy → bỏ sample cũ nhất
    fifo_r_ptr = (fifo_r_ptr + 1) % FIFO_SIZE;
  }

  sample_fifo[fifo_w_ptr].b[0] = b1;
  sample_fifo[fifo_w_ptr].b[1] = b2;
  sample_fifo[fifo_w_ptr].b[2] = b3;
  fifo_w_ptr = next;
}
uint8_t FifoReadSample(Sample_t *out)
{
  if (fifo_r_ptr != fifo_w_ptr)
  {
    *out = sample_fifo[fifo_r_ptr];
    fifo_r_ptr = (fifo_r_ptr + 1) % FIFO_SIZE;
    return 1;
  }
  return 0;
}
uint16_t FifoAvailable(void)
{
  return (fifo_w_ptr - fifo_r_ptr + FIFO_SIZE) % FIFO_SIZE;
}

void SendAD7175DataOverUSB(void)
{
  if (usbTxReady && FifoAvailable() >= (USB_PAYLOAD_SIZE / 3)) // 32 samples
  {
    uint8_t usb_tx_buffer[USB_PAYLOAD_SIZE];

//    usb_tx_buffer[0] = 0xAA; // PACKET_START_MARKER1
//    usb_tx_buffer[1] = 0x55; // PACKET_START_MARKER2
//    usb_tx_buffer[2] = (USB_PAYLOAD_SIZE >> 8) & 0xFF;
//    usb_tx_buffer[3] = USB_PAYLOAD_SIZE & 0xFF;

    for (uint16_t i = 0; i < (USB_PAYLOAD_SIZE / 3); i++) // 32 sample
    {
      Sample_t s;
      if(FifoReadSample(&s))
      {
      usb_tx_buffer[ i * 3 + 0] = s.b[0];
      usb_tx_buffer[ i * 3 + 1] = s.b[1];
      usb_tx_buffer[i * 3 + 2] = s.b[2];
      }
      else
      {
        // FIFO underflow - fill with zeros
        usb_tx_buffer[i * 3 + 0] = 0;
        usb_tx_buffer[i * 3 + 1] = 0;
        usb_tx_buffer[i * 3 + 2] = 0;
      }
    }

    usbTxReady = 0;
    CDC_Transmit_FS(usb_tx_buffer, USB_PAYLOAD_SIZE );
  }
}
void CheckUSBStatus(void)
{
  static uint32_t last_check_time = 0;
  static uint32_t stuck_time = 0;

  uint32_t current_time = HAL_GetTick();
  if (current_time - last_check_time < 100)
    return;

  last_check_time = current_time;
  if (!usbTxReady)
  {
    if (stuck_time == 0)
    {
      stuck_time = current_time;
    }
    else if (current_time - stuck_time > 500)
    {
      usbTxReady = 1;
      stuck_time = 0;
      //  for (int i = 0; i < 3; i++)
      //  {
      //   //  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
      //   //  HAL_Delay(20);
      //   //  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
      //   //  HAL_Delay(20);
      //  }
    }
  }
  else
  {
    stuck_time = 0;
  }
}
void FifoWriteFromBuffer(uint16_t *buffer, uint16_t start, uint16_t end)
{
  for (uint16_t i = start; i < end; i += 4)
  {
    uint16_t left_high = buffer[i];    // LH
    uint16_t left_low = buffer[i + 1]; // LL

    uint32_t sample_24bit = ((uint32_t)left_high << 16) | left_low;
    sample_24bit = sample_24bit >> 8; // align to 24-bit MSB

//    uint8_t b1 = sample_24bit & 0xFF;         // LSB
//    uint8_t b2 = (sample_24bit >> 8) & 0xFF;  // MID
//    uint8_t b3 = (sample_24bit >> 16) & 0xFF; // MSB
    FifoWriteSample((sample_24bit & 0xFF),((sample_24bit >> 8) & 0xFF),((sample_24bit >> 16) & 0xFF));
  }
}

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_TIM4_Init();
  MX_CRC_Init();
  MX_USB_DEVICE_Init();
  MX_I2S3_Init();
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); // èn xanh
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET); // èn xanh lá
  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET); // èn đ
  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET); // èn màu xanh dương

  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
  HAL_Delay(200);
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
  HAL_Delay(200);
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
  cs5361_init();
  HAL_Delay(50);
  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
  HAL_Delay(200);
  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
  HAL_I2S_Receive_DMA(&hi2s3, audio_buffer, AUDIO_BUFFER_SIZE * AUDIO_CHANNELS * 2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */



      if (current_buffer == 1)
      {
        FifoWriteFromBuffer(audio_buffer, 0, AUDIO_BUFFER_SIZE * 2);
        current_buffer =0;
      }
       if (current_buffer == 2)
      {
        FifoWriteFromBuffer(audio_buffer, AUDIO_BUFFER_SIZE * 2, AUDIO_BUFFER_SIZE * 4);
        current_buffer =0;
      }

    SendAD7175DataOverUSB();
    CheckUSBStatus();
  }
  /* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{

  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */
}

/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{

  /* USER CODE BEGIN I2S3_Init 0 */

  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */
}

/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 6;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 249;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
}

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS5361_RST_Pin | CS5361_SA_Pin | CS5361_HPF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS5361_MDIV_Pin | CS5361_M1_Pin | CS5361_M0_Pin | CS5361_MS_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : CS5361_RST_Pin CS5361_SA_Pin CS5361_HPF_Pin */
  GPIO_InitStruct.Pin = CS5361_RST_Pin | CS5361_SA_Pin | CS5361_HPF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : CS5361_MDIV_Pin CS5361_M1_Pin CS5361_M0_Pin CS5361_MS_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = CS5361_MDIV_Pin | CS5361_M1_Pin | CS5361_M0_Pin | CS5361_MS_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
// void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
//{
//   /* Call CS5361 transfer complete callback */
//   if (hi2s->Instance == SPI3)
//   {
//     cs5361_transfer_complete_callback();
//   }
// }
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
  current_buffer = 1;
  buffer_ready_flag = 1;
}
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
  current_buffer = 2;
  buffer_ready_flag = 1;
}
// void Process_Audio_Data(uint16_t *buffer, uint16_t size)
// {
//   if (usbTxReady)
//   {
//     // Giới hạn kích thước gói tin để truy�?n hiệu quả
//     uint16_t sample_count = size;
//     uint16_t total_size = sample_count * 3 + PACKET_HEADER_SIZE;

//     // Thêm header gói tin
//     usbTxBuffer[0] = PACKET_START_MARKER1;
//     usbTxBuffer[1] = PACKET_START_MARKER2;
//     usbTxBuffer[2] = (sample_count >> 8) & 0xFF;
//     usbTxBuffer[3] = sample_count & 0xFF;

//     // Xử lý trực tiếp dữ liệu kênh trái và đưa vào buffer USB
//     for (uint16_t i = 0, offset_idx = 0; i < sample_count; i += 2, offset_idx++)
//     {
//       uint16_t left_high = buffer[i];
//       uint16_t left_low = buffer[i + 1];

//       // Chuyển sang định dạng 24-bit (left_high&0xFF)|left_low
//       uint32_t left_24bit = (left_high << 16) | left_low;
//       // left_24bit = (left_24bit << 8) >> 8; // Sign extend

//       // �?ặt dữ liệu vào buffer truy�?n
//       uint32_t offset = PACKET_HEADER_SIZE + (offset_idx * 3);
//       usbTxBuffer[offset] = left_24bit & 0xFF;
//       usbTxBuffer[offset + 1] = (left_24bit >> 8) & 0xFF;
//       usbTxBuffer[offset + 2] = (left_24bit >> 16) & 0xFF;
//     }

//     // Gửi dữ liệu qua USB
//     usbTxReady = 0;
//     uint8_t result = CDC_Transmit_FS(usbTxBuffer, total_size);
//     // if (result == USBD_OK)
//     // {
//     //   HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
//     //   HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 0);
//     // }
//     // else
//     // {
//     //   usbTxReady = 1;
//     //   HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 1);
//     // }
//   }
// }
/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
